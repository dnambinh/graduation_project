
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b184  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  0800b298  0800b298  0001b298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8a8  0800b8a8  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  0800b8a8  0800b8a8  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b8a8  0800b8a8  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8a8  0800b8a8  0001b8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8ac  0800b8ac  0001b8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800b8b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000218  0800bac8  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  0800bac8  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c94d  00000000  00000000  00020241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b38  00000000  00000000  0002cb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  0002e6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  0002f458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018526  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9ee  00000000  00000000  0004865e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ca34  00000000  00000000  0005704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3a80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005050  00000000  00000000  000e3ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b27c 	.word	0x0800b27c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	0800b27c 	.word	0x0800b27c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <HAL_TIM_IC_CaptureCallback>:
volatile uint32_t diff1 = 0, diff2 = 0, diff3 = 0, diff4 = 0;

uint8_t firt_capture1 = 0, firt_capture2 = 0, firt_capture3 = 0, firt_capture4 =
		0;	//fist_capture? 0-no 1-yes

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7f1b      	ldrb	r3, [r3, #28]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d158      	bne.n	80011de <HAL_TIM_IC_CaptureCallback+0xc2>
		if (firt_capture1 == 0) {
 800112c:	4b78      	ldr	r3, [pc, #480]	; (8001310 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d11a      	bne.n	800116a <HAL_TIM_IC_CaptureCallback+0x4e>
			channel_1_start = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001134:	2100      	movs	r1, #0
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f004 fe2e 	bl	8005d98 <HAL_TIM_ReadCapturedValue>
 800113c:	4603      	mov	r3, r0
 800113e:	4a75      	ldr	r2, [pc, #468]	; (8001314 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8001140:	6013      	str	r3, [r2, #0]
			firt_capture1 = 1;
 8001142:	4b73      	ldr	r3, [pc, #460]	; (8001310 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6a1a      	ldr	r2, [r3, #32]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 020a 	bic.w	r2, r2, #10
 8001156:	621a      	str	r2, [r3, #32]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6a1a      	ldr	r2, [r3, #32]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0202 	orr.w	r2, r2, #2
 8001166:	621a      	str	r2, [r3, #32]
 8001168:	e039      	b.n	80011de <HAL_TIM_IC_CaptureCallback+0xc2>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		} else if (firt_capture1 == 1) {
 800116a:	4b69      	ldr	r3, [pc, #420]	; (8001310 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d135      	bne.n	80011de <HAL_TIM_IC_CaptureCallback+0xc2>
			channel_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001172:	2100      	movs	r1, #0
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f004 fe0f 	bl	8005d98 <HAL_TIM_ReadCapturedValue>
 800117a:	4603      	mov	r3, r0
 800117c:	4a66      	ldr	r2, [pc, #408]	; (8001318 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800117e:	6013      	str	r3, [r2, #0]
			if (channel_1 > channel_1_start)
 8001180:	4b65      	ldr	r3, [pc, #404]	; (8001318 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b63      	ldr	r3, [pc, #396]	; (8001314 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d907      	bls.n	800119c <HAL_TIM_IC_CaptureCallback+0x80>
				diff1 = channel_1 - channel_1_start;
 800118c:	4b62      	ldr	r3, [pc, #392]	; (8001318 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b60      	ldr	r3, [pc, #384]	; (8001314 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	4a61      	ldr	r2, [pc, #388]	; (800131c <HAL_TIM_IC_CaptureCallback+0x200>)
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e00f      	b.n	80011bc <HAL_TIM_IC_CaptureCallback+0xa0>
			else if (channel_1 < channel_1_start)
 800119c:	4b5e      	ldr	r3, [pc, #376]	; (8001318 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b5c      	ldr	r3, [pc, #368]	; (8001314 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d209      	bcs.n	80011bc <HAL_TIM_IC_CaptureCallback+0xa0>
				diff1 = (0xffff - channel_1_start) + channel_1;
 80011a8:	4b5b      	ldr	r3, [pc, #364]	; (8001318 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b59      	ldr	r3, [pc, #356]	; (8001314 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80011b6:	33ff      	adds	r3, #255	; 0xff
 80011b8:	4a58      	ldr	r2, [pc, #352]	; (800131c <HAL_TIM_IC_CaptureCallback+0x200>)
 80011ba:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6a1a      	ldr	r2, [r3, #32]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 020a 	bic.w	r2, r2, #10
 80011ca:	621a      	str	r2, [r3, #32]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6a12      	ldr	r2, [r2, #32]
 80011d6:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			firt_capture1 = 0;
 80011d8:	4b4d      	ldr	r3, [pc, #308]	; (8001310 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
		}
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7f1b      	ldrb	r3, [r3, #28]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d158      	bne.n	8001298 <HAL_TIM_IC_CaptureCallback+0x17c>
		if (firt_capture2 == 0) {					//read
 80011e6:	4b4e      	ldr	r3, [pc, #312]	; (8001320 <HAL_TIM_IC_CaptureCallback+0x204>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d11a      	bne.n	8001224 <HAL_TIM_IC_CaptureCallback+0x108>
			channel_2_start = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80011ee:	2104      	movs	r1, #4
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f004 fdd1 	bl	8005d98 <HAL_TIM_ReadCapturedValue>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a4a      	ldr	r2, [pc, #296]	; (8001324 <HAL_TIM_IC_CaptureCallback+0x208>)
 80011fa:	6013      	str	r3, [r2, #0]
			firt_capture2 = 1;
 80011fc:	4b48      	ldr	r3, [pc, #288]	; (8001320 <HAL_TIM_IC_CaptureCallback+0x204>)
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6a1a      	ldr	r2, [r3, #32]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001210:	621a      	str	r2, [r3, #32]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6a1a      	ldr	r2, [r3, #32]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 0220 	orr.w	r2, r2, #32
 8001220:	621a      	str	r2, [r3, #32]
 8001222:	e039      	b.n	8001298 <HAL_TIM_IC_CaptureCallback+0x17c>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		} else if (firt_capture2 == 1) {
 8001224:	4b3e      	ldr	r3, [pc, #248]	; (8001320 <HAL_TIM_IC_CaptureCallback+0x204>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d135      	bne.n	8001298 <HAL_TIM_IC_CaptureCallback+0x17c>
			channel_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800122c:	2104      	movs	r1, #4
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f004 fdb2 	bl	8005d98 <HAL_TIM_ReadCapturedValue>
 8001234:	4603      	mov	r3, r0
 8001236:	4a3c      	ldr	r2, [pc, #240]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8001238:	6013      	str	r3, [r2, #0]
			if (channel_2 > channel_2_start)
 800123a:	4b3b      	ldr	r3, [pc, #236]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b39      	ldr	r3, [pc, #228]	; (8001324 <HAL_TIM_IC_CaptureCallback+0x208>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d907      	bls.n	8001256 <HAL_TIM_IC_CaptureCallback+0x13a>
				diff2 = channel_2 - channel_2_start;
 8001246:	4b38      	ldr	r3, [pc, #224]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4b36      	ldr	r3, [pc, #216]	; (8001324 <HAL_TIM_IC_CaptureCallback+0x208>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	4a36      	ldr	r2, [pc, #216]	; (800132c <HAL_TIM_IC_CaptureCallback+0x210>)
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	e00f      	b.n	8001276 <HAL_TIM_IC_CaptureCallback+0x15a>
			else if (channel_2 < channel_2_start)
 8001256:	4b34      	ldr	r3, [pc, #208]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4b32      	ldr	r3, [pc, #200]	; (8001324 <HAL_TIM_IC_CaptureCallback+0x208>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d209      	bcs.n	8001276 <HAL_TIM_IC_CaptureCallback+0x15a>
				diff2 = (0xffff - channel_2_start) + channel_2;
 8001262:	4b31      	ldr	r3, [pc, #196]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4b2f      	ldr	r3, [pc, #188]	; (8001324 <HAL_TIM_IC_CaptureCallback+0x208>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001270:	33ff      	adds	r3, #255	; 0xff
 8001272:	4a2e      	ldr	r2, [pc, #184]	; (800132c <HAL_TIM_IC_CaptureCallback+0x210>)
 8001274:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6a1a      	ldr	r2, [r3, #32]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001284:	621a      	str	r2, [r3, #32]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6a12      	ldr	r2, [r2, #32]
 8001290:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			firt_capture2 = 0;
 8001292:	4b23      	ldr	r3, [pc, #140]	; (8001320 <HAL_TIM_IC_CaptureCallback+0x204>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
		}
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7f1b      	ldrb	r3, [r3, #28]
 800129c:	2b04      	cmp	r3, #4
 800129e:	d170      	bne.n	8001382 <HAL_TIM_IC_CaptureCallback+0x266>
		if (firt_capture3 == 0) {					//read
 80012a0:	4b23      	ldr	r3, [pc, #140]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x214>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d11a      	bne.n	80012de <HAL_TIM_IC_CaptureCallback+0x1c2>
			channel_3_start = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80012a8:	2108      	movs	r1, #8
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f004 fd74 	bl	8005d98 <HAL_TIM_ReadCapturedValue>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4a20      	ldr	r2, [pc, #128]	; (8001334 <HAL_TIM_IC_CaptureCallback+0x218>)
 80012b4:	6013      	str	r3, [r2, #0]
			firt_capture3 = 1;
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x214>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]
			//Change the input capture mode to the falling edge of the pulse
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3,
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6a1a      	ldr	r2, [r3, #32]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012ca:	621a      	str	r2, [r3, #32]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6a1a      	ldr	r2, [r3, #32]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012da:	621a      	str	r2, [r3, #32]
 80012dc:	e051      	b.n	8001382 <HAL_TIM_IC_CaptureCallback+0x266>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		} else if (firt_capture3 == 1) {
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x214>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d14d      	bne.n	8001382 <HAL_TIM_IC_CaptureCallback+0x266>
			channel_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80012e6:	2108      	movs	r1, #8
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f004 fd55 	bl	8005d98 <HAL_TIM_ReadCapturedValue>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4a11      	ldr	r2, [pc, #68]	; (8001338 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80012f2:	6013      	str	r3, [r2, #0]
			if (channel_3 > channel_3_start)
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_TIM_IC_CaptureCallback+0x218>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d91f      	bls.n	8001340 <HAL_TIM_IC_CaptureCallback+0x224>
				diff3 = channel_3 - channel_3_start;
 8001300:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_TIM_IC_CaptureCallback+0x218>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	4a0c      	ldr	r2, [pc, #48]	; (800133c <HAL_TIM_IC_CaptureCallback+0x220>)
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	e027      	b.n	8001360 <HAL_TIM_IC_CaptureCallback+0x244>
 8001310:	20000390 	.word	0x20000390
 8001314:	20000360 	.word	0x20000360
 8001318:	20000364 	.word	0x20000364
 800131c:	20000380 	.word	0x20000380
 8001320:	20000391 	.word	0x20000391
 8001324:	20000368 	.word	0x20000368
 8001328:	2000036c 	.word	0x2000036c
 800132c:	20000384 	.word	0x20000384
 8001330:	20000392 	.word	0x20000392
 8001334:	20000370 	.word	0x20000370
 8001338:	20000374 	.word	0x20000374
 800133c:	20000388 	.word	0x20000388
			else if (channel_3 < channel_3_start)
 8001340:	4b40      	ldr	r3, [pc, #256]	; (8001444 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b40      	ldr	r3, [pc, #256]	; (8001448 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d209      	bcs.n	8001360 <HAL_TIM_IC_CaptureCallback+0x244>
				diff3 = (0xffff - channel_3_start) + channel_3;
 800134c:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <HAL_TIM_IC_CaptureCallback+0x328>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b3d      	ldr	r3, [pc, #244]	; (8001448 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800135a:	33ff      	adds	r3, #255	; 0xff
 800135c:	4a3b      	ldr	r2, [pc, #236]	; (800144c <HAL_TIM_IC_CaptureCallback+0x330>)
 800135e:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6a1a      	ldr	r2, [r3, #32]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800136e:	621a      	str	r2, [r3, #32]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6a12      	ldr	r2, [r2, #32]
 800137a:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			firt_capture3 = 0;
 800137c:	4b34      	ldr	r3, [pc, #208]	; (8001450 <HAL_TIM_IC_CaptureCallback+0x334>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
		}
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	7f1b      	ldrb	r3, [r3, #28]
 8001386:	2b08      	cmp	r3, #8
 8001388:	d158      	bne.n	800143c <HAL_TIM_IC_CaptureCallback+0x320>
		if (firt_capture4 == 0) {					//read
 800138a:	4b32      	ldr	r3, [pc, #200]	; (8001454 <HAL_TIM_IC_CaptureCallback+0x338>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d11a      	bne.n	80013c8 <HAL_TIM_IC_CaptureCallback+0x2ac>
			channel_4_start = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001392:	210c      	movs	r1, #12
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f004 fcff 	bl	8005d98 <HAL_TIM_ReadCapturedValue>
 800139a:	4603      	mov	r3, r0
 800139c:	4a2e      	ldr	r2, [pc, #184]	; (8001458 <HAL_TIM_IC_CaptureCallback+0x33c>)
 800139e:	6013      	str	r3, [r2, #0]
			firt_capture4 = 1;
 80013a0:	4b2c      	ldr	r3, [pc, #176]	; (8001454 <HAL_TIM_IC_CaptureCallback+0x338>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
			//Change the input capture mode to the falling edge of the pulse
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6a1a      	ldr	r2, [r3, #32]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013b4:	621a      	str	r2, [r3, #32]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6a1a      	ldr	r2, [r3, #32]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013c4:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
					TIM_INPUTCHANNELPOLARITY_RISING);
			firt_capture4 = 0;
		}
	}
}
 80013c6:	e039      	b.n	800143c <HAL_TIM_IC_CaptureCallback+0x320>
		} else if (firt_capture4 == 1) {
 80013c8:	4b22      	ldr	r3, [pc, #136]	; (8001454 <HAL_TIM_IC_CaptureCallback+0x338>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d135      	bne.n	800143c <HAL_TIM_IC_CaptureCallback+0x320>
			channel_4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80013d0:	210c      	movs	r1, #12
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f004 fce0 	bl	8005d98 <HAL_TIM_ReadCapturedValue>
 80013d8:	4603      	mov	r3, r0
 80013da:	4a20      	ldr	r2, [pc, #128]	; (800145c <HAL_TIM_IC_CaptureCallback+0x340>)
 80013dc:	6013      	str	r3, [r2, #0]
			if (channel_4 > channel_4_start)
 80013de:	4b1f      	ldr	r3, [pc, #124]	; (800145c <HAL_TIM_IC_CaptureCallback+0x340>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_TIM_IC_CaptureCallback+0x33c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d907      	bls.n	80013fa <HAL_TIM_IC_CaptureCallback+0x2de>
				diff4 = channel_4 - channel_4_start;
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <HAL_TIM_IC_CaptureCallback+0x340>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <HAL_TIM_IC_CaptureCallback+0x33c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	4a1a      	ldr	r2, [pc, #104]	; (8001460 <HAL_TIM_IC_CaptureCallback+0x344>)
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	e00f      	b.n	800141a <HAL_TIM_IC_CaptureCallback+0x2fe>
			else if (channel_4 < channel_4_start)
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <HAL_TIM_IC_CaptureCallback+0x340>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4b16      	ldr	r3, [pc, #88]	; (8001458 <HAL_TIM_IC_CaptureCallback+0x33c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d209      	bcs.n	800141a <HAL_TIM_IC_CaptureCallback+0x2fe>
				diff4 = (0xffff - channel_4_start) + channel_4;
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_TIM_IC_CaptureCallback+0x340>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <HAL_TIM_IC_CaptureCallback+0x33c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001414:	33ff      	adds	r3, #255	; 0xff
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <HAL_TIM_IC_CaptureCallback+0x344>)
 8001418:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6a1a      	ldr	r2, [r3, #32]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001428:	621a      	str	r2, [r3, #32]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6a12      	ldr	r2, [r2, #32]
 8001434:	621a      	str	r2, [r3, #32]
			firt_capture4 = 0;
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <HAL_TIM_IC_CaptureCallback+0x338>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000374 	.word	0x20000374
 8001448:	20000370 	.word	0x20000370
 800144c:	20000388 	.word	0x20000388
 8001450:	20000392 	.word	0x20000392
 8001454:	20000393 	.word	0x20000393
 8001458:	20000378 	.word	0x20000378
 800145c:	2000037c 	.word	0x2000037c
 8001460:	2000038c 	.word	0x2000038c

08001464 <MPU6050_Init>:
		os_Gz = 11;	//4
//int16_t os_Ax = 0, os_Ay = 0, os_Az = 0, os_Gx = 0, os_Gy = 0, os_Gz = 0;

int32_t ax_cal = 0, ay_cal = 0, az_cal = 0, gx_cal = 0, gy_cal = 0, gz_cal = 0;

void MPU6050_Init(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af04      	add	r7, sp, #16
	uint8_t check, Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 800146a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	2301      	movs	r3, #1
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	1dfb      	adds	r3, r7, #7
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2301      	movs	r3, #1
 800147a:	2275      	movs	r2, #117	; 0x75
 800147c:	21d0      	movs	r1, #208	; 0xd0
 800147e:	4823      	ldr	r0, [pc, #140]	; (800150c <MPU6050_Init+0xa8>)
 8001480:	f002 fd04 	bl	8003e8c <HAL_I2C_Mem_Read>

	if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	2b68      	cmp	r3, #104	; 0x68
 8001488:	d13b      	bne.n	8001502 <MPU6050_Init+0x9e>
			{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,
 800148e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	2301      	movs	r3, #1
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	1dbb      	adds	r3, r7, #6
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2301      	movs	r3, #1
 800149e:	226b      	movs	r2, #107	; 0x6b
 80014a0:	21d0      	movs	r1, #208	; 0xd0
 80014a2:	481a      	ldr	r0, [pc, #104]	; (800150c <MPU6050_Init+0xa8>)
 80014a4:	f002 fbf8 	bl	8003c98 <HAL_I2C_Mem_Write>
				1000);	//done

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=1 -> ± 500 °/s
		Data = 0x08;
 80014a8:	2308      	movs	r3, #8
 80014aa:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,
 80014ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	2301      	movs	r3, #1
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	1dbb      	adds	r3, r7, #6
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2301      	movs	r3, #1
 80014bc:	221b      	movs	r2, #27
 80014be:	21d0      	movs	r1, #208	; 0xd0
 80014c0:	4812      	ldr	r0, [pc, #72]	; (800150c <MPU6050_Init+0xa8>)
 80014c2:	f002 fbe9 	bl	8003c98 <HAL_I2C_Mem_Write>
				1000);
		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=3 -> ± 8g
		Data = 0x10;
 80014c6:	2310      	movs	r3, #16
 80014c8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,
 80014ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ce:	9302      	str	r3, [sp, #8]
 80014d0:	2301      	movs	r3, #1
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	1dbb      	adds	r3, r7, #6
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2301      	movs	r3, #1
 80014da:	221c      	movs	r2, #28
 80014dc:	21d0      	movs	r1, #208	; 0xd0
 80014de:	480b      	ldr	r0, [pc, #44]	; (800150c <MPU6050_Init+0xa8>)
 80014e0:	f002 fbda 	bl	8003c98 <HAL_I2C_Mem_Write>
				1000);

		Data = 0x03;
 80014e4:	2303      	movs	r3, #3
 80014e6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1A, 1, &Data, 1, 1000);
 80014e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ec:	9302      	str	r3, [sp, #8]
 80014ee:	2301      	movs	r3, #1
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	1dbb      	adds	r3, r7, #6
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2301      	movs	r3, #1
 80014f8:	221a      	movs	r2, #26
 80014fa:	21d0      	movs	r1, #208	; 0xd0
 80014fc:	4803      	ldr	r0, [pc, #12]	; (800150c <MPU6050_Init+0xa8>)
 80014fe:	f002 fbcb 	bl	8003c98 <HAL_I2C_Mem_Write>
	}
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000234 	.word	0x20000234

08001510 <MPU6050_Read>:

void MPU6050_Read(void) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[14];

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14,
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	9302      	str	r3, [sp, #8]
 800151c:	230e      	movs	r3, #14
 800151e:	9301      	str	r3, [sp, #4]
 8001520:	463b      	mov	r3, r7
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	2301      	movs	r3, #1
 8001526:	223b      	movs	r2, #59	; 0x3b
 8001528:	21d0      	movs	r1, #208	; 0xd0
 800152a:	4853      	ldr	r0, [pc, #332]	; (8001678 <MPU6050_Read+0x168>)
 800152c:	f002 fcae 	bl	8003e8c <HAL_I2C_Mem_Read>
			1000);

	Accel_X_RAW = (int16_t) Rec_Data[0] << 8 | Rec_Data[1];
 8001530:	783b      	ldrb	r3, [r7, #0]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	b21a      	sxth	r2, r3
 8001536:	787b      	ldrb	r3, [r7, #1]
 8001538:	b21b      	sxth	r3, r3
 800153a:	4313      	orrs	r3, r2
 800153c:	b21a      	sxth	r2, r3
 800153e:	4b4f      	ldr	r3, [pc, #316]	; (800167c <MPU6050_Read+0x16c>)
 8001540:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t) Rec_Data[2] << 8 | Rec_Data[3];
 8001542:	78bb      	ldrb	r3, [r7, #2]
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	b21a      	sxth	r2, r3
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	b21b      	sxth	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	b21a      	sxth	r2, r3
 8001550:	4b4b      	ldr	r3, [pc, #300]	; (8001680 <MPU6050_Read+0x170>)
 8001552:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t) Rec_Data[4] << 8 | Rec_Data[5];
 8001554:	793b      	ldrb	r3, [r7, #4]
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	b21a      	sxth	r2, r3
 800155a:	797b      	ldrb	r3, [r7, #5]
 800155c:	b21b      	sxth	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b21a      	sxth	r2, r3
 8001562:	4b48      	ldr	r3, [pc, #288]	; (8001684 <MPU6050_Read+0x174>)
 8001564:	801a      	strh	r2, [r3, #0]
	temp_raw = (int16_t) Rec_Data[6] << 8 | Rec_Data[7];
 8001566:	79bb      	ldrb	r3, [r7, #6]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	b21a      	sxth	r2, r3
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	b21b      	sxth	r3, r3
 8001570:	4313      	orrs	r3, r2
 8001572:	b21a      	sxth	r2, r3
 8001574:	4b44      	ldr	r3, [pc, #272]	; (8001688 <MPU6050_Read+0x178>)
 8001576:	801a      	strh	r2, [r3, #0]
	Gyro_X_RAW = (int16_t) Rec_Data[8] << 8 | Rec_Data[9];
 8001578:	7a3b      	ldrb	r3, [r7, #8]
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	b21a      	sxth	r2, r3
 800157e:	7a7b      	ldrb	r3, [r7, #9]
 8001580:	b21b      	sxth	r3, r3
 8001582:	4313      	orrs	r3, r2
 8001584:	b21a      	sxth	r2, r3
 8001586:	4b41      	ldr	r3, [pc, #260]	; (800168c <MPU6050_Read+0x17c>)
 8001588:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t) Rec_Data[10] << 8 | Rec_Data[11];
 800158a:	7abb      	ldrb	r3, [r7, #10]
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	b21a      	sxth	r2, r3
 8001590:	7afb      	ldrb	r3, [r7, #11]
 8001592:	b21b      	sxth	r3, r3
 8001594:	4313      	orrs	r3, r2
 8001596:	b21a      	sxth	r2, r3
 8001598:	4b3d      	ldr	r3, [pc, #244]	; (8001690 <MPU6050_Read+0x180>)
 800159a:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t) Rec_Data[12] << 8 | Rec_Data[13];
 800159c:	7b3b      	ldrb	r3, [r7, #12]
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	7b7b      	ldrb	r3, [r7, #13]
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	4b3a      	ldr	r3, [pc, #232]	; (8001694 <MPU6050_Read+0x184>)
 80015ac:	801a      	strh	r2, [r3, #0]

	Gyro_Y_RAW *= -1;
 80015ae:	4b38      	ldr	r3, [pc, #224]	; (8001690 <MPU6050_Read+0x180>)
 80015b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	425b      	negs	r3, r3
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	4b34      	ldr	r3, [pc, #208]	; (8001690 <MPU6050_Read+0x180>)
 80015be:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW *= -1;
 80015c0:	4b34      	ldr	r3, [pc, #208]	; (8001694 <MPU6050_Read+0x184>)
 80015c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	425b      	negs	r3, r3
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	4b31      	ldr	r3, [pc, #196]	; (8001694 <MPU6050_Read+0x184>)
 80015d0:	801a      	strh	r2, [r3, #0]

	Accel_X_RAW -= os_Ax;
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <MPU6050_Read+0x16c>)
 80015d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <MPU6050_Read+0x188>)
 80015dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	b21a      	sxth	r2, r3
 80015e8:	4b24      	ldr	r3, [pc, #144]	; (800167c <MPU6050_Read+0x16c>)
 80015ea:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW -= os_Ay;
 80015ec:	4b24      	ldr	r3, [pc, #144]	; (8001680 <MPU6050_Read+0x170>)
 80015ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	4b29      	ldr	r3, [pc, #164]	; (800169c <MPU6050_Read+0x18c>)
 80015f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	b29b      	uxth	r3, r3
 8001600:	b21a      	sxth	r2, r3
 8001602:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <MPU6050_Read+0x170>)
 8001604:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW -= os_Az;
 8001606:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <MPU6050_Read+0x174>)
 8001608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160c:	b29a      	uxth	r2, r3
 800160e:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <MPU6050_Read+0x190>)
 8001610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001614:	b29b      	uxth	r3, r3
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	b29b      	uxth	r3, r3
 800161a:	b21a      	sxth	r2, r3
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <MPU6050_Read+0x174>)
 800161e:	801a      	strh	r2, [r3, #0]
	Gyro_X_RAW -= os_Gx;
 8001620:	4b1a      	ldr	r3, [pc, #104]	; (800168c <MPU6050_Read+0x17c>)
 8001622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001626:	b29a      	uxth	r2, r3
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <MPU6050_Read+0x194>)
 800162a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162e:	b29b      	uxth	r3, r3
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	b29b      	uxth	r3, r3
 8001634:	b21a      	sxth	r2, r3
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <MPU6050_Read+0x17c>)
 8001638:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW -= os_Gy;
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MPU6050_Read+0x180>)
 800163c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001640:	b29a      	uxth	r2, r3
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <MPU6050_Read+0x198>)
 8001644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001648:	b29b      	uxth	r3, r3
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	b29b      	uxth	r3, r3
 800164e:	b21a      	sxth	r2, r3
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <MPU6050_Read+0x180>)
 8001652:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW -= os_Gz;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MPU6050_Read+0x184>)
 8001656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165a:	b29a      	uxth	r2, r3
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <MPU6050_Read+0x19c>)
 800165e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001662:	b29b      	uxth	r3, r3
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	b29b      	uxth	r3, r3
 8001668:	b21a      	sxth	r2, r3
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <MPU6050_Read+0x184>)
 800166c:	801a      	strh	r2, [r3, #0]
}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000234 	.word	0x20000234
 800167c:	20000394 	.word	0x20000394
 8001680:	20000396 	.word	0x20000396
 8001684:	20000398 	.word	0x20000398
 8001688:	200003a0 	.word	0x200003a0
 800168c:	2000039a 	.word	0x2000039a
 8001690:	2000039c 	.word	0x2000039c
 8001694:	2000039e 	.word	0x2000039e
 8001698:	20000000 	.word	0x20000000
 800169c:	20000002 	.word	0x20000002
 80016a0:	20000004 	.word	0x20000004
 80016a4:	20000006 	.word	0x20000006
 80016a8:	20000008 	.word	0x20000008
 80016ac:	2000000a 	.word	0x2000000a

080016b0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80016b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80016b8:	f001 fe60 	bl	800337c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80016bc:	f001 f996 	bl	80029ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80016c0:	f001 fb82 	bl	8002dc8 <MX_GPIO_Init>
	MX_I2C1_Init();
 80016c4:	f001 f9d8 	bl	8002a78 <MX_I2C1_Init>
	MX_TIM2_Init();
 80016c8:	f001 fa06 	bl	8002ad8 <MX_TIM2_Init>
	MX_TIM3_Init();
 80016cc:	f001 fa78 	bl	8002bc0 <MX_TIM3_Init>
	MX_TIM4_Init();
 80016d0:	f001 faf8 	bl	8002cc4 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	MPU6050_Init();
 80016d4:	f7ff fec6 	bl	8001464 <MPU6050_Init>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016de:	4849      	ldr	r0, [pc, #292]	; (8001804 <main+0x154>)
 80016e0:	f002 f964 	bl	80039ac <HAL_GPIO_WritePin>
	//offset_calculate();

	for (int i = 0; i < 20; i++) {
 80016e4:	2300      	movs	r3, #0
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	e00a      	b.n	8001700 <main+0x50>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80016ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ee:	4845      	ldr	r0, [pc, #276]	; (8001804 <main+0x154>)
 80016f0:	f002 f974 	bl	80039dc <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80016f4:	2064      	movs	r0, #100	; 0x64
 80016f6:	f001 fea3 	bl	8003440 <HAL_Delay>
	for (int i = 0; i < 20; i++) {
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3301      	adds	r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b13      	cmp	r3, #19
 8001704:	ddf1      	ble.n	80016ea <main+0x3a>
	}

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001706:	2100      	movs	r1, #0
 8001708:	483f      	ldr	r0, [pc, #252]	; (8001808 <main+0x158>)
 800170a:	f003 ff21 	bl	8005550 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800170e:	2104      	movs	r1, #4
 8001710:	483d      	ldr	r0, [pc, #244]	; (8001808 <main+0x158>)
 8001712:	f003 ff1d 	bl	8005550 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001716:	2108      	movs	r1, #8
 8001718:	483b      	ldr	r0, [pc, #236]	; (8001808 <main+0x158>)
 800171a:	f003 ff19 	bl	8005550 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 800171e:	210c      	movs	r1, #12
 8001720:	4839      	ldr	r0, [pc, #228]	; (8001808 <main+0x158>)
 8001722:	f003 ff15 	bl	8005550 <HAL_TIM_IC_Start_IT>
	//wait for connection tx-rx
	while (diff1 < 990 || diff2 < 990 || diff3 < 990 || diff4 < 990) {
 8001726:	bf00      	nop
 8001728:	4b38      	ldr	r3, [pc, #224]	; (800180c <main+0x15c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f240 32dd 	movw	r2, #989	; 0x3dd
 8001730:	4293      	cmp	r3, r2
 8001732:	d9f9      	bls.n	8001728 <main+0x78>
 8001734:	4b36      	ldr	r3, [pc, #216]	; (8001810 <main+0x160>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f240 32dd 	movw	r2, #989	; 0x3dd
 800173c:	4293      	cmp	r3, r2
 800173e:	d9f3      	bls.n	8001728 <main+0x78>
 8001740:	4b34      	ldr	r3, [pc, #208]	; (8001814 <main+0x164>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f240 32dd 	movw	r2, #989	; 0x3dd
 8001748:	4293      	cmp	r3, r2
 800174a:	d9ed      	bls.n	8001728 <main+0x78>
 800174c:	4b32      	ldr	r3, [pc, #200]	; (8001818 <main+0x168>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f240 32dd 	movw	r2, #989	; 0x3dd
 8001754:	4293      	cmp	r3, r2
 8001756:	d9e7      	bls.n	8001728 <main+0x78>
	}
	while (diff3 < 990 || diff3 > 1050) {
 8001758:	bf00      	nop
 800175a:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <main+0x164>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f240 32dd 	movw	r2, #989	; 0x3dd
 8001762:	4293      	cmp	r3, r2
 8001764:	d9f9      	bls.n	800175a <main+0xaa>
 8001766:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <main+0x164>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f240 421a 	movw	r2, #1050	; 0x41a
 800176e:	4293      	cmp	r3, r2
 8001770:	d8f3      	bhi.n	800175a <main+0xaa>
	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001772:	2108      	movs	r1, #8
 8001774:	4829      	ldr	r0, [pc, #164]	; (800181c <main+0x16c>)
 8001776:	f003 fdf9 	bl	800536c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800177a:	210c      	movs	r1, #12
 800177c:	4827      	ldr	r0, [pc, #156]	; (800181c <main+0x16c>)
 800177e:	f003 fdf5 	bl	800536c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001782:	2108      	movs	r1, #8
 8001784:	4826      	ldr	r0, [pc, #152]	; (8001820 <main+0x170>)
 8001786:	f003 fdf1 	bl	800536c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800178a:	210c      	movs	r1, #12
 800178c:	4824      	ldr	r0, [pc, #144]	; (8001820 <main+0x170>)
 800178e:	f003 fded 	bl	800536c <HAL_TIM_PWM_Start>

	//------------------------------------------------------
	//esc calibration
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 2000);	//fl
 8001792:	4b22      	ldr	r3, [pc, #136]	; (800181c <main+0x16c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800179a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 2000);	//fr
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <main+0x16c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 2000);	//rr
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <main+0x170>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80017ae:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 2000); //rl
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <main+0x170>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_Delay(50);
 80017ba:	2032      	movs	r0, #50	; 0x32
 80017bc:	f001 fe40 	bl	8003440 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);	//fl
 80017c0:	4b16      	ldr	r3, [pc, #88]	; (800181c <main+0x16c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017c8:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1000);	//fr
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <main+0x16c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017d2:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 1000);	//rr
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <main+0x170>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017dc:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 1000); //rl
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <main+0x170>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_Delay(300);
 80017e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80017ec:	f001 fe28 	bl	8003440 <HAL_Delay>
	//------------------------------------------------------

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80017f0:	2201      	movs	r2, #1
 80017f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f6:	4803      	ldr	r0, [pc, #12]	; (8001804 <main+0x154>)
 80017f8:	f002 f8d8 	bl	80039ac <HAL_GPIO_WritePin>

	for (int i = 0; i < 20; i++) {
 80017fc:	2300      	movs	r3, #0
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	e01b      	b.n	800183a <main+0x18a>
 8001802:	bf00      	nop
 8001804:	40011000 	.word	0x40011000
 8001808:	20000288 	.word	0x20000288
 800180c:	20000380 	.word	0x20000380
 8001810:	20000384 	.word	0x20000384
 8001814:	20000388 	.word	0x20000388
 8001818:	2000038c 	.word	0x2000038c
 800181c:	200002d0 	.word	0x200002d0
 8001820:	20000318 	.word	0x20000318
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001828:	48cd      	ldr	r0, [pc, #820]	; (8001b60 <main+0x4b0>)
 800182a:	f002 f8d7 	bl	80039dc <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800182e:	2064      	movs	r0, #100	; 0x64
 8001830:	f001 fe06 	bl	8003440 <HAL_Delay>
	for (int i = 0; i < 20; i++) {
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	3301      	adds	r3, #1
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	2b13      	cmp	r3, #19
 800183e:	ddf1      	ble.n	8001824 <main+0x174>
	}

	looptimer = HAL_GetTick();
 8001840:	f001 fdf4 	bl	800342c <HAL_GetTick>
 8001844:	4603      	mov	r3, r0
 8001846:	4ac7      	ldr	r2, [pc, #796]	; (8001b64 <main+0x4b4>)
 8001848:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		MPU6050_Read(); //ok
 800184a:	f7ff fe61 	bl	8001510 <MPU6050_Read>
		// Apply low-pass filter (10Hz cutoff frequency)
		angular_motions[roll] = 0.7 * angular_motions[roll]
 800184e:	4bc6      	ldr	r3, [pc, #792]	; (8001b68 <main+0x4b8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fde8 	bl	8000428 <__aeabi_f2d>
 8001858:	a3b7      	add	r3, pc, #732	; (adr r3, 8001b38 <main+0x488>)
 800185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185e:	f7fe fe3b 	bl	80004d8 <__aeabi_dmul>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4614      	mov	r4, r2
 8001868:	461d      	mov	r5, r3
				+ ((float) Gyro_X_RAW * 0.3 / 65.5); //Gyro pid input is deg/sec.
 800186a:	4bc0      	ldr	r3, [pc, #768]	; (8001b6c <main+0x4bc>)
 800186c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fa13 	bl	8000c9c <__aeabi_i2f>
 8001876:	4603      	mov	r3, r0
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fdd5 	bl	8000428 <__aeabi_f2d>
 800187e:	a3b0      	add	r3, pc, #704	; (adr r3, 8001b40 <main+0x490>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fe28 	bl	80004d8 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	a3ad      	add	r3, pc, #692	; (adr r3, 8001b48 <main+0x498>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7fe ff49 	bl	800072c <__aeabi_ddiv>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4620      	mov	r0, r4
 80018a0:	4629      	mov	r1, r5
 80018a2:	f7fe fc63 	bl	800016c <__adddf3>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	f7ff f8eb 	bl	8000a88 <__aeabi_d2f>
 80018b2:	4603      	mov	r3, r0
		angular_motions[roll] = 0.7 * angular_motions[roll]
 80018b4:	4aac      	ldr	r2, [pc, #688]	; (8001b68 <main+0x4b8>)
 80018b6:	6013      	str	r3, [r2, #0]
		angular_motions[pitch] = 0.7 * angular_motions[pitch]
 80018b8:	4bab      	ldr	r3, [pc, #684]	; (8001b68 <main+0x4b8>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fdb3 	bl	8000428 <__aeabi_f2d>
 80018c2:	a39d      	add	r3, pc, #628	; (adr r3, 8001b38 <main+0x488>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	f7fe fe06 	bl	80004d8 <__aeabi_dmul>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4614      	mov	r4, r2
 80018d2:	461d      	mov	r5, r3
				+ ((float) Gyro_Y_RAW * 0.3 / 65.5);
 80018d4:	4ba6      	ldr	r3, [pc, #664]	; (8001b70 <main+0x4c0>)
 80018d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f9de 	bl	8000c9c <__aeabi_i2f>
 80018e0:	4603      	mov	r3, r0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fda0 	bl	8000428 <__aeabi_f2d>
 80018e8:	a395      	add	r3, pc, #596	; (adr r3, 8001b40 <main+0x490>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	f7fe fdf3 	bl	80004d8 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	a393      	add	r3, pc, #588	; (adr r3, 8001b48 <main+0x498>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	f7fe ff14 	bl	800072c <__aeabi_ddiv>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4620      	mov	r0, r4
 800190a:	4629      	mov	r1, r5
 800190c:	f7fe fc2e 	bl	800016c <__adddf3>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	f7ff f8b6 	bl	8000a88 <__aeabi_d2f>
 800191c:	4603      	mov	r3, r0
		angular_motions[pitch] = 0.7 * angular_motions[pitch]
 800191e:	4a92      	ldr	r2, [pc, #584]	; (8001b68 <main+0x4b8>)
 8001920:	6053      	str	r3, [r2, #4]
		angular_motions[yaw] = 0.7 * angular_motions[yaw]
 8001922:	4b91      	ldr	r3, [pc, #580]	; (8001b68 <main+0x4b8>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fd7e 	bl	8000428 <__aeabi_f2d>
 800192c:	a382      	add	r3, pc, #520	; (adr r3, 8001b38 <main+0x488>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe fdd1 	bl	80004d8 <__aeabi_dmul>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4614      	mov	r4, r2
 800193c:	461d      	mov	r5, r3
				+ ((float) Gyro_Z_RAW * 0.3 / 65.5);
 800193e:	4b8d      	ldr	r3, [pc, #564]	; (8001b74 <main+0x4c4>)
 8001940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff f9a9 	bl	8000c9c <__aeabi_i2f>
 800194a:	4603      	mov	r3, r0
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fd6b 	bl	8000428 <__aeabi_f2d>
 8001952:	a37b      	add	r3, pc, #492	; (adr r3, 8001b40 <main+0x490>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	f7fe fdbe 	bl	80004d8 <__aeabi_dmul>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	a378      	add	r3, pc, #480	; (adr r3, 8001b48 <main+0x498>)
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	f7fe fedf 	bl	800072c <__aeabi_ddiv>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4620      	mov	r0, r4
 8001974:	4629      	mov	r1, r5
 8001976:	f7fe fbf9 	bl	800016c <__adddf3>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	f7ff f881 	bl	8000a88 <__aeabi_d2f>
 8001986:	4603      	mov	r3, r0
		angular_motions[yaw] = 0.7 * angular_motions[yaw]
 8001988:	4a77      	ldr	r2, [pc, #476]	; (8001b68 <main+0x4b8>)
 800198a:	6093      	str	r3, [r2, #8]

		// Angle calculation using integration
		gyro_angle[roll] += (float) (Gyro_X_RAW / (250 * 65.5));
 800198c:	4b7a      	ldr	r3, [pc, #488]	; (8001b78 <main+0x4c8>)
 800198e:	681c      	ldr	r4, [r3, #0]
 8001990:	4b76      	ldr	r3, [pc, #472]	; (8001b6c <main+0x4bc>)
 8001992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fd34 	bl	8000404 <__aeabi_i2d>
 800199c:	a36c      	add	r3, pc, #432	; (adr r3, 8001b50 <main+0x4a0>)
 800199e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a2:	f7fe fec3 	bl	800072c <__aeabi_ddiv>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	f7ff f86b 	bl	8000a88 <__aeabi_d2f>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4619      	mov	r1, r3
 80019b6:	4620      	mov	r0, r4
 80019b8:	f7ff f8bc 	bl	8000b34 <__addsf3>
 80019bc:	4603      	mov	r3, r0
 80019be:	461a      	mov	r2, r3
 80019c0:	4b6d      	ldr	r3, [pc, #436]	; (8001b78 <main+0x4c8>)
 80019c2:	601a      	str	r2, [r3, #0]
		gyro_angle[pitch] += (float) (Gyro_Y_RAW / (250 * 65.5));
 80019c4:	4b6c      	ldr	r3, [pc, #432]	; (8001b78 <main+0x4c8>)
 80019c6:	685c      	ldr	r4, [r3, #4]
 80019c8:	4b69      	ldr	r3, [pc, #420]	; (8001b70 <main+0x4c0>)
 80019ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fd18 	bl	8000404 <__aeabi_i2d>
 80019d4:	a35e      	add	r3, pc, #376	; (adr r3, 8001b50 <main+0x4a0>)
 80019d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019da:	f7fe fea7 	bl	800072c <__aeabi_ddiv>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7ff f84f 	bl	8000a88 <__aeabi_d2f>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4619      	mov	r1, r3
 80019ee:	4620      	mov	r0, r4
 80019f0:	f7ff f8a0 	bl	8000b34 <__addsf3>
 80019f4:	4603      	mov	r3, r0
 80019f6:	461a      	mov	r2, r3
 80019f8:	4b5f      	ldr	r3, [pc, #380]	; (8001b78 <main+0x4c8>)
 80019fa:	605a      	str	r2, [r3, #4]

		// Transfer roll to pitch if IMU has yawed
		gyro_angle[pitch] -= gyro_angle[roll]
 80019fc:	4b5e      	ldr	r3, [pc, #376]	; (8001b78 <main+0x4c8>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fd11 	bl	8000428 <__aeabi_f2d>
 8001a06:	4604      	mov	r4, r0
 8001a08:	460d      	mov	r5, r1
 8001a0a:	4b5b      	ldr	r3, [pc, #364]	; (8001b78 <main+0x4c8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fd0a 	bl	8000428 <__aeabi_f2d>
 8001a14:	4680      	mov	r8, r0
 8001a16:	4689      	mov	r9, r1
				* sin((float) Gyro_Z_RAW * (M_PI / (250 * 65.5 * 180)));
 8001a18:	4b56      	ldr	r3, [pc, #344]	; (8001b74 <main+0x4c4>)
 8001a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff f93c 	bl	8000c9c <__aeabi_i2f>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fcfe 	bl	8000428 <__aeabi_f2d>
 8001a2c:	a34a      	add	r3, pc, #296	; (adr r3, 8001b58 <main+0x4a8>)
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	f7fe fd51 	bl	80004d8 <__aeabi_dmul>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f007 fb73 	bl	8009128 <sin>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4640      	mov	r0, r8
 8001a48:	4649      	mov	r1, r9
 8001a4a:	f7fe fd45 	bl	80004d8 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
		gyro_angle[pitch] -= gyro_angle[roll]
 8001a52:	4620      	mov	r0, r4
 8001a54:	4629      	mov	r1, r5
 8001a56:	f7fe fb87 	bl	8000168 <__aeabi_dsub>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	f7ff f811 	bl	8000a88 <__aeabi_d2f>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4a43      	ldr	r2, [pc, #268]	; (8001b78 <main+0x4c8>)
 8001a6a:	6053      	str	r3, [r2, #4]
		gyro_angle[roll] += gyro_angle[pitch]
 8001a6c:	4b42      	ldr	r3, [pc, #264]	; (8001b78 <main+0x4c8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fcd9 	bl	8000428 <__aeabi_f2d>
 8001a76:	4604      	mov	r4, r0
 8001a78:	460d      	mov	r5, r1
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <main+0x4c8>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fcd2 	bl	8000428 <__aeabi_f2d>
 8001a84:	4680      	mov	r8, r0
 8001a86:	4689      	mov	r9, r1
				* sin((float) Gyro_Z_RAW * (M_PI / (250 * 65.5 * 180)));
 8001a88:	4b3a      	ldr	r3, [pc, #232]	; (8001b74 <main+0x4c4>)
 8001a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff f904 	bl	8000c9c <__aeabi_i2f>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fcc6 	bl	8000428 <__aeabi_f2d>
 8001a9c:	a32e      	add	r3, pc, #184	; (adr r3, 8001b58 <main+0x4a8>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7fe fd19 	bl	80004d8 <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f007 fb3b 	bl	8009128 <sin>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4640      	mov	r0, r8
 8001ab8:	4649      	mov	r1, r9
 8001aba:	f7fe fd0d 	bl	80004d8 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
		gyro_angle[roll] += gyro_angle[pitch]
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	f7fe fb51 	bl	800016c <__adddf3>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f7fe ffd9 	bl	8000a88 <__aeabi_d2f>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4a27      	ldr	r2, [pc, #156]	; (8001b78 <main+0x4c8>)
 8001ada:	6013      	str	r3, [r2, #0]

		//Accelerometer angle calculations
		//acc_total_vector = sqrt(pow(Accel_X_RAW, 2) + pow(Accel_Y_RAW, 2) + pow(Accel_Z_RAW, 2));
		acc_total_vector = sqrt(pow(os_Ax, 2) + pow(os_Ay, 2) + pow(os_Az, 2));
 8001adc:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <main+0x4cc>)
 8001ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fc8e 	bl	8000404 <__aeabi_i2d>
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001af0:	f007 fb88 	bl	8009204 <pow>
 8001af4:	4604      	mov	r4, r0
 8001af6:	460d      	mov	r5, r1
 8001af8:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <main+0x4d0>)
 8001afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fc80 	bl	8000404 <__aeabi_i2d>
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b0c:	f007 fb7a 	bl	8009204 <pow>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4620      	mov	r0, r4
 8001b16:	4629      	mov	r1, r5
 8001b18:	f7fe fb28 	bl	800016c <__adddf3>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4614      	mov	r4, r2
 8001b22:	461d      	mov	r5, r3
 8001b24:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <main+0x4d4>)
 8001b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fc6a 	bl	8000404 <__aeabi_i2d>
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	e028      	b.n	8001b88 <main+0x4d8>
 8001b36:	bf00      	nop
 8001b38:	66666666 	.word	0x66666666
 8001b3c:	3fe66666 	.word	0x3fe66666
 8001b40:	33333333 	.word	0x33333333
 8001b44:	3fd33333 	.word	0x3fd33333
 8001b48:	00000000 	.word	0x00000000
 8001b4c:	40506000 	.word	0x40506000
 8001b50:	00000000 	.word	0x00000000
 8001b54:	40cffb80 	.word	0x40cffb80
 8001b58:	62c8816b 	.word	0x62c8816b
 8001b5c:	3eb1e1ca 	.word	0x3eb1e1ca
 8001b60:	40011000 	.word	0x40011000
 8001b64:	20000438 	.word	0x20000438
 8001b68:	20000408 	.word	0x20000408
 8001b6c:	2000039a 	.word	0x2000039a
 8001b70:	2000039c 	.word	0x2000039c
 8001b74:	2000039e 	.word	0x2000039e
 8001b78:	200003ec 	.word	0x200003ec
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000002 	.word	0x20000002
 8001b84:	20000004 	.word	0x20000004
 8001b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b8c:	f007 fb3a 	bl	8009204 <pow>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4620      	mov	r0, r4
 8001b96:	4629      	mov	r1, r5
 8001b98:	f7fe fae8 	bl	800016c <__adddf3>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f007 fb96 	bl	80092d4 <sqrt>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f7fe ff42 	bl	8000a38 <__aeabi_d2iz>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4ab8      	ldr	r2, [pc, #736]	; (8001e98 <main+0x7e8>)
 8001bb8:	6013      	str	r3, [r2, #0]
		if (Accel_X_RAW > acc_total_vector)
 8001bba:	4bb8      	ldr	r3, [pc, #736]	; (8001e9c <main+0x7ec>)
 8001bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4bb5      	ldr	r3, [pc, #724]	; (8001e98 <main+0x7e8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	dd04      	ble.n	8001bd4 <main+0x524>
			Accel_X_RAW = acc_total_vector; //Limit the maximum accelerometer value.
 8001bca:	4bb3      	ldr	r3, [pc, #716]	; (8001e98 <main+0x7e8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	4bb2      	ldr	r3, [pc, #712]	; (8001e9c <main+0x7ec>)
 8001bd2:	801a      	strh	r2, [r3, #0]
		if (Accel_X_RAW < -acc_total_vector)
 8001bd4:	4bb1      	ldr	r3, [pc, #708]	; (8001e9c <main+0x7ec>)
 8001bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4bae      	ldr	r3, [pc, #696]	; (8001e98 <main+0x7e8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	425b      	negs	r3, r3
 8001be2:	429a      	cmp	r2, r3
 8001be4:	da07      	bge.n	8001bf6 <main+0x546>
			Accel_X_RAW = -acc_total_vector;
 8001be6:	4bac      	ldr	r3, [pc, #688]	; (8001e98 <main+0x7e8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	425b      	negs	r3, r3
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	4baa      	ldr	r3, [pc, #680]	; (8001e9c <main+0x7ec>)
 8001bf4:	801a      	strh	r2, [r3, #0]
		if (Accel_Y_RAW > acc_total_vector)
 8001bf6:	4baa      	ldr	r3, [pc, #680]	; (8001ea0 <main+0x7f0>)
 8001bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4ba6      	ldr	r3, [pc, #664]	; (8001e98 <main+0x7e8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	dd04      	ble.n	8001c10 <main+0x560>
			Accel_Y_RAW = acc_total_vector; //Limit the maximum accelerometer value.
 8001c06:	4ba4      	ldr	r3, [pc, #656]	; (8001e98 <main+0x7e8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	b21a      	sxth	r2, r3
 8001c0c:	4ba4      	ldr	r3, [pc, #656]	; (8001ea0 <main+0x7f0>)
 8001c0e:	801a      	strh	r2, [r3, #0]
		if (Accel_Y_RAW < -acc_total_vector)
 8001c10:	4ba3      	ldr	r3, [pc, #652]	; (8001ea0 <main+0x7f0>)
 8001c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b9f      	ldr	r3, [pc, #636]	; (8001e98 <main+0x7e8>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	425b      	negs	r3, r3
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	da07      	bge.n	8001c32 <main+0x582>
			Accel_Y_RAW = -acc_total_vector;
 8001c22:	4b9d      	ldr	r3, [pc, #628]	; (8001e98 <main+0x7e8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	425b      	negs	r3, r3
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	b21a      	sxth	r2, r3
 8001c2e:	4b9c      	ldr	r3, [pc, #624]	; (8001ea0 <main+0x7f0>)
 8001c30:	801a      	strh	r2, [r3, #0]

		acc_angle[roll] = asin((float) Accel_X_RAW / acc_total_vector)
 8001c32:	4b9a      	ldr	r3, [pc, #616]	; (8001e9c <main+0x7ec>)
 8001c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff f82f 	bl	8000c9c <__aeabi_i2f>
 8001c3e:	4604      	mov	r4, r0
 8001c40:	4b95      	ldr	r3, [pc, #596]	; (8001e98 <main+0x7e8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff f829 	bl	8000c9c <__aeabi_i2f>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4620      	mov	r0, r4
 8001c50:	f7ff f92c 	bl	8000eac <__aeabi_fdiv>
 8001c54:	4603      	mov	r3, r0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fbe6 	bl	8000428 <__aeabi_f2d>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	f007 faa6 	bl	80091b4 <asin>
				* (-180 / M_PI); //Calculate the pitch angle.
 8001c68:	a37d      	add	r3, pc, #500	; (adr r3, 8001e60 <main+0x7b0>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fc33 	bl	80004d8 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f7fe ff05 	bl	8000a88 <__aeabi_d2f>
 8001c7e:	4603      	mov	r3, r0
		acc_angle[roll] = asin((float) Accel_X_RAW / acc_total_vector)
 8001c80:	4a88      	ldr	r2, [pc, #544]	; (8001ea4 <main+0x7f4>)
 8001c82:	6013      	str	r3, [r2, #0]
		acc_angle[pitch] = asin((float) Accel_Y_RAW / acc_total_vector)
 8001c84:	4b86      	ldr	r3, [pc, #536]	; (8001ea0 <main+0x7f0>)
 8001c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f806 	bl	8000c9c <__aeabi_i2f>
 8001c90:	4604      	mov	r4, r0
 8001c92:	4b81      	ldr	r3, [pc, #516]	; (8001e98 <main+0x7e8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff f800 	bl	8000c9c <__aeabi_i2f>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f7ff f903 	bl	8000eac <__aeabi_fdiv>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fbbd 	bl	8000428 <__aeabi_f2d>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f007 fa7d 	bl	80091b4 <asin>
				* (180 / M_PI); //Calculate the roll angle.
 8001cba:	a36b      	add	r3, pc, #428	; (adr r3, 8001e68 <main+0x7b8>)
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	f7fe fc0a 	bl	80004d8 <__aeabi_dmul>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f7fe fedc 	bl	8000a88 <__aeabi_d2f>
 8001cd0:	4603      	mov	r3, r0
		acc_angle[pitch] = asin((float) Accel_Y_RAW / acc_total_vector)
 8001cd2:	4a74      	ldr	r2, [pc, #464]	; (8001ea4 <main+0x7f4>)
 8001cd4:	6053      	str	r3, [r2, #4]

		gyro_angle[roll] = gyro_angle[roll] * 0.995 + acc_angle[roll] * 0.005;
 8001cd6:	4b74      	ldr	r3, [pc, #464]	; (8001ea8 <main+0x7f8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fba4 	bl	8000428 <__aeabi_f2d>
 8001ce0:	a363      	add	r3, pc, #396	; (adr r3, 8001e70 <main+0x7c0>)
 8001ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce6:	f7fe fbf7 	bl	80004d8 <__aeabi_dmul>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4614      	mov	r4, r2
 8001cf0:	461d      	mov	r5, r3
 8001cf2:	4b6c      	ldr	r3, [pc, #432]	; (8001ea4 <main+0x7f4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fb96 	bl	8000428 <__aeabi_f2d>
 8001cfc:	a35e      	add	r3, pc, #376	; (adr r3, 8001e78 <main+0x7c8>)
 8001cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d02:	f7fe fbe9 	bl	80004d8 <__aeabi_dmul>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	4629      	mov	r1, r5
 8001d0e:	f7fe fa2d 	bl	800016c <__adddf3>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f7fe feb5 	bl	8000a88 <__aeabi_d2f>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4a61      	ldr	r2, [pc, #388]	; (8001ea8 <main+0x7f8>)
 8001d22:	6013      	str	r3, [r2, #0]
		gyro_angle[pitch] = gyro_angle[pitch] * 0.995
 8001d24:	4b60      	ldr	r3, [pc, #384]	; (8001ea8 <main+0x7f8>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fb7d 	bl	8000428 <__aeabi_f2d>
 8001d2e:	a350      	add	r3, pc, #320	; (adr r3, 8001e70 <main+0x7c0>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fbd0 	bl	80004d8 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4614      	mov	r4, r2
 8001d3e:	461d      	mov	r5, r3
				+ acc_angle[pitch] * 0.005;
 8001d40:	4b58      	ldr	r3, [pc, #352]	; (8001ea4 <main+0x7f4>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fb6f 	bl	8000428 <__aeabi_f2d>
 8001d4a:	a34b      	add	r3, pc, #300	; (adr r3, 8001e78 <main+0x7c8>)
 8001d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d50:	f7fe fbc2 	bl	80004d8 <__aeabi_dmul>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4620      	mov	r0, r4
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	f7fe fa06 	bl	800016c <__adddf3>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	f7fe fe8e 	bl	8000a88 <__aeabi_d2f>
 8001d6c:	4603      	mov	r3, r0
		gyro_angle[pitch] = gyro_angle[pitch] * 0.995
 8001d6e:	4a4e      	ldr	r2, [pc, #312]	; (8001ea8 <main+0x7f8>)
 8001d70:	6053      	str	r3, [r2, #4]

		// To dampen the pitch and roll angles a complementary filter is used
		measures[roll] = measures[roll] * 0.8 + gyro_angle[roll] * 0.2;
 8001d72:	4b4e      	ldr	r3, [pc, #312]	; (8001eac <main+0x7fc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fb56 	bl	8000428 <__aeabi_f2d>
 8001d7c:	a340      	add	r3, pc, #256	; (adr r3, 8001e80 <main+0x7d0>)
 8001d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d82:	f7fe fba9 	bl	80004d8 <__aeabi_dmul>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4614      	mov	r4, r2
 8001d8c:	461d      	mov	r5, r3
 8001d8e:	4b46      	ldr	r3, [pc, #280]	; (8001ea8 <main+0x7f8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fb48 	bl	8000428 <__aeabi_f2d>
 8001d98:	a33b      	add	r3, pc, #236	; (adr r3, 8001e88 <main+0x7d8>)
 8001d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9e:	f7fe fb9b 	bl	80004d8 <__aeabi_dmul>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4620      	mov	r0, r4
 8001da8:	4629      	mov	r1, r5
 8001daa:	f7fe f9df 	bl	800016c <__adddf3>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	f7fe fe67 	bl	8000a88 <__aeabi_d2f>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4a3b      	ldr	r2, [pc, #236]	; (8001eac <main+0x7fc>)
 8001dbe:	6013      	str	r3, [r2, #0]
		measures[pitch] = measures[pitch] * 0.8 + gyro_angle[pitch] * 0.2;
 8001dc0:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <main+0x7fc>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fb2f 	bl	8000428 <__aeabi_f2d>
 8001dca:	a32d      	add	r3, pc, #180	; (adr r3, 8001e80 <main+0x7d0>)
 8001dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd0:	f7fe fb82 	bl	80004d8 <__aeabi_dmul>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4614      	mov	r4, r2
 8001dda:	461d      	mov	r5, r3
 8001ddc:	4b32      	ldr	r3, [pc, #200]	; (8001ea8 <main+0x7f8>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fb21 	bl	8000428 <__aeabi_f2d>
 8001de6:	a328      	add	r3, pc, #160	; (adr r3, 8001e88 <main+0x7d8>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	f7fe fb74 	bl	80004d8 <__aeabi_dmul>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4620      	mov	r0, r4
 8001df6:	4629      	mov	r1, r5
 8001df8:	f7fe f9b8 	bl	800016c <__adddf3>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f7fe fe40 	bl	8000a88 <__aeabi_d2f>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4a28      	ldr	r2, [pc, #160]	; (8001eac <main+0x7fc>)
 8001e0c:	6053      	str	r3, [r2, #4]
		measures[yaw] = Gyro_Z_RAW / 65.5; //Store the angular motion for this axis
 8001e0e:	4b28      	ldr	r3, [pc, #160]	; (8001eb0 <main+0x800>)
 8001e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe faf5 	bl	8000404 <__aeabi_i2d>
 8001e1a:	a31d      	add	r3, pc, #116	; (adr r3, 8001e90 <main+0x7e0>)
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	f7fe fc84 	bl	800072c <__aeabi_ddiv>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f7fe fe2c 	bl	8000a88 <__aeabi_d2f>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4a1e      	ldr	r2, [pc, #120]	; (8001eac <main+0x7fc>)
 8001e34:	6093      	str	r3, [r2, #8]

		pitch_adjust = measures[pitch] * 15;
 8001e36:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <main+0x7fc>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	491e      	ldr	r1, [pc, #120]	; (8001eb4 <main+0x804>)
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe ff81 	bl	8000d44 <__aeabi_fmul>
 8001e42:	4603      	mov	r3, r0
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <main+0x808>)
 8001e48:	601a      	str	r2, [r3, #0]
		roll_adjust = measures[roll] * 15;
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <main+0x7fc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4919      	ldr	r1, [pc, #100]	; (8001eb4 <main+0x804>)
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe ff77 	bl	8000d44 <__aeabi_fmul>
 8001e56:	4603      	mov	r3, r0
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <main+0x80c>)
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	e02f      	b.n	8001ec0 <main+0x810>
 8001e60:	1a63c1f8 	.word	0x1a63c1f8
 8001e64:	c04ca5dc 	.word	0xc04ca5dc
 8001e68:	1a63c1f8 	.word	0x1a63c1f8
 8001e6c:	404ca5dc 	.word	0x404ca5dc
 8001e70:	3d70a3d7 	.word	0x3d70a3d7
 8001e74:	3fefd70a 	.word	0x3fefd70a
 8001e78:	47ae147b 	.word	0x47ae147b
 8001e7c:	3f747ae1 	.word	0x3f747ae1
 8001e80:	9999999a 	.word	0x9999999a
 8001e84:	3fe99999 	.word	0x3fe99999
 8001e88:	9999999a 	.word	0x9999999a
 8001e8c:	3fc99999 	.word	0x3fc99999
 8001e90:	00000000 	.word	0x00000000
 8001e94:	40506000 	.word	0x40506000
 8001e98:	20000404 	.word	0x20000404
 8001e9c:	20000394 	.word	0x20000394
 8001ea0:	20000396 	.word	0x20000396
 8001ea4:	200003f8 	.word	0x200003f8
 8001ea8:	200003ec 	.word	0x200003ec
 8001eac:	20000420 	.word	0x20000420
 8001eb0:	2000039e 	.word	0x2000039e
 8001eb4:	41700000 	.word	0x41700000
 8001eb8:	2000043c 	.word	0x2000043c
 8001ebc:	20000440 	.word	0x20000440

		pitch_angle = measures[pitch];
 8001ec0:	4b89      	ldr	r3, [pc, #548]	; (80020e8 <main+0xa38>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a89      	ldr	r2, [pc, #548]	; (80020ec <main+0xa3c>)
 8001ec6:	6013      	str	r3, [r2, #0]
		roll_angle = measures[roll];
 8001ec8:	4b87      	ldr	r3, [pc, #540]	; (80020e8 <main+0xa38>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a88      	ldr	r2, [pc, #544]	; (80020f0 <main+0xa40>)
 8001ece:	6013      	str	r3, [r2, #0]

		//active
		if (diff3 < 1050 && diff4 < 1050)
 8001ed0:	4b88      	ldr	r3, [pc, #544]	; (80020f4 <main+0xa44>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f240 4219 	movw	r2, #1049	; 0x419
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d808      	bhi.n	8001eee <main+0x83e>
 8001edc:	4b86      	ldr	r3, [pc, #536]	; (80020f8 <main+0xa48>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f240 4219 	movw	r2, #1049	; 0x419
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d802      	bhi.n	8001eee <main+0x83e>
			active = 1;
 8001ee8:	4b84      	ldr	r3, [pc, #528]	; (80020fc <main+0xa4c>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	701a      	strb	r2, [r3, #0]
		if (active == 1 && diff3 < 1050 && diff4 > 1450) {
 8001eee:	4b83      	ldr	r3, [pc, #524]	; (80020fc <main+0xa4c>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d152      	bne.n	8001f9c <main+0x8ec>
 8001ef6:	4b7f      	ldr	r3, [pc, #508]	; (80020f4 <main+0xa44>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f240 4219 	movw	r2, #1049	; 0x419
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d84c      	bhi.n	8001f9c <main+0x8ec>
 8001f02:	4b7d      	ldr	r3, [pc, #500]	; (80020f8 <main+0xa48>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f240 52aa 	movw	r2, #1450	; 0x5aa
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d946      	bls.n	8001f9c <main+0x8ec>
			active = 2;
 8001f0e:	4b7b      	ldr	r3, [pc, #492]	; (80020fc <main+0xa4c>)
 8001f10:	2202      	movs	r2, #2
 8001f12:	701a      	strb	r2, [r3, #0]
			//When this is the first time.
			gyro_angle[roll] = acc_angle[roll];
 8001f14:	4b7a      	ldr	r3, [pc, #488]	; (8002100 <main+0xa50>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a7a      	ldr	r2, [pc, #488]	; (8002104 <main+0xa54>)
 8001f1a:	6013      	str	r3, [r2, #0]
			gyro_angle[pitch] = acc_angle[pitch];
 8001f1c:	4b78      	ldr	r3, [pc, #480]	; (8002100 <main+0xa50>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	4a78      	ldr	r2, [pc, #480]	; (8002104 <main+0xa54>)
 8001f22:	6053      	str	r3, [r2, #4]

			//Reset the PID controllers for a bumpless start.
			errors[0] = 0;
 8001f24:	4b78      	ldr	r3, [pc, #480]	; (8002108 <main+0xa58>)
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
			errors[1] = 0;
 8001f2c:	4b76      	ldr	r3, [pc, #472]	; (8002108 <main+0xa58>)
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	605a      	str	r2, [r3, #4]
			errors[2] = 0;
 8001f34:	4b74      	ldr	r3, [pc, #464]	; (8002108 <main+0xa58>)
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
			delta_err[0] = 0;
 8001f3c:	4b73      	ldr	r3, [pc, #460]	; (800210c <main+0xa5c>)
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
			delta_err[1] = 0;
 8001f44:	4b71      	ldr	r3, [pc, #452]	; (800210c <main+0xa5c>)
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	605a      	str	r2, [r3, #4]
			delta_err[2] = 0;
 8001f4c:	4b6f      	ldr	r3, [pc, #444]	; (800210c <main+0xa5c>)
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
			error_sum[0] = 0;
 8001f54:	4b6e      	ldr	r3, [pc, #440]	; (8002110 <main+0xa60>)
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
			error_sum[1] = 0;
 8001f5c:	4b6c      	ldr	r3, [pc, #432]	; (8002110 <main+0xa60>)
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	605a      	str	r2, [r3, #4]
			error_sum[2] = 0;
 8001f64:	4b6a      	ldr	r3, [pc, #424]	; (8002110 <main+0xa60>)
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
			previous_error[0] = 0;
 8001f6c:	4b69      	ldr	r3, [pc, #420]	; (8002114 <main+0xa64>)
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
			previous_error[1] = 0;
 8001f74:	4b67      	ldr	r3, [pc, #412]	; (8002114 <main+0xa64>)
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	605a      	str	r2, [r3, #4]
			previous_error[2] = 0;
 8001f7c:	4b65      	ldr	r3, [pc, #404]	; (8002114 <main+0xa64>)
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
			pid_roll = 0;
 8001f84:	4b64      	ldr	r3, [pc, #400]	; (8002118 <main+0xa68>)
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
			pid_pitch = 0;
 8001f8c:	4b63      	ldr	r3, [pc, #396]	; (800211c <main+0xa6c>)
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
			pid_yaw = 0;
 8001f94:	4b62      	ldr	r3, [pc, #392]	; (8002120 <main+0xa70>)
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
		}
		//Stopping the motors: throttle low and yaw right.
		if (active == 2 && diff3 < 1050 && diff4 > 1950)
 8001f9c:	4b57      	ldr	r3, [pc, #348]	; (80020fc <main+0xa4c>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d10e      	bne.n	8001fc2 <main+0x912>
 8001fa4:	4b53      	ldr	r3, [pc, #332]	; (80020f4 <main+0xa44>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f240 4219 	movw	r2, #1049	; 0x419
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d808      	bhi.n	8001fc2 <main+0x912>
 8001fb0:	4b51      	ldr	r3, [pc, #324]	; (80020f8 <main+0xa48>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f240 729e 	movw	r2, #1950	; 0x79e
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d902      	bls.n	8001fc2 <main+0x912>
			active = 0;
 8001fbc:	4b4f      	ldr	r3, [pc, #316]	; (80020fc <main+0xa4c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]

		pid_set_points[roll] = 0;
 8001fc2:	4b58      	ldr	r3, [pc, #352]	; (8002124 <main+0xa74>)
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
		pid_set_points[pitch] = 0;
 8001fca:	4b56      	ldr	r3, [pc, #344]	; (8002124 <main+0xa74>)
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	605a      	str	r2, [r3, #4]
		pid_set_points[yaw] = 0;
 8001fd2:	4b54      	ldr	r3, [pc, #336]	; (8002124 <main+0xa74>)
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]

		if (diff1 > 1525)
 8001fda:	4b53      	ldr	r3, [pc, #332]	; (8002128 <main+0xa78>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d90a      	bls.n	8001ffc <main+0x94c>
			pid_set_points[roll] = diff1 - 1525;
 8001fe6:	4b50      	ldr	r3, [pc, #320]	; (8002128 <main+0xa78>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f2a3 53f5 	subw	r3, r3, #1525	; 0x5f5
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fe50 	bl	8000c94 <__aeabi_ui2f>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4a4b      	ldr	r2, [pc, #300]	; (8002124 <main+0xa74>)
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e00f      	b.n	800201c <main+0x96c>
		else if (diff1 < 1490)
 8001ffc:	4b4a      	ldr	r3, [pc, #296]	; (8002128 <main+0xa78>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f240 52d1 	movw	r2, #1489	; 0x5d1
 8002004:	4293      	cmp	r3, r2
 8002006:	d809      	bhi.n	800201c <main+0x96c>
			pid_set_points[roll] = diff1 - 1490;
 8002008:	4b47      	ldr	r3, [pc, #284]	; (8002128 <main+0xa78>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f2a3 53d2 	subw	r3, r3, #1490	; 0x5d2
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fe3f 	bl	8000c94 <__aeabi_ui2f>
 8002016:	4603      	mov	r3, r0
 8002018:	4a42      	ldr	r2, [pc, #264]	; (8002124 <main+0xa74>)
 800201a:	6013      	str	r3, [r2, #0]
		pid_set_points[roll] = (pid_set_points[roll] - roll_adjust) / 3.0;
 800201c:	4b41      	ldr	r3, [pc, #260]	; (8002124 <main+0xa74>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a42      	ldr	r2, [pc, #264]	; (800212c <main+0xa7c>)
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fd82 	bl	8000b30 <__aeabi_fsub>
 800202c:	4603      	mov	r3, r0
 800202e:	4940      	ldr	r1, [pc, #256]	; (8002130 <main+0xa80>)
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe ff3b 	bl	8000eac <__aeabi_fdiv>
 8002036:	4603      	mov	r3, r0
 8002038:	461a      	mov	r2, r3
 800203a:	4b3a      	ldr	r3, [pc, #232]	; (8002124 <main+0xa74>)
 800203c:	601a      	str	r2, [r3, #0]

		if (diff2 > 1525)
 800203e:	4b3d      	ldr	r3, [pc, #244]	; (8002134 <main+0xa84>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8002046:	4293      	cmp	r3, r2
 8002048:	d90a      	bls.n	8002060 <main+0x9b0>
			pid_set_points[pitch] = diff2 - 1525;
 800204a:	4b3a      	ldr	r3, [pc, #232]	; (8002134 <main+0xa84>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f2a3 53f5 	subw	r3, r3, #1525	; 0x5f5
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fe1e 	bl	8000c94 <__aeabi_ui2f>
 8002058:	4603      	mov	r3, r0
 800205a:	4a32      	ldr	r2, [pc, #200]	; (8002124 <main+0xa74>)
 800205c:	6053      	str	r3, [r2, #4]
 800205e:	e00f      	b.n	8002080 <main+0x9d0>
		else if (diff2 < 1490)
 8002060:	4b34      	ldr	r3, [pc, #208]	; (8002134 <main+0xa84>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f240 52d1 	movw	r2, #1489	; 0x5d1
 8002068:	4293      	cmp	r3, r2
 800206a:	d809      	bhi.n	8002080 <main+0x9d0>
			pid_set_points[pitch] = diff2 - 1490;
 800206c:	4b31      	ldr	r3, [pc, #196]	; (8002134 <main+0xa84>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f2a3 53d2 	subw	r3, r3, #1490	; 0x5d2
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fe0d 	bl	8000c94 <__aeabi_ui2f>
 800207a:	4603      	mov	r3, r0
 800207c:	4a29      	ldr	r2, [pc, #164]	; (8002124 <main+0xa74>)
 800207e:	6053      	str	r3, [r2, #4]
		pid_set_points[pitch] = (pid_set_points[pitch] - pitch_adjust) / 3.0;
 8002080:	4b28      	ldr	r3, [pc, #160]	; (8002124 <main+0xa74>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a2c      	ldr	r2, [pc, #176]	; (8002138 <main+0xa88>)
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fd50 	bl	8000b30 <__aeabi_fsub>
 8002090:	4603      	mov	r3, r0
 8002092:	4927      	ldr	r1, [pc, #156]	; (8002130 <main+0xa80>)
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe ff09 	bl	8000eac <__aeabi_fdiv>
 800209a:	4603      	mov	r3, r0
 800209c:	461a      	mov	r2, r3
 800209e:	4b21      	ldr	r3, [pc, #132]	; (8002124 <main+0xa74>)
 80020a0:	605a      	str	r2, [r3, #4]

		if (diff3 > 1150) {  //Do not yaw when turning off the motors.
 80020a2:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <main+0xa44>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f240 427e 	movw	r2, #1150	; 0x47e
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d963      	bls.n	8002176 <main+0xac6>
			if (diff4 > 1550)
 80020ae:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <main+0xa48>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f240 620e 	movw	r2, #1550	; 0x60e
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d942      	bls.n	8002140 <main+0xa90>
				pid_set_points[yaw] = (diff4 - 1550) / 3.0;
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <main+0xa48>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f2a3 630e 	subw	r3, r3, #1550	; 0x60e
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe f98e 	bl	80003e4 <__aeabi_ui2d>
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <main+0xa8c>)
 80020ce:	f7fe fb2d 	bl	800072c <__aeabi_ddiv>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	f7fe fcd5 	bl	8000a88 <__aeabi_d2f>
 80020de:	4603      	mov	r3, r0
 80020e0:	4a10      	ldr	r2, [pc, #64]	; (8002124 <main+0xa74>)
 80020e2:	6093      	str	r3, [r2, #8]
 80020e4:	e047      	b.n	8002176 <main+0xac6>
 80020e6:	bf00      	nop
 80020e8:	20000420 	.word	0x20000420
 80020ec:	20000444 	.word	0x20000444
 80020f0:	20000448 	.word	0x20000448
 80020f4:	20000388 	.word	0x20000388
 80020f8:	2000038c 	.word	0x2000038c
 80020fc:	2000042c 	.word	0x2000042c
 8002100:	200003f8 	.word	0x200003f8
 8002104:	200003ec 	.word	0x200003ec
 8002108:	200003b0 	.word	0x200003b0
 800210c:	200003bc 	.word	0x200003bc
 8002110:	200003c8 	.word	0x200003c8
 8002114:	200003d4 	.word	0x200003d4
 8002118:	200003e0 	.word	0x200003e0
 800211c:	200003e4 	.word	0x200003e4
 8002120:	200003e8 	.word	0x200003e8
 8002124:	200003a4 	.word	0x200003a4
 8002128:	20000380 	.word	0x20000380
 800212c:	20000440 	.word	0x20000440
 8002130:	40400000 	.word	0x40400000
 8002134:	20000384 	.word	0x20000384
 8002138:	2000043c 	.word	0x2000043c
 800213c:	40080000 	.word	0x40080000
			else if (diff4 < 1350)
 8002140:	4b91      	ldr	r3, [pc, #580]	; (8002388 <main+0xcd8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f240 5245 	movw	r2, #1349	; 0x545
 8002148:	4293      	cmp	r3, r2
 800214a:	d814      	bhi.n	8002176 <main+0xac6>
				pid_set_points[yaw] = (diff4 - 1350) / 3.0;
 800214c:	4b8e      	ldr	r3, [pc, #568]	; (8002388 <main+0xcd8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f2a3 5346 	subw	r3, r3, #1350	; 0x546
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f945 	bl	80003e4 <__aeabi_ui2d>
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	4b8b      	ldr	r3, [pc, #556]	; (800238c <main+0xcdc>)
 8002160:	f7fe fae4 	bl	800072c <__aeabi_ddiv>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	f7fe fc8c 	bl	8000a88 <__aeabi_d2f>
 8002170:	4603      	mov	r3, r0
 8002172:	4a87      	ldr	r2, [pc, #540]	; (8002390 <main+0xce0>)
 8002174:	6093      	str	r3, [r2, #8]
		}

		// Calculate current errors
		errors[roll] = angular_motions[roll] - pid_set_points[roll];
 8002176:	4b87      	ldr	r3, [pc, #540]	; (8002394 <main+0xce4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a85      	ldr	r2, [pc, #532]	; (8002390 <main+0xce0>)
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe fcd5 	bl	8000b30 <__aeabi_fsub>
 8002186:	4603      	mov	r3, r0
 8002188:	461a      	mov	r2, r3
 800218a:	4b83      	ldr	r3, [pc, #524]	; (8002398 <main+0xce8>)
 800218c:	601a      	str	r2, [r3, #0]
		errors[pitch] = angular_motions[pitch] - pid_set_points[pitch];
 800218e:	4b81      	ldr	r3, [pc, #516]	; (8002394 <main+0xce4>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4a7f      	ldr	r2, [pc, #508]	; (8002390 <main+0xce0>)
 8002194:	6852      	ldr	r2, [r2, #4]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe fcc9 	bl	8000b30 <__aeabi_fsub>
 800219e:	4603      	mov	r3, r0
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b7d      	ldr	r3, [pc, #500]	; (8002398 <main+0xce8>)
 80021a4:	605a      	str	r2, [r3, #4]
		errors[yaw] = angular_motions[yaw] - pid_set_points[yaw];
 80021a6:	4b7b      	ldr	r3, [pc, #492]	; (8002394 <main+0xce4>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	4a79      	ldr	r2, [pc, #484]	; (8002390 <main+0xce0>)
 80021ac:	6892      	ldr	r2, [r2, #8]
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe fcbd 	bl	8000b30 <__aeabi_fsub>
 80021b6:	4603      	mov	r3, r0
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b77      	ldr	r3, [pc, #476]	; (8002398 <main+0xce8>)
 80021bc:	609a      	str	r2, [r3, #8]

		// Calculate sum of errors : Integral coefficients
		error_sum[roll] += errors[roll];
 80021be:	4b77      	ldr	r3, [pc, #476]	; (800239c <main+0xcec>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a75      	ldr	r2, [pc, #468]	; (8002398 <main+0xce8>)
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe fcb3 	bl	8000b34 <__addsf3>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b72      	ldr	r3, [pc, #456]	; (800239c <main+0xcec>)
 80021d4:	601a      	str	r2, [r3, #0]
		error_sum[pitch] += errors[pitch];
 80021d6:	4b71      	ldr	r3, [pc, #452]	; (800239c <main+0xcec>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4a6f      	ldr	r2, [pc, #444]	; (8002398 <main+0xce8>)
 80021dc:	6852      	ldr	r2, [r2, #4]
 80021de:	4611      	mov	r1, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe fca7 	bl	8000b34 <__addsf3>
 80021e6:	4603      	mov	r3, r0
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b6c      	ldr	r3, [pc, #432]	; (800239c <main+0xcec>)
 80021ec:	605a      	str	r2, [r3, #4]
		error_sum[yaw] += errors[yaw];
 80021ee:	4b6b      	ldr	r3, [pc, #428]	; (800239c <main+0xcec>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	4a69      	ldr	r2, [pc, #420]	; (8002398 <main+0xce8>)
 80021f4:	6892      	ldr	r2, [r2, #8]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fc9b 	bl	8000b34 <__addsf3>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	4b66      	ldr	r3, [pc, #408]	; (800239c <main+0xcec>)
 8002204:	609a      	str	r2, [r3, #8]

		// Keep values in acceptable range
		if (error_sum[roll] < (-180 / Ki[roll]))
 8002206:	4b65      	ldr	r3, [pc, #404]	; (800239c <main+0xcec>)
 8002208:	681c      	ldr	r4, [r3, #0]
 800220a:	4b65      	ldr	r3, [pc, #404]	; (80023a0 <main+0xcf0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4619      	mov	r1, r3
 8002210:	4864      	ldr	r0, [pc, #400]	; (80023a4 <main+0xcf4>)
 8002212:	f7fe fe4b 	bl	8000eac <__aeabi_fdiv>
 8002216:	4603      	mov	r3, r0
 8002218:	4619      	mov	r1, r3
 800221a:	4620      	mov	r0, r4
 800221c:	f7fe ff30 	bl	8001080 <__aeabi_fcmplt>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <main+0xb8a>
			error_sum[roll] = -180 / Ki[roll];
 8002226:	4b5e      	ldr	r3, [pc, #376]	; (80023a0 <main+0xcf0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4619      	mov	r1, r3
 800222c:	485d      	ldr	r0, [pc, #372]	; (80023a4 <main+0xcf4>)
 800222e:	f7fe fe3d 	bl	8000eac <__aeabi_fdiv>
 8002232:	4603      	mov	r3, r0
 8002234:	461a      	mov	r2, r3
 8002236:	4b59      	ldr	r3, [pc, #356]	; (800239c <main+0xcec>)
 8002238:	601a      	str	r2, [r3, #0]
		if (error_sum[roll] > 180 / Ki[roll])
 800223a:	4b58      	ldr	r3, [pc, #352]	; (800239c <main+0xcec>)
 800223c:	681c      	ldr	r4, [r3, #0]
 800223e:	4b58      	ldr	r3, [pc, #352]	; (80023a0 <main+0xcf0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4619      	mov	r1, r3
 8002244:	4858      	ldr	r0, [pc, #352]	; (80023a8 <main+0xcf8>)
 8002246:	f7fe fe31 	bl	8000eac <__aeabi_fdiv>
 800224a:	4603      	mov	r3, r0
 800224c:	4619      	mov	r1, r3
 800224e:	4620      	mov	r0, r4
 8002250:	f7fe ff34 	bl	80010bc <__aeabi_fcmpgt>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d009      	beq.n	800226e <main+0xbbe>
			error_sum[roll] = 180 / Ki[roll];
 800225a:	4b51      	ldr	r3, [pc, #324]	; (80023a0 <main+0xcf0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4619      	mov	r1, r3
 8002260:	4851      	ldr	r0, [pc, #324]	; (80023a8 <main+0xcf8>)
 8002262:	f7fe fe23 	bl	8000eac <__aeabi_fdiv>
 8002266:	4603      	mov	r3, r0
 8002268:	461a      	mov	r2, r3
 800226a:	4b4c      	ldr	r3, [pc, #304]	; (800239c <main+0xcec>)
 800226c:	601a      	str	r2, [r3, #0]
		if (error_sum[pitch] < (-180 / Ki[pitch]))
 800226e:	4b4b      	ldr	r3, [pc, #300]	; (800239c <main+0xcec>)
 8002270:	685c      	ldr	r4, [r3, #4]
 8002272:	4b4b      	ldr	r3, [pc, #300]	; (80023a0 <main+0xcf0>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4619      	mov	r1, r3
 8002278:	484a      	ldr	r0, [pc, #296]	; (80023a4 <main+0xcf4>)
 800227a:	f7fe fe17 	bl	8000eac <__aeabi_fdiv>
 800227e:	4603      	mov	r3, r0
 8002280:	4619      	mov	r1, r3
 8002282:	4620      	mov	r0, r4
 8002284:	f7fe fefc 	bl	8001080 <__aeabi_fcmplt>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d009      	beq.n	80022a2 <main+0xbf2>
			error_sum[pitch] = -180 / Ki[pitch];
 800228e:	4b44      	ldr	r3, [pc, #272]	; (80023a0 <main+0xcf0>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	4619      	mov	r1, r3
 8002294:	4843      	ldr	r0, [pc, #268]	; (80023a4 <main+0xcf4>)
 8002296:	f7fe fe09 	bl	8000eac <__aeabi_fdiv>
 800229a:	4603      	mov	r3, r0
 800229c:	461a      	mov	r2, r3
 800229e:	4b3f      	ldr	r3, [pc, #252]	; (800239c <main+0xcec>)
 80022a0:	605a      	str	r2, [r3, #4]
		if (error_sum[pitch] > 180 / Ki[pitch])
 80022a2:	4b3e      	ldr	r3, [pc, #248]	; (800239c <main+0xcec>)
 80022a4:	685c      	ldr	r4, [r3, #4]
 80022a6:	4b3e      	ldr	r3, [pc, #248]	; (80023a0 <main+0xcf0>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	4619      	mov	r1, r3
 80022ac:	483e      	ldr	r0, [pc, #248]	; (80023a8 <main+0xcf8>)
 80022ae:	f7fe fdfd 	bl	8000eac <__aeabi_fdiv>
 80022b2:	4603      	mov	r3, r0
 80022b4:	4619      	mov	r1, r3
 80022b6:	4620      	mov	r0, r4
 80022b8:	f7fe ff00 	bl	80010bc <__aeabi_fcmpgt>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <main+0xc26>
			error_sum[pitch] = 180 / Ki[pitch];
 80022c2:	4b37      	ldr	r3, [pc, #220]	; (80023a0 <main+0xcf0>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	4619      	mov	r1, r3
 80022c8:	4837      	ldr	r0, [pc, #220]	; (80023a8 <main+0xcf8>)
 80022ca:	f7fe fdef 	bl	8000eac <__aeabi_fdiv>
 80022ce:	4603      	mov	r3, r0
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b32      	ldr	r3, [pc, #200]	; (800239c <main+0xcec>)
 80022d4:	605a      	str	r2, [r3, #4]
		if (error_sum[yaw] < (-180 / Ki[yaw]))
 80022d6:	4b31      	ldr	r3, [pc, #196]	; (800239c <main+0xcec>)
 80022d8:	689c      	ldr	r4, [r3, #8]
 80022da:	4b31      	ldr	r3, [pc, #196]	; (80023a0 <main+0xcf0>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	4619      	mov	r1, r3
 80022e0:	4830      	ldr	r0, [pc, #192]	; (80023a4 <main+0xcf4>)
 80022e2:	f7fe fde3 	bl	8000eac <__aeabi_fdiv>
 80022e6:	4603      	mov	r3, r0
 80022e8:	4619      	mov	r1, r3
 80022ea:	4620      	mov	r0, r4
 80022ec:	f7fe fec8 	bl	8001080 <__aeabi_fcmplt>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d009      	beq.n	800230a <main+0xc5a>
			error_sum[yaw] = -180 / Ki[yaw];
 80022f6:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <main+0xcf0>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	4619      	mov	r1, r3
 80022fc:	4829      	ldr	r0, [pc, #164]	; (80023a4 <main+0xcf4>)
 80022fe:	f7fe fdd5 	bl	8000eac <__aeabi_fdiv>
 8002302:	4603      	mov	r3, r0
 8002304:	461a      	mov	r2, r3
 8002306:	4b25      	ldr	r3, [pc, #148]	; (800239c <main+0xcec>)
 8002308:	609a      	str	r2, [r3, #8]
		if (error_sum[yaw] > 180 / Ki[yaw])
 800230a:	4b24      	ldr	r3, [pc, #144]	; (800239c <main+0xcec>)
 800230c:	689c      	ldr	r4, [r3, #8]
 800230e:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <main+0xcf0>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	4619      	mov	r1, r3
 8002314:	4824      	ldr	r0, [pc, #144]	; (80023a8 <main+0xcf8>)
 8002316:	f7fe fdc9 	bl	8000eac <__aeabi_fdiv>
 800231a:	4603      	mov	r3, r0
 800231c:	4619      	mov	r1, r3
 800231e:	4620      	mov	r0, r4
 8002320:	f7fe fecc 	bl	80010bc <__aeabi_fcmpgt>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <main+0xc8e>
			error_sum[yaw] = 180 / Ki[yaw];
 800232a:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <main+0xcf0>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	4619      	mov	r1, r3
 8002330:	481d      	ldr	r0, [pc, #116]	; (80023a8 <main+0xcf8>)
 8002332:	f7fe fdbb 	bl	8000eac <__aeabi_fdiv>
 8002336:	4603      	mov	r3, r0
 8002338:	461a      	mov	r2, r3
 800233a:	4b18      	ldr	r3, [pc, #96]	; (800239c <main+0xcec>)
 800233c:	609a      	str	r2, [r3, #8]

		// Calculate error delta : Derivative coefficients
		delta_err[roll] = angular_motions[roll] - pre_angular_motions[roll];
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <main+0xce4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a1a      	ldr	r2, [pc, #104]	; (80023ac <main+0xcfc>)
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe fbf1 	bl	8000b30 <__aeabi_fsub>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <main+0xd00>)
 8002354:	601a      	str	r2, [r3, #0]
		delta_err[pitch] = angular_motions[pitch] - pre_angular_motions[pitch];
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <main+0xce4>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4a14      	ldr	r2, [pc, #80]	; (80023ac <main+0xcfc>)
 800235c:	6852      	ldr	r2, [r2, #4]
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe fbe5 	bl	8000b30 <__aeabi_fsub>
 8002366:	4603      	mov	r3, r0
 8002368:	461a      	mov	r2, r3
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <main+0xd00>)
 800236c:	605a      	str	r2, [r3, #4]
		delta_err[yaw] = angular_motions[yaw] - pre_angular_motions[yaw];
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <main+0xce4>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <main+0xcfc>)
 8002374:	6892      	ldr	r2, [r2, #8]
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe fbd9 	bl	8000b30 <__aeabi_fsub>
 800237e:	4603      	mov	r3, r0
 8002380:	461a      	mov	r2, r3
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <main+0xd00>)
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	e015      	b.n	80023b4 <main+0xd04>
 8002388:	2000038c 	.word	0x2000038c
 800238c:	40080000 	.word	0x40080000
 8002390:	200003a4 	.word	0x200003a4
 8002394:	20000408 	.word	0x20000408
 8002398:	200003b0 	.word	0x200003b0
 800239c:	200003c8 	.word	0x200003c8
 80023a0:	20000024 	.word	0x20000024
 80023a4:	c3340000 	.word	0xc3340000
 80023a8:	43340000 	.word	0x43340000
 80023ac:	20000414 	.word	0x20000414
 80023b0:	200003bc 	.word	0x200003bc

		// Save current error as previous_error for next time
		pre_angular_motions[roll] = angular_motions[roll];
 80023b4:	4bac      	ldr	r3, [pc, #688]	; (8002668 <main+0xfb8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4aac      	ldr	r2, [pc, #688]	; (800266c <main+0xfbc>)
 80023ba:	6013      	str	r3, [r2, #0]
		pre_angular_motions[pitch] = angular_motions[pitch];
 80023bc:	4baa      	ldr	r3, [pc, #680]	; (8002668 <main+0xfb8>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4aaa      	ldr	r2, [pc, #680]	; (800266c <main+0xfbc>)
 80023c2:	6053      	str	r3, [r2, #4]
		pre_angular_motions[yaw] = angular_motions[yaw];
 80023c4:	4ba8      	ldr	r3, [pc, #672]	; (8002668 <main+0xfb8>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4aa8      	ldr	r2, [pc, #672]	; (800266c <main+0xfbc>)
 80023ca:	6093      	str	r3, [r2, #8]

		throttle = diff3;
 80023cc:	4ba8      	ldr	r3, [pc, #672]	; (8002670 <main+0xfc0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	4ba8      	ldr	r3, [pc, #672]	; (8002674 <main+0xfc4>)
 80023d4:	801a      	strh	r2, [r3, #0]

		if (throttle > 1050) {
 80023d6:	4ba7      	ldr	r3, [pc, #668]	; (8002674 <main+0xfc4>)
 80023d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023dc:	f240 421a 	movw	r2, #1050	; 0x41a
 80023e0:	4293      	cmp	r3, r2
 80023e2:	f340 818d 	ble.w	8002700 <main+0x1050>
			// PID = e.Kp + ∫e.Ki + Δe.Kd
			pid_roll = (errors[roll] * Kp[roll])
 80023e6:	4ba4      	ldr	r3, [pc, #656]	; (8002678 <main+0xfc8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4aa4      	ldr	r2, [pc, #656]	; (800267c <main+0xfcc>)
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe fca7 	bl	8000d44 <__aeabi_fmul>
 80023f6:	4603      	mov	r3, r0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe f815 	bl	8000428 <__aeabi_f2d>
 80023fe:	4604      	mov	r4, r0
 8002400:	460d      	mov	r5, r1
					+ (error_sum[roll] * Ki[roll]) * 0.004
 8002402:	4b9f      	ldr	r3, [pc, #636]	; (8002680 <main+0xfd0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a9f      	ldr	r2, [pc, #636]	; (8002684 <main+0xfd4>)
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fc99 	bl	8000d44 <__aeabi_fmul>
 8002412:	4603      	mov	r3, r0
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe f807 	bl	8000428 <__aeabi_f2d>
 800241a:	a391      	add	r3, pc, #580	; (adr r3, 8002660 <main+0xfb0>)
 800241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002420:	f7fe f85a 	bl	80004d8 <__aeabi_dmul>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4620      	mov	r0, r4
 800242a:	4629      	mov	r1, r5
 800242c:	f7fd fe9e 	bl	800016c <__adddf3>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4614      	mov	r4, r2
 8002436:	461d      	mov	r5, r3
					+ (delta_err[roll] * Kd[roll]) / 0.004;
 8002438:	4b93      	ldr	r3, [pc, #588]	; (8002688 <main+0xfd8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a93      	ldr	r2, [pc, #588]	; (800268c <main+0xfdc>)
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fc7e 	bl	8000d44 <__aeabi_fmul>
 8002448:	4603      	mov	r3, r0
 800244a:	4618      	mov	r0, r3
 800244c:	f7fd ffec 	bl	8000428 <__aeabi_f2d>
 8002450:	a383      	add	r3, pc, #524	; (adr r3, 8002660 <main+0xfb0>)
 8002452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002456:	f7fe f969 	bl	800072c <__aeabi_ddiv>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4620      	mov	r0, r4
 8002460:	4629      	mov	r1, r5
 8002462:	f7fd fe83 	bl	800016c <__adddf3>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4610      	mov	r0, r2
 800246c:	4619      	mov	r1, r3
 800246e:	f7fe fb0b 	bl	8000a88 <__aeabi_d2f>
 8002472:	4603      	mov	r3, r0
			pid_roll = (errors[roll] * Kp[roll])
 8002474:	4a86      	ldr	r2, [pc, #536]	; (8002690 <main+0xfe0>)
 8002476:	6013      	str	r3, [r2, #0]
			pid_pitch = (errors[pitch] * Kp[pitch])
 8002478:	4b7f      	ldr	r3, [pc, #508]	; (8002678 <main+0xfc8>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	4a7f      	ldr	r2, [pc, #508]	; (800267c <main+0xfcc>)
 800247e:	6852      	ldr	r2, [r2, #4]
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe fc5e 	bl	8000d44 <__aeabi_fmul>
 8002488:	4603      	mov	r3, r0
 800248a:	4618      	mov	r0, r3
 800248c:	f7fd ffcc 	bl	8000428 <__aeabi_f2d>
 8002490:	4604      	mov	r4, r0
 8002492:	460d      	mov	r5, r1
					+ (error_sum[pitch] * Ki[pitch]) * 0.004
 8002494:	4b7a      	ldr	r3, [pc, #488]	; (8002680 <main+0xfd0>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	4a7a      	ldr	r2, [pc, #488]	; (8002684 <main+0xfd4>)
 800249a:	6852      	ldr	r2, [r2, #4]
 800249c:	4611      	mov	r1, r2
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fc50 	bl	8000d44 <__aeabi_fmul>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fd ffbe 	bl	8000428 <__aeabi_f2d>
 80024ac:	a36c      	add	r3, pc, #432	; (adr r3, 8002660 <main+0xfb0>)
 80024ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b2:	f7fe f811 	bl	80004d8 <__aeabi_dmul>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4620      	mov	r0, r4
 80024bc:	4629      	mov	r1, r5
 80024be:	f7fd fe55 	bl	800016c <__adddf3>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4614      	mov	r4, r2
 80024c8:	461d      	mov	r5, r3
					+ (delta_err[pitch] * Kd[pitch]) / 0.004;
 80024ca:	4b6f      	ldr	r3, [pc, #444]	; (8002688 <main+0xfd8>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4a6f      	ldr	r2, [pc, #444]	; (800268c <main+0xfdc>)
 80024d0:	6852      	ldr	r2, [r2, #4]
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe fc35 	bl	8000d44 <__aeabi_fmul>
 80024da:	4603      	mov	r3, r0
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fd ffa3 	bl	8000428 <__aeabi_f2d>
 80024e2:	a35f      	add	r3, pc, #380	; (adr r3, 8002660 <main+0xfb0>)
 80024e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e8:	f7fe f920 	bl	800072c <__aeabi_ddiv>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4620      	mov	r0, r4
 80024f2:	4629      	mov	r1, r5
 80024f4:	f7fd fe3a 	bl	800016c <__adddf3>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4610      	mov	r0, r2
 80024fe:	4619      	mov	r1, r3
 8002500:	f7fe fac2 	bl	8000a88 <__aeabi_d2f>
 8002504:	4603      	mov	r3, r0
			pid_pitch = (errors[pitch] * Kp[pitch])
 8002506:	4a63      	ldr	r2, [pc, #396]	; (8002694 <main+0xfe4>)
 8002508:	6013      	str	r3, [r2, #0]
			pid_yaw = (errors[yaw] * Kp[yaw])
 800250a:	4b5b      	ldr	r3, [pc, #364]	; (8002678 <main+0xfc8>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	4a5b      	ldr	r2, [pc, #364]	; (800267c <main+0xfcc>)
 8002510:	6892      	ldr	r2, [r2, #8]
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe fc15 	bl	8000d44 <__aeabi_fmul>
 800251a:	4603      	mov	r3, r0
 800251c:	4618      	mov	r0, r3
 800251e:	f7fd ff83 	bl	8000428 <__aeabi_f2d>
 8002522:	4604      	mov	r4, r0
 8002524:	460d      	mov	r5, r1
					+ (error_sum[yaw] * Ki[yaw]) * 0.004
 8002526:	4b56      	ldr	r3, [pc, #344]	; (8002680 <main+0xfd0>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	4a56      	ldr	r2, [pc, #344]	; (8002684 <main+0xfd4>)
 800252c:	6892      	ldr	r2, [r2, #8]
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fc07 	bl	8000d44 <__aeabi_fmul>
 8002536:	4603      	mov	r3, r0
 8002538:	4618      	mov	r0, r3
 800253a:	f7fd ff75 	bl	8000428 <__aeabi_f2d>
 800253e:	a348      	add	r3, pc, #288	; (adr r3, 8002660 <main+0xfb0>)
 8002540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002544:	f7fd ffc8 	bl	80004d8 <__aeabi_dmul>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4620      	mov	r0, r4
 800254e:	4629      	mov	r1, r5
 8002550:	f7fd fe0c 	bl	800016c <__adddf3>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4614      	mov	r4, r2
 800255a:	461d      	mov	r5, r3
					+ (delta_err[yaw] * Kd[yaw]) / 0.004;
 800255c:	4b4a      	ldr	r3, [pc, #296]	; (8002688 <main+0xfd8>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4a4a      	ldr	r2, [pc, #296]	; (800268c <main+0xfdc>)
 8002562:	6892      	ldr	r2, [r2, #8]
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe fbec 	bl	8000d44 <__aeabi_fmul>
 800256c:	4603      	mov	r3, r0
 800256e:	4618      	mov	r0, r3
 8002570:	f7fd ff5a 	bl	8000428 <__aeabi_f2d>
 8002574:	a33a      	add	r3, pc, #232	; (adr r3, 8002660 <main+0xfb0>)
 8002576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257a:	f7fe f8d7 	bl	800072c <__aeabi_ddiv>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4620      	mov	r0, r4
 8002584:	4629      	mov	r1, r5
 8002586:	f7fd fdf1 	bl	800016c <__adddf3>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4610      	mov	r0, r2
 8002590:	4619      	mov	r1, r3
 8002592:	f7fe fa79 	bl	8000a88 <__aeabi_d2f>
 8002596:	4603      	mov	r3, r0
			pid_yaw = (errors[yaw] * Kp[yaw])
 8002598:	4a3f      	ldr	r2, [pc, #252]	; (8002698 <main+0xfe8>)
 800259a:	6013      	str	r3, [r2, #0]

			if (pid_roll > pid_max[roll])
 800259c:	4b3f      	ldr	r3, [pc, #252]	; (800269c <main+0xfec>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe fb7b 	bl	8000c9c <__aeabi_i2f>
 80025a6:	4602      	mov	r2, r0
 80025a8:	4b39      	ldr	r3, [pc, #228]	; (8002690 <main+0xfe0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4619      	mov	r1, r3
 80025ae:	4610      	mov	r0, r2
 80025b0:	f7fe fd66 	bl	8001080 <__aeabi_fcmplt>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d007      	beq.n	80025ca <main+0xf1a>
				pid_roll = pid_max[roll];
 80025ba:	4b38      	ldr	r3, [pc, #224]	; (800269c <main+0xfec>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fb6c 	bl	8000c9c <__aeabi_i2f>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4a32      	ldr	r2, [pc, #200]	; (8002690 <main+0xfe0>)
 80025c8:	6013      	str	r3, [r2, #0]
			if (pid_roll < (-pid_max[roll]))
 80025ca:	4b34      	ldr	r3, [pc, #208]	; (800269c <main+0xfec>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	425b      	negs	r3, r3
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe fb63 	bl	8000c9c <__aeabi_i2f>
 80025d6:	4602      	mov	r2, r0
 80025d8:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <main+0xfe0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4619      	mov	r1, r3
 80025de:	4610      	mov	r0, r2
 80025e0:	f7fe fd6c 	bl	80010bc <__aeabi_fcmpgt>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d008      	beq.n	80025fc <main+0xf4c>
				pid_roll = -pid_max[roll];
 80025ea:	4b2c      	ldr	r3, [pc, #176]	; (800269c <main+0xfec>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	425b      	negs	r3, r3
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fb53 	bl	8000c9c <__aeabi_i2f>
 80025f6:	4603      	mov	r3, r0
 80025f8:	4a25      	ldr	r2, [pc, #148]	; (8002690 <main+0xfe0>)
 80025fa:	6013      	str	r3, [r2, #0]
			if (pid_pitch > pid_max[pitch])
 80025fc:	4b27      	ldr	r3, [pc, #156]	; (800269c <main+0xfec>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4618      	mov	r0, r3
 8002602:	f7fe fb4b 	bl	8000c9c <__aeabi_i2f>
 8002606:	4602      	mov	r2, r0
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <main+0xfe4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f7fe fd36 	bl	8001080 <__aeabi_fcmplt>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <main+0xf7a>
				pid_pitch = pid_max[pitch];
 800261a:	4b20      	ldr	r3, [pc, #128]	; (800269c <main+0xfec>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fe fb3c 	bl	8000c9c <__aeabi_i2f>
 8002624:	4603      	mov	r3, r0
 8002626:	4a1b      	ldr	r2, [pc, #108]	; (8002694 <main+0xfe4>)
 8002628:	6013      	str	r3, [r2, #0]
			if (pid_pitch < (-pid_max[pitch]))
 800262a:	4b1c      	ldr	r3, [pc, #112]	; (800269c <main+0xfec>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	425b      	negs	r3, r3
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe fb33 	bl	8000c9c <__aeabi_i2f>
 8002636:	4602      	mov	r2, r0
 8002638:	4b16      	ldr	r3, [pc, #88]	; (8002694 <main+0xfe4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4619      	mov	r1, r3
 800263e:	4610      	mov	r0, r2
 8002640:	f7fe fd3c 	bl	80010bc <__aeabi_fcmpgt>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d02a      	beq.n	80026a0 <main+0xff0>
				pid_pitch = -pid_max[pitch];
 800264a:	4b14      	ldr	r3, [pc, #80]	; (800269c <main+0xfec>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	425b      	negs	r3, r3
 8002650:	4618      	mov	r0, r3
 8002652:	f7fe fb23 	bl	8000c9c <__aeabi_i2f>
 8002656:	4603      	mov	r3, r0
 8002658:	4a0e      	ldr	r2, [pc, #56]	; (8002694 <main+0xfe4>)
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	e020      	b.n	80026a0 <main+0xff0>
 800265e:	bf00      	nop
 8002660:	d2f1a9fc 	.word	0xd2f1a9fc
 8002664:	3f70624d 	.word	0x3f70624d
 8002668:	20000408 	.word	0x20000408
 800266c:	20000414 	.word	0x20000414
 8002670:	20000388 	.word	0x20000388
 8002674:	20000436 	.word	0x20000436
 8002678:	200003b0 	.word	0x200003b0
 800267c:	20000018 	.word	0x20000018
 8002680:	200003c8 	.word	0x200003c8
 8002684:	20000024 	.word	0x20000024
 8002688:	200003bc 	.word	0x200003bc
 800268c:	20000030 	.word	0x20000030
 8002690:	200003e0 	.word	0x200003e0
 8002694:	200003e4 	.word	0x200003e4
 8002698:	200003e8 	.word	0x200003e8
 800269c:	2000000c 	.word	0x2000000c
			if (pid_yaw > pid_max[yaw])
 80026a0:	4b93      	ldr	r3, [pc, #588]	; (80028f0 <main+0x1240>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe faf9 	bl	8000c9c <__aeabi_i2f>
 80026aa:	4602      	mov	r2, r0
 80026ac:	4b91      	ldr	r3, [pc, #580]	; (80028f4 <main+0x1244>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4619      	mov	r1, r3
 80026b2:	4610      	mov	r0, r2
 80026b4:	f7fe fce4 	bl	8001080 <__aeabi_fcmplt>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <main+0x101e>
				pid_yaw = pid_max[yaw];
 80026be:	4b8c      	ldr	r3, [pc, #560]	; (80028f0 <main+0x1240>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe faea 	bl	8000c9c <__aeabi_i2f>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4a8a      	ldr	r2, [pc, #552]	; (80028f4 <main+0x1244>)
 80026cc:	6013      	str	r3, [r2, #0]
			if (pid_yaw < (-pid_max[yaw]))
 80026ce:	4b88      	ldr	r3, [pc, #544]	; (80028f0 <main+0x1240>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	425b      	negs	r3, r3
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe fae1 	bl	8000c9c <__aeabi_i2f>
 80026da:	4602      	mov	r2, r0
 80026dc:	4b85      	ldr	r3, [pc, #532]	; (80028f4 <main+0x1244>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4619      	mov	r1, r3
 80026e2:	4610      	mov	r0, r2
 80026e4:	f7fe fcea 	bl	80010bc <__aeabi_fcmpgt>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d008      	beq.n	8002700 <main+0x1050>
				pid_yaw = -pid_max[yaw];
 80026ee:	4b80      	ldr	r3, [pc, #512]	; (80028f0 <main+0x1240>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	425b      	negs	r3, r3
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fad1 	bl	8000c9c <__aeabi_i2f>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4a7d      	ldr	r2, [pc, #500]	; (80028f4 <main+0x1244>)
 80026fe:	6013      	str	r3, [r2, #0]
		}

		if (active == 2) {
 8002700:	4b7d      	ldr	r3, [pc, #500]	; (80028f8 <main+0x1248>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b02      	cmp	r3, #2
 8002706:	f040 8107 	bne.w	8002918 <main+0x1268>
			if (throttle > 1800)
 800270a:	4b7c      	ldr	r3, [pc, #496]	; (80028fc <main+0x124c>)
 800270c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002710:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002714:	dd03      	ble.n	800271e <main+0x106e>
				throttle = 1800;
 8002716:	4b79      	ldr	r3, [pc, #484]	; (80028fc <main+0x124c>)
 8002718:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800271c:	801a      	strh	r2, [r3, #0]

			esc1 = throttle + pid_roll + pid_pitch + pid_yaw; //Calculate the pulse for esc 1 (front-right - CCW).
 800271e:	4b77      	ldr	r3, [pc, #476]	; (80028fc <main+0x124c>)
 8002720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fab9 	bl	8000c9c <__aeabi_i2f>
 800272a:	4602      	mov	r2, r0
 800272c:	4b74      	ldr	r3, [pc, #464]	; (8002900 <main+0x1250>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4619      	mov	r1, r3
 8002732:	4610      	mov	r0, r2
 8002734:	f7fe f9fe 	bl	8000b34 <__addsf3>
 8002738:	4603      	mov	r3, r0
 800273a:	461a      	mov	r2, r3
 800273c:	4b71      	ldr	r3, [pc, #452]	; (8002904 <main+0x1254>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4619      	mov	r1, r3
 8002742:	4610      	mov	r0, r2
 8002744:	f7fe f9f6 	bl	8000b34 <__addsf3>
 8002748:	4603      	mov	r3, r0
 800274a:	461a      	mov	r2, r3
 800274c:	4b69      	ldr	r3, [pc, #420]	; (80028f4 <main+0x1244>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4619      	mov	r1, r3
 8002752:	4610      	mov	r0, r2
 8002754:	f7fe f9ee 	bl	8000b34 <__addsf3>
 8002758:	4603      	mov	r3, r0
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe fcb8 	bl	80010d0 <__aeabi_f2iz>
 8002760:	4603      	mov	r3, r0
 8002762:	b21a      	sxth	r2, r3
 8002764:	4b68      	ldr	r3, [pc, #416]	; (8002908 <main+0x1258>)
 8002766:	801a      	strh	r2, [r3, #0]
			esc2 = throttle - pid_roll + pid_pitch - pid_yaw; //Calculate the pulse for esc 2 (rear-right - CW).
 8002768:	4b64      	ldr	r3, [pc, #400]	; (80028fc <main+0x124c>)
 800276a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fa94 	bl	8000c9c <__aeabi_i2f>
 8002774:	4602      	mov	r2, r0
 8002776:	4b62      	ldr	r3, [pc, #392]	; (8002900 <main+0x1250>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4619      	mov	r1, r3
 800277c:	4610      	mov	r0, r2
 800277e:	f7fe f9d7 	bl	8000b30 <__aeabi_fsub>
 8002782:	4603      	mov	r3, r0
 8002784:	461a      	mov	r2, r3
 8002786:	4b5f      	ldr	r3, [pc, #380]	; (8002904 <main+0x1254>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4619      	mov	r1, r3
 800278c:	4610      	mov	r0, r2
 800278e:	f7fe f9d1 	bl	8000b34 <__addsf3>
 8002792:	4603      	mov	r3, r0
 8002794:	461a      	mov	r2, r3
 8002796:	4b57      	ldr	r3, [pc, #348]	; (80028f4 <main+0x1244>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4619      	mov	r1, r3
 800279c:	4610      	mov	r0, r2
 800279e:	f7fe f9c7 	bl	8000b30 <__aeabi_fsub>
 80027a2:	4603      	mov	r3, r0
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe fc93 	bl	80010d0 <__aeabi_f2iz>
 80027aa:	4603      	mov	r3, r0
 80027ac:	b21a      	sxth	r2, r3
 80027ae:	4b57      	ldr	r3, [pc, #348]	; (800290c <main+0x125c>)
 80027b0:	801a      	strh	r2, [r3, #0]
			esc3 = throttle - pid_roll - pid_pitch + pid_yaw; //Calculate the pulse for esc 3 (rear-left - CCW).
 80027b2:	4b52      	ldr	r3, [pc, #328]	; (80028fc <main+0x124c>)
 80027b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fe fa6f 	bl	8000c9c <__aeabi_i2f>
 80027be:	4602      	mov	r2, r0
 80027c0:	4b4f      	ldr	r3, [pc, #316]	; (8002900 <main+0x1250>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4619      	mov	r1, r3
 80027c6:	4610      	mov	r0, r2
 80027c8:	f7fe f9b2 	bl	8000b30 <__aeabi_fsub>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b4c      	ldr	r3, [pc, #304]	; (8002904 <main+0x1254>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4619      	mov	r1, r3
 80027d6:	4610      	mov	r0, r2
 80027d8:	f7fe f9aa 	bl	8000b30 <__aeabi_fsub>
 80027dc:	4603      	mov	r3, r0
 80027de:	461a      	mov	r2, r3
 80027e0:	4b44      	ldr	r3, [pc, #272]	; (80028f4 <main+0x1244>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4619      	mov	r1, r3
 80027e6:	4610      	mov	r0, r2
 80027e8:	f7fe f9a4 	bl	8000b34 <__addsf3>
 80027ec:	4603      	mov	r3, r0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe fc6e 	bl	80010d0 <__aeabi_f2iz>
 80027f4:	4603      	mov	r3, r0
 80027f6:	b21a      	sxth	r2, r3
 80027f8:	4b45      	ldr	r3, [pc, #276]	; (8002910 <main+0x1260>)
 80027fa:	801a      	strh	r2, [r3, #0]
			esc4 = throttle + pid_roll - pid_pitch - pid_yaw; //Calculate the pulse for esc 4 (front-left - CW).
 80027fc:	4b3f      	ldr	r3, [pc, #252]	; (80028fc <main+0x124c>)
 80027fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fa4a 	bl	8000c9c <__aeabi_i2f>
 8002808:	4602      	mov	r2, r0
 800280a:	4b3d      	ldr	r3, [pc, #244]	; (8002900 <main+0x1250>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4619      	mov	r1, r3
 8002810:	4610      	mov	r0, r2
 8002812:	f7fe f98f 	bl	8000b34 <__addsf3>
 8002816:	4603      	mov	r3, r0
 8002818:	461a      	mov	r2, r3
 800281a:	4b3a      	ldr	r3, [pc, #232]	; (8002904 <main+0x1254>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4619      	mov	r1, r3
 8002820:	4610      	mov	r0, r2
 8002822:	f7fe f985 	bl	8000b30 <__aeabi_fsub>
 8002826:	4603      	mov	r3, r0
 8002828:	461a      	mov	r2, r3
 800282a:	4b32      	ldr	r3, [pc, #200]	; (80028f4 <main+0x1244>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4619      	mov	r1, r3
 8002830:	4610      	mov	r0, r2
 8002832:	f7fe f97d 	bl	8000b30 <__aeabi_fsub>
 8002836:	4603      	mov	r3, r0
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe fc49 	bl	80010d0 <__aeabi_f2iz>
 800283e:	4603      	mov	r3, r0
 8002840:	b21a      	sxth	r2, r3
 8002842:	4b34      	ldr	r3, [pc, #208]	; (8002914 <main+0x1264>)
 8002844:	801a      	strh	r2, [r3, #0]
//			esc1 = update_esc1(esc1);
//			esc2 = update_esc1(esc2);
//			esc3 = update_esc1(esc3);
//			esc4 = update_esc1(esc4);

			if (esc1 < 1100)
 8002846:	4b30      	ldr	r3, [pc, #192]	; (8002908 <main+0x1258>)
 8002848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800284c:	f240 424b 	movw	r2, #1099	; 0x44b
 8002850:	4293      	cmp	r3, r2
 8002852:	dc03      	bgt.n	800285c <main+0x11ac>
				esc1 = 1100;  //Keep the motors running.
 8002854:	4b2c      	ldr	r3, [pc, #176]	; (8002908 <main+0x1258>)
 8002856:	f240 424c 	movw	r2, #1100	; 0x44c
 800285a:	801a      	strh	r2, [r3, #0]
			if (esc2 < 1100)
 800285c:	4b2b      	ldr	r3, [pc, #172]	; (800290c <main+0x125c>)
 800285e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002862:	f240 424b 	movw	r2, #1099	; 0x44b
 8002866:	4293      	cmp	r3, r2
 8002868:	dc03      	bgt.n	8002872 <main+0x11c2>
				esc2 = 1100;  //Keep the motors running.
 800286a:	4b28      	ldr	r3, [pc, #160]	; (800290c <main+0x125c>)
 800286c:	f240 424c 	movw	r2, #1100	; 0x44c
 8002870:	801a      	strh	r2, [r3, #0]
			if (esc3 < 1100)
 8002872:	4b27      	ldr	r3, [pc, #156]	; (8002910 <main+0x1260>)
 8002874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002878:	f240 424b 	movw	r2, #1099	; 0x44b
 800287c:	4293      	cmp	r3, r2
 800287e:	dc03      	bgt.n	8002888 <main+0x11d8>
				esc3 = 1100;  //Keep the motors running.
 8002880:	4b23      	ldr	r3, [pc, #140]	; (8002910 <main+0x1260>)
 8002882:	f240 424c 	movw	r2, #1100	; 0x44c
 8002886:	801a      	strh	r2, [r3, #0]
			if (esc4 < 1100)
 8002888:	4b22      	ldr	r3, [pc, #136]	; (8002914 <main+0x1264>)
 800288a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800288e:	f240 424b 	movw	r2, #1099	; 0x44b
 8002892:	4293      	cmp	r3, r2
 8002894:	dc03      	bgt.n	800289e <main+0x11ee>
				esc4 = 1100;  //Keep the motors running.
 8002896:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <main+0x1264>)
 8002898:	f240 424c 	movw	r2, #1100	; 0x44c
 800289c:	801a      	strh	r2, [r3, #0]

			if (esc1 > 2000)
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <main+0x1258>)
 80028a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028a8:	dd03      	ble.n	80028b2 <main+0x1202>
				esc1 = 2000;  //Limit the esc-1 pulse to 2000us.
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <main+0x1258>)
 80028ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80028b0:	801a      	strh	r2, [r3, #0]
			if (esc2 > 2000)
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <main+0x125c>)
 80028b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028bc:	dd03      	ble.n	80028c6 <main+0x1216>
				esc2 = 2000;  //Limit the esc-2 pulse to 2000us.
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <main+0x125c>)
 80028c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80028c4:	801a      	strh	r2, [r3, #0]
			if (esc3 > 2000)
 80028c6:	4b12      	ldr	r3, [pc, #72]	; (8002910 <main+0x1260>)
 80028c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028d0:	dd03      	ble.n	80028da <main+0x122a>
				esc3 = 2000;  //Limit the esc-3 pulse to 2000us.
 80028d2:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <main+0x1260>)
 80028d4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80028d8:	801a      	strh	r2, [r3, #0]
			if (esc4 > 2000)
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <main+0x1264>)
 80028dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028e4:	dd28      	ble.n	8002938 <main+0x1288>
				esc4 = 2000;  //Limit the esc-4 pulse to 2000us.
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <main+0x1264>)
 80028e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80028ec:	801a      	strh	r2, [r3, #0]
 80028ee:	e023      	b.n	8002938 <main+0x1288>
 80028f0:	2000000c 	.word	0x2000000c
 80028f4:	200003e8 	.word	0x200003e8
 80028f8:	2000042c 	.word	0x2000042c
 80028fc:	20000436 	.word	0x20000436
 8002900:	200003e0 	.word	0x200003e0
 8002904:	200003e4 	.word	0x200003e4
 8002908:	2000042e 	.word	0x2000042e
 800290c:	20000430 	.word	0x20000430
 8002910:	20000432 	.word	0x20000432
 8002914:	20000434 	.word	0x20000434
		} else {
			esc1 = 1000;
 8002918:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <main+0x131c>)
 800291a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800291e:	801a      	strh	r2, [r3, #0]
			esc2 = 1000;
 8002920:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <main+0x1320>)
 8002922:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002926:	801a      	strh	r2, [r3, #0]
			esc3 = 1000;
 8002928:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <main+0x1324>)
 800292a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800292e:	801a      	strh	r2, [r3, #0]
			esc4 = 1000;
 8002930:	4b29      	ldr	r3, [pc, #164]	; (80029d8 <main+0x1328>)
 8002932:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002936:	801a      	strh	r2, [r3, #0]
		}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, esc1);			//fr
 8002938:	4b24      	ldr	r3, [pc, #144]	; (80029cc <main+0x131c>)
 800293a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800293e:	4b27      	ldr	r3, [pc, #156]	; (80029dc <main+0x132c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, esc4);			//fl
 8002944:	4b24      	ldr	r3, [pc, #144]	; (80029d8 <main+0x1328>)
 8002946:	f9b3 2000 	ldrsh.w	r2, [r3]
 800294a:	4b24      	ldr	r3, [pc, #144]	; (80029dc <main+0x132c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, esc2);			//br
 8002950:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <main+0x1320>)
 8002952:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002956:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <main+0x1330>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, esc3);			//bl
 800295c:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <main+0x1324>)
 800295e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002962:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <main+0x1330>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	641a      	str	r2, [r3, #64]	; 0x40

		if (HAL_GetTick() - looptimer > 4) {
 8002968:	f000 fd60 	bl	800342c <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <main+0x1334>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b04      	cmp	r3, #4
 8002976:	d919      	bls.n	80029ac <main+0x12fc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002978:	2200      	movs	r2, #0
 800297a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800297e:	481a      	ldr	r0, [pc, #104]	; (80029e8 <main+0x1338>)
 8002980:	f001 f814 	bl	80039ac <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);			//fr
 8002984:	4b15      	ldr	r3, [pc, #84]	; (80029dc <main+0x132c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800298c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1000);			//fl
 800298e:	4b13      	ldr	r3, [pc, #76]	; (80029dc <main+0x132c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002996:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 1000);			//br
 8002998:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <main+0x1330>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029a0:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 1000);			//bl
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <main+0x1330>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40
		}
		while (HAL_GetTick() - looptimer < 4) {
 80029ac:	bf00      	nop
 80029ae:	f000 fd3d 	bl	800342c <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <main+0x1334>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d9f7      	bls.n	80029ae <main+0x12fe>
		}
		looptimer = HAL_GetTick();
 80029be:	f000 fd35 	bl	800342c <HAL_GetTick>
 80029c2:	4603      	mov	r3, r0
 80029c4:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <main+0x1334>)
 80029c6:	6013      	str	r3, [r2, #0]
		MPU6050_Read(); //ok
 80029c8:	f7fe bf3f 	b.w	800184a <main+0x19a>
 80029cc:	2000042e 	.word	0x2000042e
 80029d0:	20000430 	.word	0x20000430
 80029d4:	20000432 	.word	0x20000432
 80029d8:	20000434 	.word	0x20000434
 80029dc:	200002d0 	.word	0x200002d0
 80029e0:	20000318 	.word	0x20000318
 80029e4:	20000438 	.word	0x20000438
 80029e8:	40011000 	.word	0x40011000

080029ec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b090      	sub	sp, #64	; 0x40
 80029f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80029f2:	f107 0318 	add.w	r3, r7, #24
 80029f6:	2228      	movs	r2, #40	; 0x28
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f003 fe80 	bl	8006700 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
 8002a08:	609a      	str	r2, [r3, #8]
 8002a0a:	60da      	str	r2, [r3, #12]
 8002a0c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a16:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a20:	2302      	movs	r3, #2
 8002a22:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a28:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a2a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002a30:	f107 0318 	add.w	r3, r7, #24
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 ffeb 	bl	8004a10 <HAL_RCC_OscConfig>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <SystemClock_Config+0x58>
		Error_Handler();
 8002a40:	f000 fa1a 	bl	8002e78 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002a44:	230f      	movs	r3, #15
 8002a46:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a54:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f002 fa58 	bl	8004f14 <HAL_RCC_ClockConfig>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <SystemClock_Config+0x82>
		Error_Handler();
 8002a6a:	f000 fa05 	bl	8002e78 <Error_Handler>
	}
}
 8002a6e:	bf00      	nop
 8002a70:	3740      	adds	r7, #64	; 0x40
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002a7c:	4b13      	ldr	r3, [pc, #76]	; (8002acc <MX_I2C1_Init+0x54>)
 8002a7e:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <MX_I2C1_Init+0x58>)
 8002a80:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8002a82:	4b12      	ldr	r3, [pc, #72]	; (8002acc <MX_I2C1_Init+0x54>)
 8002a84:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <MX_I2C1_Init+0x5c>)
 8002a86:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8002a88:	4b10      	ldr	r3, [pc, #64]	; (8002acc <MX_I2C1_Init+0x54>)
 8002a8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a8e:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002a90:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <MX_I2C1_Init+0x54>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a96:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <MX_I2C1_Init+0x54>)
 8002a98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a9c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <MX_I2C1_Init+0x54>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <MX_I2C1_Init+0x54>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <MX_I2C1_Init+0x54>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ab0:	4b06      	ldr	r3, [pc, #24]	; (8002acc <MX_I2C1_Init+0x54>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002ab6:	4805      	ldr	r0, [pc, #20]	; (8002acc <MX_I2C1_Init+0x54>)
 8002ab8:	f000 ffaa 	bl	8003a10 <HAL_I2C_Init>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_I2C1_Init+0x4e>
		Error_Handler();
 8002ac2:	f000 f9d9 	bl	8002e78 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000234 	.word	0x20000234
 8002ad0:	40005400 	.word	0x40005400
 8002ad4:	00061a80 	.word	0x00061a80

08002ad8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002ade:	f107 0310 	add.w	r3, r7, #16
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8002ae8:	463b      	mov	r3, r7
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	605a      	str	r2, [r3, #4]
 8002af0:	609a      	str	r2, [r3, #8]
 8002af2:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002af4:	4b31      	ldr	r3, [pc, #196]	; (8002bbc <MX_TIM2_Init+0xe4>)
 8002af6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002afa:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 8002afc:	4b2f      	ldr	r3, [pc, #188]	; (8002bbc <MX_TIM2_Init+0xe4>)
 8002afe:	2247      	movs	r2, #71	; 0x47
 8002b00:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b02:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <MX_TIM2_Init+0xe4>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8002b08:	4b2c      	ldr	r3, [pc, #176]	; (8002bbc <MX_TIM2_Init+0xe4>)
 8002b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b0e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b10:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <MX_TIM2_Init+0xe4>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b16:	4b29      	ldr	r3, [pc, #164]	; (8002bbc <MX_TIM2_Init+0xe4>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8002b1c:	4827      	ldr	r0, [pc, #156]	; (8002bbc <MX_TIM2_Init+0xe4>)
 8002b1e:	f002 fcc7 	bl	80054b0 <HAL_TIM_IC_Init>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_TIM2_Init+0x54>
		Error_Handler();
 8002b28:	f000 f9a6 	bl	8002e78 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002b34:	f107 0310 	add.w	r3, r7, #16
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4820      	ldr	r0, [pc, #128]	; (8002bbc <MX_TIM2_Init+0xe4>)
 8002b3c:	f003 fd46 	bl	80065cc <HAL_TIMEx_MasterConfigSynchronization>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_TIM2_Init+0x72>
			!= HAL_OK) {
		Error_Handler();
 8002b46:	f000 f997 	bl	8002e78 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8002b5a:	463b      	mov	r3, r7
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4816      	ldr	r0, [pc, #88]	; (8002bbc <MX_TIM2_Init+0xe4>)
 8002b62:	f002 ff03 	bl	800596c <HAL_TIM_IC_ConfigChannel>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_TIM2_Init+0x98>
		Error_Handler();
 8002b6c:	f000 f984 	bl	8002e78 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8002b70:	463b      	mov	r3, r7
 8002b72:	2204      	movs	r2, #4
 8002b74:	4619      	mov	r1, r3
 8002b76:	4811      	ldr	r0, [pc, #68]	; (8002bbc <MX_TIM2_Init+0xe4>)
 8002b78:	f002 fef8 	bl	800596c <HAL_TIM_IC_ConfigChannel>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_TIM2_Init+0xae>
		Error_Handler();
 8002b82:	f000 f979 	bl	8002e78 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8002b86:	463b      	mov	r3, r7
 8002b88:	2208      	movs	r2, #8
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	480b      	ldr	r0, [pc, #44]	; (8002bbc <MX_TIM2_Init+0xe4>)
 8002b8e:	f002 feed 	bl	800596c <HAL_TIM_IC_ConfigChannel>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_TIM2_Init+0xc4>
		Error_Handler();
 8002b98:	f000 f96e 	bl	8002e78 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK) {
 8002b9c:	463b      	mov	r3, r7
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4806      	ldr	r0, [pc, #24]	; (8002bbc <MX_TIM2_Init+0xe4>)
 8002ba4:	f002 fee2 	bl	800596c <HAL_TIM_IC_ConfigChannel>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_TIM2_Init+0xda>
		Error_Handler();
 8002bae:	f000 f963 	bl	8002e78 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000288 	.word	0x20000288

08002bc0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08e      	sub	sp, #56	; 0x38
 8002bc4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002bd4:	f107 0320 	add.w	r3, r7, #32
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002bde:	1d3b      	adds	r3, r7, #4
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
 8002bec:	615a      	str	r2, [r3, #20]
 8002bee:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002bf0:	4b32      	ldr	r3, [pc, #200]	; (8002cbc <MX_TIM3_Init+0xfc>)
 8002bf2:	4a33      	ldr	r2, [pc, #204]	; (8002cc0 <MX_TIM3_Init+0x100>)
 8002bf4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72 - 1;
 8002bf6:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <MX_TIM3_Init+0xfc>)
 8002bf8:	2247      	movs	r2, #71	; 0x47
 8002bfa:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfc:	4b2f      	ldr	r3, [pc, #188]	; (8002cbc <MX_TIM3_Init+0xfc>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 5000;
 8002c02:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <MX_TIM3_Init+0xfc>)
 8002c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c08:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0a:	4b2c      	ldr	r3, [pc, #176]	; (8002cbc <MX_TIM3_Init+0xfc>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c10:	4b2a      	ldr	r3, [pc, #168]	; (8002cbc <MX_TIM3_Init+0xfc>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002c16:	4829      	ldr	r0, [pc, #164]	; (8002cbc <MX_TIM3_Init+0xfc>)
 8002c18:	f002 fb00 	bl	800521c <HAL_TIM_Base_Init>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_TIM3_Init+0x66>
		Error_Handler();
 8002c22:	f000 f929 	bl	8002e78 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002c2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c30:	4619      	mov	r1, r3
 8002c32:	4822      	ldr	r0, [pc, #136]	; (8002cbc <MX_TIM3_Init+0xfc>)
 8002c34:	f002 ffec 	bl	8005c10 <HAL_TIM_ConfigClockSource>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_TIM3_Init+0x82>
		Error_Handler();
 8002c3e:	f000 f91b 	bl	8002e78 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002c42:	481e      	ldr	r0, [pc, #120]	; (8002cbc <MX_TIM3_Init+0xfc>)
 8002c44:	f002 fb39 	bl	80052ba <HAL_TIM_PWM_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_TIM3_Init+0x92>
		Error_Handler();
 8002c4e:	f000 f913 	bl	8002e78 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002c5a:	f107 0320 	add.w	r3, r7, #32
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4816      	ldr	r0, [pc, #88]	; (8002cbc <MX_TIM3_Init+0xfc>)
 8002c62:	f003 fcb3 	bl	80065cc <HAL_TIMEx_MasterConfigSynchronization>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8002c6c:	f000 f904 	bl	8002e78 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c70:	2360      	movs	r3, #96	; 0x60
 8002c72:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8002c80:	1d3b      	adds	r3, r7, #4
 8002c82:	2208      	movs	r2, #8
 8002c84:	4619      	mov	r1, r3
 8002c86:	480d      	ldr	r0, [pc, #52]	; (8002cbc <MX_TIM3_Init+0xfc>)
 8002c88:	f002 ff04 	bl	8005a94 <HAL_TIM_PWM_ConfigChannel>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8002c92:	f000 f8f1 	bl	8002e78 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8002c96:	1d3b      	adds	r3, r7, #4
 8002c98:	220c      	movs	r2, #12
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4807      	ldr	r0, [pc, #28]	; (8002cbc <MX_TIM3_Init+0xfc>)
 8002c9e:	f002 fef9 	bl	8005a94 <HAL_TIM_PWM_ConfigChannel>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8002ca8:	f000 f8e6 	bl	8002e78 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002cac:	4803      	ldr	r0, [pc, #12]	; (8002cbc <MX_TIM3_Init+0xfc>)
 8002cae:	f000 f9df 	bl	8003070 <HAL_TIM_MspPostInit>

}
 8002cb2:	bf00      	nop
 8002cb4:	3738      	adds	r7, #56	; 0x38
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	200002d0 	.word	0x200002d0
 8002cc0:	40000400 	.word	0x40000400

08002cc4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08e      	sub	sp, #56	; 0x38
 8002cc8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002cd8:	f107 0320 	add.w	r3, r7, #32
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002ce2:	1d3b      	adds	r3, r7, #4
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
 8002cf0:	615a      	str	r2, [r3, #20]
 8002cf2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002cf4:	4b32      	ldr	r3, [pc, #200]	; (8002dc0 <MX_TIM4_Init+0xfc>)
 8002cf6:	4a33      	ldr	r2, [pc, #204]	; (8002dc4 <MX_TIM4_Init+0x100>)
 8002cf8:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 72 - 1;
 8002cfa:	4b31      	ldr	r3, [pc, #196]	; (8002dc0 <MX_TIM4_Init+0xfc>)
 8002cfc:	2247      	movs	r2, #71	; 0x47
 8002cfe:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d00:	4b2f      	ldr	r3, [pc, #188]	; (8002dc0 <MX_TIM4_Init+0xfc>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 5000;
 8002d06:	4b2e      	ldr	r3, [pc, #184]	; (8002dc0 <MX_TIM4_Init+0xfc>)
 8002d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d0e:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <MX_TIM4_Init+0xfc>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d14:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <MX_TIM4_Init+0xfc>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8002d1a:	4829      	ldr	r0, [pc, #164]	; (8002dc0 <MX_TIM4_Init+0xfc>)
 8002d1c:	f002 fa7e 	bl	800521c <HAL_TIM_Base_Init>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_TIM4_Init+0x66>
		Error_Handler();
 8002d26:	f000 f8a7 	bl	8002e78 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8002d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d34:	4619      	mov	r1, r3
 8002d36:	4822      	ldr	r0, [pc, #136]	; (8002dc0 <MX_TIM4_Init+0xfc>)
 8002d38:	f002 ff6a 	bl	8005c10 <HAL_TIM_ConfigClockSource>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <MX_TIM4_Init+0x82>
		Error_Handler();
 8002d42:	f000 f899 	bl	8002e78 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8002d46:	481e      	ldr	r0, [pc, #120]	; (8002dc0 <MX_TIM4_Init+0xfc>)
 8002d48:	f002 fab7 	bl	80052ba <HAL_TIM_PWM_Init>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_TIM4_Init+0x92>
		Error_Handler();
 8002d52:	f000 f891 	bl	8002e78 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d56:	2300      	movs	r3, #0
 8002d58:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8002d5e:	f107 0320 	add.w	r3, r7, #32
 8002d62:	4619      	mov	r1, r3
 8002d64:	4816      	ldr	r0, [pc, #88]	; (8002dc0 <MX_TIM4_Init+0xfc>)
 8002d66:	f003 fc31 	bl	80065cc <HAL_TIMEx_MasterConfigSynchronization>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8002d70:	f000 f882 	bl	8002e78 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d74:	2360      	movs	r3, #96	; 0x60
 8002d76:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8002d84:	1d3b      	adds	r3, r7, #4
 8002d86:	2208      	movs	r2, #8
 8002d88:	4619      	mov	r1, r3
 8002d8a:	480d      	ldr	r0, [pc, #52]	; (8002dc0 <MX_TIM4_Init+0xfc>)
 8002d8c:	f002 fe82 	bl	8005a94 <HAL_TIM_PWM_ConfigChannel>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_TIM4_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8002d96:	f000 f86f 	bl	8002e78 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8002d9a:	1d3b      	adds	r3, r7, #4
 8002d9c:	220c      	movs	r2, #12
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4807      	ldr	r0, [pc, #28]	; (8002dc0 <MX_TIM4_Init+0xfc>)
 8002da2:	f002 fe77 	bl	8005a94 <HAL_TIM_PWM_ConfigChannel>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <MX_TIM4_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8002dac:	f000 f864 	bl	8002e78 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8002db0:	4803      	ldr	r0, [pc, #12]	; (8002dc0 <MX_TIM4_Init+0xfc>)
 8002db2:	f000 f95d 	bl	8003070 <HAL_TIM_MspPostInit>

}
 8002db6:	bf00      	nop
 8002db8:	3738      	adds	r7, #56	; 0x38
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000318 	.word	0x20000318
 8002dc4:	40000800 	.word	0x40000800

08002dc8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002dce:	f107 0310 	add.w	r3, r7, #16
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	605a      	str	r2, [r3, #4]
 8002dd8:	609a      	str	r2, [r3, #8]
 8002dda:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002ddc:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <MX_GPIO_Init+0xa8>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	4a23      	ldr	r2, [pc, #140]	; (8002e70 <MX_GPIO_Init+0xa8>)
 8002de2:	f043 0310 	orr.w	r3, r3, #16
 8002de6:	6193      	str	r3, [r2, #24]
 8002de8:	4b21      	ldr	r3, [pc, #132]	; (8002e70 <MX_GPIO_Init+0xa8>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002df4:	4b1e      	ldr	r3, [pc, #120]	; (8002e70 <MX_GPIO_Init+0xa8>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	4a1d      	ldr	r2, [pc, #116]	; (8002e70 <MX_GPIO_Init+0xa8>)
 8002dfa:	f043 0320 	orr.w	r3, r3, #32
 8002dfe:	6193      	str	r3, [r2, #24]
 8002e00:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <MX_GPIO_Init+0xa8>)
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0c:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <MX_GPIO_Init+0xa8>)
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	4a17      	ldr	r2, [pc, #92]	; (8002e70 <MX_GPIO_Init+0xa8>)
 8002e12:	f043 0304 	orr.w	r3, r3, #4
 8002e16:	6193      	str	r3, [r2, #24]
 8002e18:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <MX_GPIO_Init+0xa8>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	607b      	str	r3, [r7, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <MX_GPIO_Init+0xa8>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	4a11      	ldr	r2, [pc, #68]	; (8002e70 <MX_GPIO_Init+0xa8>)
 8002e2a:	f043 0308 	orr.w	r3, r3, #8
 8002e2e:	6193      	str	r3, [r2, #24]
 8002e30:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <MX_GPIO_Init+0xa8>)
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e42:	480c      	ldr	r0, [pc, #48]	; (8002e74 <MX_GPIO_Init+0xac>)
 8002e44:	f000 fdb2 	bl	80039ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002e48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e4c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e56:	2302      	movs	r3, #2
 8002e58:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e5a:	f107 0310 	add.w	r3, r7, #16
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4804      	ldr	r0, [pc, #16]	; (8002e74 <MX_GPIO_Init+0xac>)
 8002e62:	f000 fc1f 	bl	80036a4 <HAL_GPIO_Init>

}
 8002e66:	bf00      	nop
 8002e68:	3720      	adds	r7, #32
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40011000 	.word	0x40011000

08002e78 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e7c:	b672      	cpsid	i
}
 8002e7e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002e80:	e7fe      	b.n	8002e80 <Error_Handler+0x8>
	...

08002e84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e8a:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <HAL_MspInit+0x5c>)
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	4a14      	ldr	r2, [pc, #80]	; (8002ee0 <HAL_MspInit+0x5c>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6193      	str	r3, [r2, #24]
 8002e96:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <HAL_MspInit+0x5c>)
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea2:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <HAL_MspInit+0x5c>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	4a0e      	ldr	r2, [pc, #56]	; (8002ee0 <HAL_MspInit+0x5c>)
 8002ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eac:	61d3      	str	r3, [r2, #28]
 8002eae:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <HAL_MspInit+0x5c>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	607b      	str	r3, [r7, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002eba:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <HAL_MspInit+0x60>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <HAL_MspInit+0x60>)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40010000 	.word	0x40010000

08002ee8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 0310 	add.w	r3, r7, #16
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a15      	ldr	r2, [pc, #84]	; (8002f58 <HAL_I2C_MspInit+0x70>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d123      	bne.n	8002f50 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f08:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <HAL_I2C_MspInit+0x74>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	4a13      	ldr	r2, [pc, #76]	; (8002f5c <HAL_I2C_MspInit+0x74>)
 8002f0e:	f043 0308 	orr.w	r3, r3, #8
 8002f12:	6193      	str	r3, [r2, #24]
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <HAL_I2C_MspInit+0x74>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f20:	23c0      	movs	r3, #192	; 0xc0
 8002f22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f24:	2312      	movs	r3, #18
 8002f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2c:	f107 0310 	add.w	r3, r7, #16
 8002f30:	4619      	mov	r1, r3
 8002f32:	480b      	ldr	r0, [pc, #44]	; (8002f60 <HAL_I2C_MspInit+0x78>)
 8002f34:	f000 fbb6 	bl	80036a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f38:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <HAL_I2C_MspInit+0x74>)
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	4a07      	ldr	r2, [pc, #28]	; (8002f5c <HAL_I2C_MspInit+0x74>)
 8002f3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f42:	61d3      	str	r3, [r2, #28]
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_I2C_MspInit+0x74>)
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f50:	bf00      	nop
 8002f52:	3720      	adds	r7, #32
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40005400 	.word	0x40005400
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40010c00 	.word	0x40010c00

08002f64 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6c:	f107 0310 	add.w	r3, r7, #16
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM2)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f82:	d12b      	bne.n	8002fdc <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f84:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <HAL_TIM_IC_MspInit+0x80>)
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	4a16      	ldr	r2, [pc, #88]	; (8002fe4 <HAL_TIM_IC_MspInit+0x80>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	61d3      	str	r3, [r2, #28]
 8002f90:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <HAL_TIM_IC_MspInit+0x80>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_TIM_IC_MspInit+0x80>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	4a10      	ldr	r2, [pc, #64]	; (8002fe4 <HAL_TIM_IC_MspInit+0x80>)
 8002fa2:	f043 0304 	orr.w	r3, r3, #4
 8002fa6:	6193      	str	r3, [r2, #24]
 8002fa8:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <HAL_TIM_IC_MspInit+0x80>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002fb4:	230f      	movs	r3, #15
 8002fb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc0:	f107 0310 	add.w	r3, r7, #16
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4808      	ldr	r0, [pc, #32]	; (8002fe8 <HAL_TIM_IC_MspInit+0x84>)
 8002fc8:	f000 fb6c 	bl	80036a4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2100      	movs	r1, #0
 8002fd0:	201c      	movs	r0, #28
 8002fd2:	f000 fb30 	bl	8003636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fd6:	201c      	movs	r0, #28
 8002fd8:	f000 fb49 	bl	800366e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002fdc:	bf00      	nop
 8002fde:	3720      	adds	r7, #32
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40010800 	.word	0x40010800

08002fec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a1a      	ldr	r2, [pc, #104]	; (8003064 <HAL_TIM_Base_MspInit+0x78>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d114      	bne.n	8003028 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ffe:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <HAL_TIM_Base_MspInit+0x7c>)
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	4a19      	ldr	r2, [pc, #100]	; (8003068 <HAL_TIM_Base_MspInit+0x7c>)
 8003004:	f043 0302 	orr.w	r3, r3, #2
 8003008:	61d3      	str	r3, [r2, #28]
 800300a:	4b17      	ldr	r3, [pc, #92]	; (8003068 <HAL_TIM_Base_MspInit+0x7c>)
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003016:	2200      	movs	r2, #0
 8003018:	2100      	movs	r1, #0
 800301a:	201d      	movs	r0, #29
 800301c:	f000 fb0b 	bl	8003636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003020:	201d      	movs	r0, #29
 8003022:	f000 fb24 	bl	800366e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003026:	e018      	b.n	800305a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a0f      	ldr	r2, [pc, #60]	; (800306c <HAL_TIM_Base_MspInit+0x80>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d113      	bne.n	800305a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003032:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <HAL_TIM_Base_MspInit+0x7c>)
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	4a0c      	ldr	r2, [pc, #48]	; (8003068 <HAL_TIM_Base_MspInit+0x7c>)
 8003038:	f043 0304 	orr.w	r3, r3, #4
 800303c:	61d3      	str	r3, [r2, #28]
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <HAL_TIM_Base_MspInit+0x7c>)
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	60bb      	str	r3, [r7, #8]
 8003048:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800304a:	2200      	movs	r2, #0
 800304c:	2100      	movs	r1, #0
 800304e:	201e      	movs	r0, #30
 8003050:	f000 faf1 	bl	8003636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003054:	201e      	movs	r0, #30
 8003056:	f000 fb0a 	bl	800366e <HAL_NVIC_EnableIRQ>
}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40000400 	.word	0x40000400
 8003068:	40021000 	.word	0x40021000
 800306c:	40000800 	.word	0x40000800

08003070 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003078:	f107 0310 	add.w	r3, r7, #16
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1f      	ldr	r2, [pc, #124]	; (8003108 <HAL_TIM_MspPostInit+0x98>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d118      	bne.n	80030c2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003090:	4b1e      	ldr	r3, [pc, #120]	; (800310c <HAL_TIM_MspPostInit+0x9c>)
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	4a1d      	ldr	r2, [pc, #116]	; (800310c <HAL_TIM_MspPostInit+0x9c>)
 8003096:	f043 0308 	orr.w	r3, r3, #8
 800309a:	6193      	str	r3, [r2, #24]
 800309c:	4b1b      	ldr	r3, [pc, #108]	; (800310c <HAL_TIM_MspPostInit+0x9c>)
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030a8:	2303      	movs	r3, #3
 80030aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ac:	2302      	movs	r3, #2
 80030ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b0:	2302      	movs	r3, #2
 80030b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b4:	f107 0310 	add.w	r3, r7, #16
 80030b8:	4619      	mov	r1, r3
 80030ba:	4815      	ldr	r0, [pc, #84]	; (8003110 <HAL_TIM_MspPostInit+0xa0>)
 80030bc:	f000 faf2 	bl	80036a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80030c0:	e01d      	b.n	80030fe <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM4)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a13      	ldr	r2, [pc, #76]	; (8003114 <HAL_TIM_MspPostInit+0xa4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d118      	bne.n	80030fe <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030cc:	4b0f      	ldr	r3, [pc, #60]	; (800310c <HAL_TIM_MspPostInit+0x9c>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	4a0e      	ldr	r2, [pc, #56]	; (800310c <HAL_TIM_MspPostInit+0x9c>)
 80030d2:	f043 0308 	orr.w	r3, r3, #8
 80030d6:	6193      	str	r3, [r2, #24]
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <HAL_TIM_MspPostInit+0x9c>)
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ea:	2302      	movs	r3, #2
 80030ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ee:	2302      	movs	r3, #2
 80030f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f2:	f107 0310 	add.w	r3, r7, #16
 80030f6:	4619      	mov	r1, r3
 80030f8:	4805      	ldr	r0, [pc, #20]	; (8003110 <HAL_TIM_MspPostInit+0xa0>)
 80030fa:	f000 fad3 	bl	80036a4 <HAL_GPIO_Init>
}
 80030fe:	bf00      	nop
 8003100:	3720      	adds	r7, #32
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40000400 	.word	0x40000400
 800310c:	40021000 	.word	0x40021000
 8003110:	40010c00 	.word	0x40010c00
 8003114:	40000800 	.word	0x40000800

08003118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800311c:	e7fe      	b.n	800311c <NMI_Handler+0x4>

0800311e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003122:	e7fe      	b.n	8003122 <HardFault_Handler+0x4>

08003124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003128:	e7fe      	b.n	8003128 <MemManage_Handler+0x4>

0800312a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800312a:	b480      	push	{r7}
 800312c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800312e:	e7fe      	b.n	800312e <BusFault_Handler+0x4>

08003130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003134:	e7fe      	b.n	8003134 <UsageFault_Handler+0x4>

08003136 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003136:	b480      	push	{r7}
 8003138:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr

08003142 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003146:	bf00      	nop
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr

0800314e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800314e:	b480      	push	{r7}
 8003150:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800315e:	f000 f953 	bl	8003408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800316c:	4802      	ldr	r0, [pc, #8]	; (8003178 <TIM2_IRQHandler+0x10>)
 800316e:	f002 faf5 	bl	800575c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003172:	bf00      	nop
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	20000288 	.word	0x20000288

0800317c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003180:	4802      	ldr	r0, [pc, #8]	; (800318c <TIM3_IRQHandler+0x10>)
 8003182:	f002 faeb 	bl	800575c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	200002d0 	.word	0x200002d0

08003190 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003194:	4802      	ldr	r0, [pc, #8]	; (80031a0 <TIM4_IRQHandler+0x10>)
 8003196:	f002 fae1 	bl	800575c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800319a:	bf00      	nop
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000318 	.word	0x20000318

080031a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return 1;
 80031a8:	2301      	movs	r3, #1
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr

080031b2 <_kill>:

int _kill(int pid, int sig)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031bc:	f003 fa76 	bl	80066ac <__errno>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2216      	movs	r2, #22
 80031c4:	601a      	str	r2, [r3, #0]
  return -1;
 80031c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <_exit>:

void _exit (int status)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031da:	f04f 31ff 	mov.w	r1, #4294967295
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7ff ffe7 	bl	80031b2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80031e4:	e7fe      	b.n	80031e4 <_exit+0x12>

080031e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b086      	sub	sp, #24
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	e00a      	b.n	800320e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031f8:	f3af 8000 	nop.w
 80031fc:	4601      	mov	r1, r0
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	60ba      	str	r2, [r7, #8]
 8003204:	b2ca      	uxtb	r2, r1
 8003206:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	3301      	adds	r3, #1
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	429a      	cmp	r2, r3
 8003214:	dbf0      	blt.n	80031f8 <_read+0x12>
  }

  return len;
 8003216:	687b      	ldr	r3, [r7, #4]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	e009      	b.n	8003246 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	60ba      	str	r2, [r7, #8]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	3301      	adds	r3, #1
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	429a      	cmp	r2, r3
 800324c:	dbf1      	blt.n	8003232 <_write+0x12>
  }
  return len;
 800324e:	687b      	ldr	r3, [r7, #4]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <_close>:

int _close(int file)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003260:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr

0800326e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800327e:	605a      	str	r2, [r3, #4]
  return 0;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <_isatty>:

int _isatty(int file)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003294:	2301      	movs	r3, #1
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr

080032b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032c0:	4a14      	ldr	r2, [pc, #80]	; (8003314 <_sbrk+0x5c>)
 80032c2:	4b15      	ldr	r3, [pc, #84]	; (8003318 <_sbrk+0x60>)
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032cc:	4b13      	ldr	r3, [pc, #76]	; (800331c <_sbrk+0x64>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d102      	bne.n	80032da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032d4:	4b11      	ldr	r3, [pc, #68]	; (800331c <_sbrk+0x64>)
 80032d6:	4a12      	ldr	r2, [pc, #72]	; (8003320 <_sbrk+0x68>)
 80032d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032da:	4b10      	ldr	r3, [pc, #64]	; (800331c <_sbrk+0x64>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d207      	bcs.n	80032f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032e8:	f003 f9e0 	bl	80066ac <__errno>
 80032ec:	4603      	mov	r3, r0
 80032ee:	220c      	movs	r2, #12
 80032f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032f2:	f04f 33ff 	mov.w	r3, #4294967295
 80032f6:	e009      	b.n	800330c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032f8:	4b08      	ldr	r3, [pc, #32]	; (800331c <_sbrk+0x64>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032fe:	4b07      	ldr	r3, [pc, #28]	; (800331c <_sbrk+0x64>)
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4413      	add	r3, r2
 8003306:	4a05      	ldr	r2, [pc, #20]	; (800331c <_sbrk+0x64>)
 8003308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800330a:	68fb      	ldr	r3, [r7, #12]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20005000 	.word	0x20005000
 8003318:	00000400 	.word	0x00000400
 800331c:	2000044c 	.word	0x2000044c
 8003320:	20000468 	.word	0x20000468

08003324 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003330:	480c      	ldr	r0, [pc, #48]	; (8003364 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003332:	490d      	ldr	r1, [pc, #52]	; (8003368 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003334:	4a0d      	ldr	r2, [pc, #52]	; (800336c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003338:	e002      	b.n	8003340 <LoopCopyDataInit>

0800333a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800333a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800333c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800333e:	3304      	adds	r3, #4

08003340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003344:	d3f9      	bcc.n	800333a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003346:	4a0a      	ldr	r2, [pc, #40]	; (8003370 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003348:	4c0a      	ldr	r4, [pc, #40]	; (8003374 <LoopFillZerobss+0x22>)
  movs r3, #0
 800334a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800334c:	e001      	b.n	8003352 <LoopFillZerobss>

0800334e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800334e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003350:	3204      	adds	r2, #4

08003352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003354:	d3fb      	bcc.n	800334e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003356:	f7ff ffe5 	bl	8003324 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800335a:	f003 f9ad 	bl	80066b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800335e:	f7fe f9a7 	bl	80016b0 <main>
  bx lr
 8003362:	4770      	bx	lr
  ldr r0, =_sdata
 8003364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003368:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 800336c:	0800b8b0 	.word	0x0800b8b0
  ldr r2, =_sbss
 8003370:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003374:	20000464 	.word	0x20000464

08003378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003378:	e7fe      	b.n	8003378 <ADC1_2_IRQHandler>
	...

0800337c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003380:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <HAL_Init+0x28>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a07      	ldr	r2, [pc, #28]	; (80033a4 <HAL_Init+0x28>)
 8003386:	f043 0310 	orr.w	r3, r3, #16
 800338a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800338c:	2003      	movs	r0, #3
 800338e:	f000 f947 	bl	8003620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003392:	200f      	movs	r0, #15
 8003394:	f000 f808 	bl	80033a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003398:	f7ff fd74 	bl	8002e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40022000 	.word	0x40022000

080033a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033b0:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_InitTick+0x54>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4b12      	ldr	r3, [pc, #72]	; (8003400 <HAL_InitTick+0x58>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	4619      	mov	r1, r3
 80033ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033be:	fbb3 f3f1 	udiv	r3, r3, r1
 80033c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f95f 	bl	800368a <HAL_SYSTICK_Config>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e00e      	b.n	80033f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b0f      	cmp	r3, #15
 80033da:	d80a      	bhi.n	80033f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033dc:	2200      	movs	r2, #0
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	f04f 30ff 	mov.w	r0, #4294967295
 80033e4:	f000 f927 	bl	8003636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033e8:	4a06      	ldr	r2, [pc, #24]	; (8003404 <HAL_InitTick+0x5c>)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	e000      	b.n	80033f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	2000003c 	.word	0x2000003c
 8003400:	20000044 	.word	0x20000044
 8003404:	20000040 	.word	0x20000040

08003408 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800340c:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_IncTick+0x1c>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	4b05      	ldr	r3, [pc, #20]	; (8003428 <HAL_IncTick+0x20>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4413      	add	r3, r2
 8003418:	4a03      	ldr	r2, [pc, #12]	; (8003428 <HAL_IncTick+0x20>)
 800341a:	6013      	str	r3, [r2, #0]
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr
 8003424:	20000044 	.word	0x20000044
 8003428:	20000450 	.word	0x20000450

0800342c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  return uwTick;
 8003430:	4b02      	ldr	r3, [pc, #8]	; (800343c <HAL_GetTick+0x10>)
 8003432:	681b      	ldr	r3, [r3, #0]
}
 8003434:	4618      	mov	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr
 800343c:	20000450 	.word	0x20000450

08003440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003448:	f7ff fff0 	bl	800342c <HAL_GetTick>
 800344c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d005      	beq.n	8003466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <HAL_Delay+0x44>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4413      	add	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003466:	bf00      	nop
 8003468:	f7ff ffe0 	bl	800342c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	429a      	cmp	r2, r3
 8003476:	d8f7      	bhi.n	8003468 <HAL_Delay+0x28>
  {
  }
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000044 	.word	0x20000044

08003488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <__NVIC_SetPriorityGrouping+0x44>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034a4:	4013      	ands	r3, r2
 80034a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ba:	4a04      	ldr	r2, [pc, #16]	; (80034cc <__NVIC_SetPriorityGrouping+0x44>)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	60d3      	str	r3, [r2, #12]
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <__NVIC_GetPriorityGrouping+0x18>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	0a1b      	lsrs	r3, r3, #8
 80034da:	f003 0307 	and.w	r3, r3, #7
}
 80034de:	4618      	mov	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	db0b      	blt.n	8003516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	f003 021f 	and.w	r2, r3, #31
 8003504:	4906      	ldr	r1, [pc, #24]	; (8003520 <__NVIC_EnableIRQ+0x34>)
 8003506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	2001      	movs	r0, #1
 800350e:	fa00 f202 	lsl.w	r2, r0, r2
 8003512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr
 8003520:	e000e100 	.word	0xe000e100

08003524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	6039      	str	r1, [r7, #0]
 800352e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	2b00      	cmp	r3, #0
 8003536:	db0a      	blt.n	800354e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	490c      	ldr	r1, [pc, #48]	; (8003570 <__NVIC_SetPriority+0x4c>)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	0112      	lsls	r2, r2, #4
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	440b      	add	r3, r1
 8003548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800354c:	e00a      	b.n	8003564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	b2da      	uxtb	r2, r3
 8003552:	4908      	ldr	r1, [pc, #32]	; (8003574 <__NVIC_SetPriority+0x50>)
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	3b04      	subs	r3, #4
 800355c:	0112      	lsls	r2, r2, #4
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	440b      	add	r3, r1
 8003562:	761a      	strb	r2, [r3, #24]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	e000e100 	.word	0xe000e100
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	; 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f1c3 0307 	rsb	r3, r3, #7
 8003592:	2b04      	cmp	r3, #4
 8003594:	bf28      	it	cs
 8003596:	2304      	movcs	r3, #4
 8003598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3304      	adds	r3, #4
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d902      	bls.n	80035a8 <NVIC_EncodePriority+0x30>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3b03      	subs	r3, #3
 80035a6:	e000      	b.n	80035aa <NVIC_EncodePriority+0x32>
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ac:	f04f 32ff 	mov.w	r2, #4294967295
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43da      	mvns	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	401a      	ands	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c0:	f04f 31ff 	mov.w	r1, #4294967295
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	43d9      	mvns	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	4313      	orrs	r3, r2
         );
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3724      	adds	r7, #36	; 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr

080035dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035ec:	d301      	bcc.n	80035f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035ee:	2301      	movs	r3, #1
 80035f0:	e00f      	b.n	8003612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035f2:	4a0a      	ldr	r2, [pc, #40]	; (800361c <SysTick_Config+0x40>)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035fa:	210f      	movs	r1, #15
 80035fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003600:	f7ff ff90 	bl	8003524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <SysTick_Config+0x40>)
 8003606:	2200      	movs	r2, #0
 8003608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800360a:	4b04      	ldr	r3, [pc, #16]	; (800361c <SysTick_Config+0x40>)
 800360c:	2207      	movs	r2, #7
 800360e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	e000e010 	.word	0xe000e010

08003620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff ff2d 	bl	8003488 <__NVIC_SetPriorityGrouping>
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003636:	b580      	push	{r7, lr}
 8003638:	b086      	sub	sp, #24
 800363a:	af00      	add	r7, sp, #0
 800363c:	4603      	mov	r3, r0
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003648:	f7ff ff42 	bl	80034d0 <__NVIC_GetPriorityGrouping>
 800364c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	6978      	ldr	r0, [r7, #20]
 8003654:	f7ff ff90 	bl	8003578 <NVIC_EncodePriority>
 8003658:	4602      	mov	r2, r0
 800365a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff ff5f 	bl	8003524 <__NVIC_SetPriority>
}
 8003666:	bf00      	nop
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	4603      	mov	r3, r0
 8003676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ff35 	bl	80034ec <__NVIC_EnableIRQ>
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff ffa2 	bl	80035dc <SysTick_Config>
 8003698:	4603      	mov	r3, r0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b08b      	sub	sp, #44	; 0x2c
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036ae:	2300      	movs	r3, #0
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036b2:	2300      	movs	r3, #0
 80036b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036b6:	e169      	b.n	800398c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036b8:	2201      	movs	r2, #1
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	f040 8158 	bne.w	8003986 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4a9a      	ldr	r2, [pc, #616]	; (8003944 <HAL_GPIO_Init+0x2a0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d05e      	beq.n	800379e <HAL_GPIO_Init+0xfa>
 80036e0:	4a98      	ldr	r2, [pc, #608]	; (8003944 <HAL_GPIO_Init+0x2a0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d875      	bhi.n	80037d2 <HAL_GPIO_Init+0x12e>
 80036e6:	4a98      	ldr	r2, [pc, #608]	; (8003948 <HAL_GPIO_Init+0x2a4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d058      	beq.n	800379e <HAL_GPIO_Init+0xfa>
 80036ec:	4a96      	ldr	r2, [pc, #600]	; (8003948 <HAL_GPIO_Init+0x2a4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d86f      	bhi.n	80037d2 <HAL_GPIO_Init+0x12e>
 80036f2:	4a96      	ldr	r2, [pc, #600]	; (800394c <HAL_GPIO_Init+0x2a8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d052      	beq.n	800379e <HAL_GPIO_Init+0xfa>
 80036f8:	4a94      	ldr	r2, [pc, #592]	; (800394c <HAL_GPIO_Init+0x2a8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d869      	bhi.n	80037d2 <HAL_GPIO_Init+0x12e>
 80036fe:	4a94      	ldr	r2, [pc, #592]	; (8003950 <HAL_GPIO_Init+0x2ac>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d04c      	beq.n	800379e <HAL_GPIO_Init+0xfa>
 8003704:	4a92      	ldr	r2, [pc, #584]	; (8003950 <HAL_GPIO_Init+0x2ac>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d863      	bhi.n	80037d2 <HAL_GPIO_Init+0x12e>
 800370a:	4a92      	ldr	r2, [pc, #584]	; (8003954 <HAL_GPIO_Init+0x2b0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d046      	beq.n	800379e <HAL_GPIO_Init+0xfa>
 8003710:	4a90      	ldr	r2, [pc, #576]	; (8003954 <HAL_GPIO_Init+0x2b0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d85d      	bhi.n	80037d2 <HAL_GPIO_Init+0x12e>
 8003716:	2b12      	cmp	r3, #18
 8003718:	d82a      	bhi.n	8003770 <HAL_GPIO_Init+0xcc>
 800371a:	2b12      	cmp	r3, #18
 800371c:	d859      	bhi.n	80037d2 <HAL_GPIO_Init+0x12e>
 800371e:	a201      	add	r2, pc, #4	; (adr r2, 8003724 <HAL_GPIO_Init+0x80>)
 8003720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003724:	0800379f 	.word	0x0800379f
 8003728:	08003779 	.word	0x08003779
 800372c:	0800378b 	.word	0x0800378b
 8003730:	080037cd 	.word	0x080037cd
 8003734:	080037d3 	.word	0x080037d3
 8003738:	080037d3 	.word	0x080037d3
 800373c:	080037d3 	.word	0x080037d3
 8003740:	080037d3 	.word	0x080037d3
 8003744:	080037d3 	.word	0x080037d3
 8003748:	080037d3 	.word	0x080037d3
 800374c:	080037d3 	.word	0x080037d3
 8003750:	080037d3 	.word	0x080037d3
 8003754:	080037d3 	.word	0x080037d3
 8003758:	080037d3 	.word	0x080037d3
 800375c:	080037d3 	.word	0x080037d3
 8003760:	080037d3 	.word	0x080037d3
 8003764:	080037d3 	.word	0x080037d3
 8003768:	08003781 	.word	0x08003781
 800376c:	08003795 	.word	0x08003795
 8003770:	4a79      	ldr	r2, [pc, #484]	; (8003958 <HAL_GPIO_Init+0x2b4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003776:	e02c      	b.n	80037d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	623b      	str	r3, [r7, #32]
          break;
 800377e:	e029      	b.n	80037d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	3304      	adds	r3, #4
 8003786:	623b      	str	r3, [r7, #32]
          break;
 8003788:	e024      	b.n	80037d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	3308      	adds	r3, #8
 8003790:	623b      	str	r3, [r7, #32]
          break;
 8003792:	e01f      	b.n	80037d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	330c      	adds	r3, #12
 800379a:	623b      	str	r3, [r7, #32]
          break;
 800379c:	e01a      	b.n	80037d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d102      	bne.n	80037ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037a6:	2304      	movs	r3, #4
 80037a8:	623b      	str	r3, [r7, #32]
          break;
 80037aa:	e013      	b.n	80037d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d105      	bne.n	80037c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037b4:	2308      	movs	r3, #8
 80037b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	611a      	str	r2, [r3, #16]
          break;
 80037be:	e009      	b.n	80037d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037c0:	2308      	movs	r3, #8
 80037c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	615a      	str	r2, [r3, #20]
          break;
 80037ca:	e003      	b.n	80037d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80037cc:	2300      	movs	r3, #0
 80037ce:	623b      	str	r3, [r7, #32]
          break;
 80037d0:	e000      	b.n	80037d4 <HAL_GPIO_Init+0x130>
          break;
 80037d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2bff      	cmp	r3, #255	; 0xff
 80037d8:	d801      	bhi.n	80037de <HAL_GPIO_Init+0x13a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	e001      	b.n	80037e2 <HAL_GPIO_Init+0x13e>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3304      	adds	r3, #4
 80037e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	2bff      	cmp	r3, #255	; 0xff
 80037e8:	d802      	bhi.n	80037f0 <HAL_GPIO_Init+0x14c>
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	e002      	b.n	80037f6 <HAL_GPIO_Init+0x152>
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	3b08      	subs	r3, #8
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	210f      	movs	r1, #15
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	fa01 f303 	lsl.w	r3, r1, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	401a      	ands	r2, r3
 8003808:	6a39      	ldr	r1, [r7, #32]
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	fa01 f303 	lsl.w	r3, r1, r3
 8003810:	431a      	orrs	r2, r3
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80b1 	beq.w	8003986 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003824:	4b4d      	ldr	r3, [pc, #308]	; (800395c <HAL_GPIO_Init+0x2b8>)
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	4a4c      	ldr	r2, [pc, #304]	; (800395c <HAL_GPIO_Init+0x2b8>)
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	6193      	str	r3, [r2, #24]
 8003830:	4b4a      	ldr	r3, [pc, #296]	; (800395c <HAL_GPIO_Init+0x2b8>)
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800383c:	4a48      	ldr	r2, [pc, #288]	; (8003960 <HAL_GPIO_Init+0x2bc>)
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	089b      	lsrs	r3, r3, #2
 8003842:	3302      	adds	r3, #2
 8003844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003848:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	f003 0303 	and.w	r3, r3, #3
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	220f      	movs	r2, #15
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	43db      	mvns	r3, r3
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4013      	ands	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a40      	ldr	r2, [pc, #256]	; (8003964 <HAL_GPIO_Init+0x2c0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d013      	beq.n	8003890 <HAL_GPIO_Init+0x1ec>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a3f      	ldr	r2, [pc, #252]	; (8003968 <HAL_GPIO_Init+0x2c4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00d      	beq.n	800388c <HAL_GPIO_Init+0x1e8>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a3e      	ldr	r2, [pc, #248]	; (800396c <HAL_GPIO_Init+0x2c8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d007      	beq.n	8003888 <HAL_GPIO_Init+0x1e4>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a3d      	ldr	r2, [pc, #244]	; (8003970 <HAL_GPIO_Init+0x2cc>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d101      	bne.n	8003884 <HAL_GPIO_Init+0x1e0>
 8003880:	2303      	movs	r3, #3
 8003882:	e006      	b.n	8003892 <HAL_GPIO_Init+0x1ee>
 8003884:	2304      	movs	r3, #4
 8003886:	e004      	b.n	8003892 <HAL_GPIO_Init+0x1ee>
 8003888:	2302      	movs	r3, #2
 800388a:	e002      	b.n	8003892 <HAL_GPIO_Init+0x1ee>
 800388c:	2301      	movs	r3, #1
 800388e:	e000      	b.n	8003892 <HAL_GPIO_Init+0x1ee>
 8003890:	2300      	movs	r3, #0
 8003892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003894:	f002 0203 	and.w	r2, r2, #3
 8003898:	0092      	lsls	r2, r2, #2
 800389a:	4093      	lsls	r3, r2
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038a2:	492f      	ldr	r1, [pc, #188]	; (8003960 <HAL_GPIO_Init+0x2bc>)
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	089b      	lsrs	r3, r3, #2
 80038a8:	3302      	adds	r3, #2
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d006      	beq.n	80038ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80038bc:	4b2d      	ldr	r3, [pc, #180]	; (8003974 <HAL_GPIO_Init+0x2d0>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	492c      	ldr	r1, [pc, #176]	; (8003974 <HAL_GPIO_Init+0x2d0>)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]
 80038c8:	e006      	b.n	80038d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038ca:	4b2a      	ldr	r3, [pc, #168]	; (8003974 <HAL_GPIO_Init+0x2d0>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	4928      	ldr	r1, [pc, #160]	; (8003974 <HAL_GPIO_Init+0x2d0>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d006      	beq.n	80038f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80038e4:	4b23      	ldr	r3, [pc, #140]	; (8003974 <HAL_GPIO_Init+0x2d0>)
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	4922      	ldr	r1, [pc, #136]	; (8003974 <HAL_GPIO_Init+0x2d0>)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]
 80038f0:	e006      	b.n	8003900 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80038f2:	4b20      	ldr	r3, [pc, #128]	; (8003974 <HAL_GPIO_Init+0x2d0>)
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	43db      	mvns	r3, r3
 80038fa:	491e      	ldr	r1, [pc, #120]	; (8003974 <HAL_GPIO_Init+0x2d0>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d006      	beq.n	800391a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800390c:	4b19      	ldr	r3, [pc, #100]	; (8003974 <HAL_GPIO_Init+0x2d0>)
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	4918      	ldr	r1, [pc, #96]	; (8003974 <HAL_GPIO_Init+0x2d0>)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	4313      	orrs	r3, r2
 8003916:	608b      	str	r3, [r1, #8]
 8003918:	e006      	b.n	8003928 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800391a:	4b16      	ldr	r3, [pc, #88]	; (8003974 <HAL_GPIO_Init+0x2d0>)
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	43db      	mvns	r3, r3
 8003922:	4914      	ldr	r1, [pc, #80]	; (8003974 <HAL_GPIO_Init+0x2d0>)
 8003924:	4013      	ands	r3, r2
 8003926:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d021      	beq.n	8003978 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003934:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <HAL_GPIO_Init+0x2d0>)
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	490e      	ldr	r1, [pc, #56]	; (8003974 <HAL_GPIO_Init+0x2d0>)
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	4313      	orrs	r3, r2
 800393e:	60cb      	str	r3, [r1, #12]
 8003940:	e021      	b.n	8003986 <HAL_GPIO_Init+0x2e2>
 8003942:	bf00      	nop
 8003944:	10320000 	.word	0x10320000
 8003948:	10310000 	.word	0x10310000
 800394c:	10220000 	.word	0x10220000
 8003950:	10210000 	.word	0x10210000
 8003954:	10120000 	.word	0x10120000
 8003958:	10110000 	.word	0x10110000
 800395c:	40021000 	.word	0x40021000
 8003960:	40010000 	.word	0x40010000
 8003964:	40010800 	.word	0x40010800
 8003968:	40010c00 	.word	0x40010c00
 800396c:	40011000 	.word	0x40011000
 8003970:	40011400 	.word	0x40011400
 8003974:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <HAL_GPIO_Init+0x304>)
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	43db      	mvns	r3, r3
 8003980:	4909      	ldr	r1, [pc, #36]	; (80039a8 <HAL_GPIO_Init+0x304>)
 8003982:	4013      	ands	r3, r2
 8003984:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	3301      	adds	r3, #1
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	fa22 f303 	lsr.w	r3, r2, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	f47f ae8e 	bne.w	80036b8 <HAL_GPIO_Init+0x14>
  }
}
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	372c      	adds	r7, #44	; 0x2c
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr
 80039a8:	40010400 	.word	0x40010400

080039ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	807b      	strh	r3, [r7, #2]
 80039b8:	4613      	mov	r3, r2
 80039ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039bc:	787b      	ldrb	r3, [r7, #1]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039c2:	887a      	ldrh	r2, [r7, #2]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80039c8:	e003      	b.n	80039d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039ca:	887b      	ldrh	r3, [r7, #2]
 80039cc:	041a      	lsls	r2, r3, #16
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	611a      	str	r2, [r3, #16]
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr

080039dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039ee:	887a      	ldrh	r2, [r7, #2]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4013      	ands	r3, r2
 80039f4:	041a      	lsls	r2, r3, #16
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	43d9      	mvns	r1, r3
 80039fa:	887b      	ldrh	r3, [r7, #2]
 80039fc:	400b      	ands	r3, r1
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	611a      	str	r2, [r3, #16]
}
 8003a04:	bf00      	nop
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr
	...

08003a10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e12b      	b.n	8003c7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff fa56 	bl	8002ee8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2224      	movs	r2, #36	; 0x24
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0201 	bic.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a74:	f001 fba0 	bl	80051b8 <HAL_RCC_GetPCLK1Freq>
 8003a78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	4a81      	ldr	r2, [pc, #516]	; (8003c84 <HAL_I2C_Init+0x274>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d807      	bhi.n	8003a94 <HAL_I2C_Init+0x84>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4a80      	ldr	r2, [pc, #512]	; (8003c88 <HAL_I2C_Init+0x278>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	bf94      	ite	ls
 8003a8c:	2301      	movls	r3, #1
 8003a8e:	2300      	movhi	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	e006      	b.n	8003aa2 <HAL_I2C_Init+0x92>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4a7d      	ldr	r2, [pc, #500]	; (8003c8c <HAL_I2C_Init+0x27c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	bf94      	ite	ls
 8003a9c:	2301      	movls	r3, #1
 8003a9e:	2300      	movhi	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e0e7      	b.n	8003c7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4a78      	ldr	r2, [pc, #480]	; (8003c90 <HAL_I2C_Init+0x280>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	0c9b      	lsrs	r3, r3, #18
 8003ab4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	4a6a      	ldr	r2, [pc, #424]	; (8003c84 <HAL_I2C_Init+0x274>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d802      	bhi.n	8003ae4 <HAL_I2C_Init+0xd4>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	e009      	b.n	8003af8 <HAL_I2C_Init+0xe8>
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	4a69      	ldr	r2, [pc, #420]	; (8003c94 <HAL_I2C_Init+0x284>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	099b      	lsrs	r3, r3, #6
 8003af6:	3301      	adds	r3, #1
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	430b      	orrs	r3, r1
 8003afe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	495c      	ldr	r1, [pc, #368]	; (8003c84 <HAL_I2C_Init+0x274>)
 8003b14:	428b      	cmp	r3, r1
 8003b16:	d819      	bhi.n	8003b4c <HAL_I2C_Init+0x13c>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1e59      	subs	r1, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b26:	1c59      	adds	r1, r3, #1
 8003b28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b2c:	400b      	ands	r3, r1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_I2C_Init+0x138>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1e59      	subs	r1, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b40:	3301      	adds	r3, #1
 8003b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b46:	e051      	b.n	8003bec <HAL_I2C_Init+0x1dc>
 8003b48:	2304      	movs	r3, #4
 8003b4a:	e04f      	b.n	8003bec <HAL_I2C_Init+0x1dc>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d111      	bne.n	8003b78 <HAL_I2C_Init+0x168>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1e58      	subs	r0, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	440b      	add	r3, r1
 8003b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b66:	3301      	adds	r3, #1
 8003b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	bf0c      	ite	eq
 8003b70:	2301      	moveq	r3, #1
 8003b72:	2300      	movne	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	e012      	b.n	8003b9e <HAL_I2C_Init+0x18e>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1e58      	subs	r0, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6859      	ldr	r1, [r3, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	0099      	lsls	r1, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	bf0c      	ite	eq
 8003b98:	2301      	moveq	r3, #1
 8003b9a:	2300      	movne	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_I2C_Init+0x196>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e022      	b.n	8003bec <HAL_I2C_Init+0x1dc>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10e      	bne.n	8003bcc <HAL_I2C_Init+0x1bc>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1e58      	subs	r0, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6859      	ldr	r1, [r3, #4]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	440b      	add	r3, r1
 8003bbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bca:	e00f      	b.n	8003bec <HAL_I2C_Init+0x1dc>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	1e58      	subs	r0, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	0099      	lsls	r1, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be2:	3301      	adds	r3, #1
 8003be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	6809      	ldr	r1, [r1, #0]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6911      	ldr	r1, [r2, #16]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68d2      	ldr	r2, [r2, #12]
 8003c26:	4311      	orrs	r1, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	000186a0 	.word	0x000186a0
 8003c88:	001e847f 	.word	0x001e847f
 8003c8c:	003d08ff 	.word	0x003d08ff
 8003c90:	431bde83 	.word	0x431bde83
 8003c94:	10624dd3 	.word	0x10624dd3

08003c98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	817b      	strh	r3, [r7, #10]
 8003caa:	460b      	mov	r3, r1
 8003cac:	813b      	strh	r3, [r7, #8]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cb2:	f7ff fbbb 	bl	800342c <HAL_GetTick>
 8003cb6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	f040 80d9 	bne.w	8003e78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	2319      	movs	r3, #25
 8003ccc:	2201      	movs	r2, #1
 8003cce:	496d      	ldr	r1, [pc, #436]	; (8003e84 <HAL_I2C_Mem_Write+0x1ec>)
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fcc1 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e0cc      	b.n	8003e7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d101      	bne.n	8003cee <HAL_I2C_Mem_Write+0x56>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e0c5      	b.n	8003e7a <HAL_I2C_Mem_Write+0x1e2>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d007      	beq.n	8003d14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2221      	movs	r2, #33	; 0x21
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2240      	movs	r2, #64	; 0x40
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a3a      	ldr	r2, [r7, #32]
 8003d3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4a4d      	ldr	r2, [pc, #308]	; (8003e88 <HAL_I2C_Mem_Write+0x1f0>)
 8003d54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d56:	88f8      	ldrh	r0, [r7, #6]
 8003d58:	893a      	ldrh	r2, [r7, #8]
 8003d5a:	8979      	ldrh	r1, [r7, #10]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	9301      	str	r3, [sp, #4]
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	4603      	mov	r3, r0
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 faf8 	bl	800435c <I2C_RequestMemoryWrite>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d052      	beq.n	8003e18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e081      	b.n	8003e7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 fd42 	bl	8004804 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00d      	beq.n	8003da2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d107      	bne.n	8003d9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e06b      	b.n	8003e7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	781a      	ldrb	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d11b      	bne.n	8003e18 <HAL_I2C_Mem_Write+0x180>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d017      	beq.n	8003e18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	781a      	ldrb	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1aa      	bne.n	8003d76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 fd2e 	bl	8004886 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00d      	beq.n	8003e4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d107      	bne.n	8003e48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e016      	b.n	8003e7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e000      	b.n	8003e7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
  }
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	00100002 	.word	0x00100002
 8003e88:	ffff0000 	.word	0xffff0000

08003e8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08c      	sub	sp, #48	; 0x30
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	4608      	mov	r0, r1
 8003e96:	4611      	mov	r1, r2
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	817b      	strh	r3, [r7, #10]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	813b      	strh	r3, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eaa:	f7ff fabf 	bl	800342c <HAL_GetTick>
 8003eae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	f040 8244 	bne.w	8004346 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	2319      	movs	r3, #25
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	4982      	ldr	r1, [pc, #520]	; (80040d0 <HAL_I2C_Mem_Read+0x244>)
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 fbc5 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e237      	b.n	8004348 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2C_Mem_Read+0x5a>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e230      	b.n	8004348 <HAL_I2C_Mem_Read+0x4bc>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d007      	beq.n	8003f0c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2222      	movs	r2, #34	; 0x22
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2240      	movs	r2, #64	; 0x40
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4a62      	ldr	r2, [pc, #392]	; (80040d4 <HAL_I2C_Mem_Read+0x248>)
 8003f4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f4e:	88f8      	ldrh	r0, [r7, #6]
 8003f50:	893a      	ldrh	r2, [r7, #8]
 8003f52:	8979      	ldrh	r1, [r7, #10]
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 fa92 	bl	8004488 <I2C_RequestMemoryRead>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e1ec      	b.n	8004348 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d113      	bne.n	8003f9e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	61fb      	str	r3, [r7, #28]
 8003f8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	e1c0      	b.n	8004320 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d11e      	bne.n	8003fe4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fb6:	b672      	cpsid	i
}
 8003fb8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	61bb      	str	r3, [r7, #24]
 8003fce:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003fe0:	b662      	cpsie	i
}
 8003fe2:	e035      	b.n	8004050 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d11e      	bne.n	800402a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ffa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ffc:	b672      	cpsid	i
}
 8003ffe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004000:	2300      	movs	r3, #0
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004024:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004026:	b662      	cpsie	i
}
 8004028:	e012      	b.n	8004050 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004038:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403a:	2300      	movs	r3, #0
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004050:	e166      	b.n	8004320 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004056:	2b03      	cmp	r3, #3
 8004058:	f200 811f 	bhi.w	800429a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004060:	2b01      	cmp	r3, #1
 8004062:	d123      	bne.n	80040ac <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004066:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 fc4d 	bl	8004908 <I2C_WaitOnRXNEFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e167      	b.n	8004348 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040aa:	e139      	b.n	8004320 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d152      	bne.n	800415a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ba:	2200      	movs	r2, #0
 80040bc:	4906      	ldr	r1, [pc, #24]	; (80040d8 <HAL_I2C_Mem_Read+0x24c>)
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 faca 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d008      	beq.n	80040dc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e13c      	b.n	8004348 <HAL_I2C_Mem_Read+0x4bc>
 80040ce:	bf00      	nop
 80040d0:	00100002 	.word	0x00100002
 80040d4:	ffff0000 	.word	0xffff0000
 80040d8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80040dc:	b672      	cpsid	i
}
 80040de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004122:	b662      	cpsie	i
}
 8004124:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004158:	e0e2      	b.n	8004320 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004160:	2200      	movs	r2, #0
 8004162:	497b      	ldr	r1, [pc, #492]	; (8004350 <HAL_I2C_Mem_Read+0x4c4>)
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 fa77 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0e9      	b.n	8004348 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004182:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004184:	b672      	cpsid	i
}
 8004186:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80041ba:	4b66      	ldr	r3, [pc, #408]	; (8004354 <HAL_I2C_Mem_Read+0x4c8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	08db      	lsrs	r3, r3, #3
 80041c0:	4a65      	ldr	r2, [pc, #404]	; (8004358 <HAL_I2C_Mem_Read+0x4cc>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	0a1a      	lsrs	r2, r3, #8
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	00da      	lsls	r2, r3, #3
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d118      	bne.n	8004212 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f043 0220 	orr.w	r2, r3, #32
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004202:	b662      	cpsie	i
}
 8004204:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e09a      	b.n	8004348 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b04      	cmp	r3, #4
 800421e:	d1d9      	bne.n	80041d4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004258:	b29b      	uxth	r3, r3
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004262:	b662      	cpsie	i
}
 8004264:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004298:	e042      	b.n	8004320 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800429a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 fb32 	bl	8004908 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e04c      	b.n	8004348 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d118      	bne.n	8004320 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004316:	b29b      	uxth	r3, r3
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004324:	2b00      	cmp	r3, #0
 8004326:	f47f ae94 	bne.w	8004052 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	e000      	b.n	8004348 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004346:	2302      	movs	r3, #2
  }
}
 8004348:	4618      	mov	r0, r3
 800434a:	3728      	adds	r7, #40	; 0x28
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	00010004 	.word	0x00010004
 8004354:	2000003c 	.word	0x2000003c
 8004358:	14f8b589 	.word	0x14f8b589

0800435c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	4608      	mov	r0, r1
 8004366:	4611      	mov	r1, r2
 8004368:	461a      	mov	r2, r3
 800436a:	4603      	mov	r3, r0
 800436c:	817b      	strh	r3, [r7, #10]
 800436e:	460b      	mov	r3, r1
 8004370:	813b      	strh	r3, [r7, #8]
 8004372:	4613      	mov	r3, r2
 8004374:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004384:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	2200      	movs	r2, #0
 800438e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f960 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00d      	beq.n	80043ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ac:	d103      	bne.n	80043b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e05f      	b.n	800447a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043ba:	897b      	ldrh	r3, [r7, #10]
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	461a      	mov	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	6a3a      	ldr	r2, [r7, #32]
 80043ce:	492d      	ldr	r1, [pc, #180]	; (8004484 <I2C_RequestMemoryWrite+0x128>)
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f998 	bl	8004706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e04c      	b.n	800447a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f8:	6a39      	ldr	r1, [r7, #32]
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fa02 	bl	8004804 <I2C_WaitOnTXEFlagUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00d      	beq.n	8004422 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	2b04      	cmp	r3, #4
 800440c:	d107      	bne.n	800441e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800441c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e02b      	b.n	800447a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d105      	bne.n	8004434 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004428:	893b      	ldrh	r3, [r7, #8]
 800442a:	b2da      	uxtb	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	611a      	str	r2, [r3, #16]
 8004432:	e021      	b.n	8004478 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004434:	893b      	ldrh	r3, [r7, #8]
 8004436:	0a1b      	lsrs	r3, r3, #8
 8004438:	b29b      	uxth	r3, r3
 800443a:	b2da      	uxtb	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004444:	6a39      	ldr	r1, [r7, #32]
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 f9dc 	bl	8004804 <I2C_WaitOnTXEFlagUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00d      	beq.n	800446e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	2b04      	cmp	r3, #4
 8004458:	d107      	bne.n	800446a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004468:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e005      	b.n	800447a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800446e:	893b      	ldrh	r3, [r7, #8]
 8004470:	b2da      	uxtb	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	00010002 	.word	0x00010002

08004488 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af02      	add	r7, sp, #8
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	4608      	mov	r0, r1
 8004492:	4611      	mov	r1, r2
 8004494:	461a      	mov	r2, r3
 8004496:	4603      	mov	r3, r0
 8004498:	817b      	strh	r3, [r7, #10]
 800449a:	460b      	mov	r3, r1
 800449c:	813b      	strh	r3, [r7, #8]
 800449e:	4613      	mov	r3, r2
 80044a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 f8c2 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00d      	beq.n	80044f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e8:	d103      	bne.n	80044f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e0aa      	b.n	800464c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044f6:	897b      	ldrh	r3, [r7, #10]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004504:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	6a3a      	ldr	r2, [r7, #32]
 800450a:	4952      	ldr	r1, [pc, #328]	; (8004654 <I2C_RequestMemoryRead+0x1cc>)
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f8fa 	bl	8004706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e097      	b.n	800464c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451c:	2300      	movs	r3, #0
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004534:	6a39      	ldr	r1, [r7, #32]
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f964 	bl	8004804 <I2C_WaitOnTXEFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00d      	beq.n	800455e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	2b04      	cmp	r3, #4
 8004548:	d107      	bne.n	800455a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004558:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e076      	b.n	800464c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800455e:	88fb      	ldrh	r3, [r7, #6]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d105      	bne.n	8004570 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004564:	893b      	ldrh	r3, [r7, #8]
 8004566:	b2da      	uxtb	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	611a      	str	r2, [r3, #16]
 800456e:	e021      	b.n	80045b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004570:	893b      	ldrh	r3, [r7, #8]
 8004572:	0a1b      	lsrs	r3, r3, #8
 8004574:	b29b      	uxth	r3, r3
 8004576:	b2da      	uxtb	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800457e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004580:	6a39      	ldr	r1, [r7, #32]
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 f93e 	bl	8004804 <I2C_WaitOnTXEFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00d      	beq.n	80045aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	2b04      	cmp	r3, #4
 8004594:	d107      	bne.n	80045a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e050      	b.n	800464c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045aa:	893b      	ldrh	r3, [r7, #8]
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b6:	6a39      	ldr	r1, [r7, #32]
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f923 	bl	8004804 <I2C_WaitOnTXEFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00d      	beq.n	80045e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d107      	bne.n	80045dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e035      	b.n	800464c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 f82b 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00d      	beq.n	8004624 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004616:	d103      	bne.n	8004620 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e013      	b.n	800464c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004624:	897b      	ldrh	r3, [r7, #10]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	b2da      	uxtb	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	6a3a      	ldr	r2, [r7, #32]
 8004638:	4906      	ldr	r1, [pc, #24]	; (8004654 <I2C_RequestMemoryRead+0x1cc>)
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 f863 	bl	8004706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	00010002 	.word	0x00010002

08004658 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	4613      	mov	r3, r2
 8004666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004668:	e025      	b.n	80046b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004670:	d021      	beq.n	80046b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004672:	f7fe fedb 	bl	800342c <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d302      	bcc.n	8004688 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d116      	bne.n	80046b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e023      	b.n	80046fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	0c1b      	lsrs	r3, r3, #16
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d10d      	bne.n	80046dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	43da      	mvns	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4013      	ands	r3, r2
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bf0c      	ite	eq
 80046d2:	2301      	moveq	r3, #1
 80046d4:	2300      	movne	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	e00c      	b.n	80046f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	43da      	mvns	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4013      	ands	r3, r2
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	bf0c      	ite	eq
 80046ee:	2301      	moveq	r3, #1
 80046f0:	2300      	movne	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d0b6      	beq.n	800466a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b084      	sub	sp, #16
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	607a      	str	r2, [r7, #4]
 8004712:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004714:	e051      	b.n	80047ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004724:	d123      	bne.n	800476e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004734:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800473e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f043 0204 	orr.w	r2, r3, #4
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e046      	b.n	80047fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d021      	beq.n	80047ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004776:	f7fe fe59 	bl	800342c <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	429a      	cmp	r2, r3
 8004784:	d302      	bcc.n	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d116      	bne.n	80047ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f043 0220 	orr.w	r2, r3, #32
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e020      	b.n	80047fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	0c1b      	lsrs	r3, r3, #16
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d10c      	bne.n	80047de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	43da      	mvns	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4013      	ands	r3, r2
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	bf14      	ite	ne
 80047d6:	2301      	movne	r3, #1
 80047d8:	2300      	moveq	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	e00b      	b.n	80047f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	43da      	mvns	r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	4013      	ands	r3, r2
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	bf14      	ite	ne
 80047f0:	2301      	movne	r3, #1
 80047f2:	2300      	moveq	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d18d      	bne.n	8004716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004810:	e02d      	b.n	800486e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f8ce 	bl	80049b4 <I2C_IsAcknowledgeFailed>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e02d      	b.n	800487e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004828:	d021      	beq.n	800486e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482a:	f7fe fdff 	bl	800342c <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	429a      	cmp	r2, r3
 8004838:	d302      	bcc.n	8004840 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d116      	bne.n	800486e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	f043 0220 	orr.w	r2, r3, #32
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e007      	b.n	800487e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004878:	2b80      	cmp	r3, #128	; 0x80
 800487a:	d1ca      	bne.n	8004812 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b084      	sub	sp, #16
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004892:	e02d      	b.n	80048f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 f88d 	bl	80049b4 <I2C_IsAcknowledgeFailed>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e02d      	b.n	8004900 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048aa:	d021      	beq.n	80048f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ac:	f7fe fdbe 	bl	800342c <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d302      	bcc.n	80048c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d116      	bne.n	80048f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	f043 0220 	orr.w	r2, r3, #32
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e007      	b.n	8004900 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d1ca      	bne.n	8004894 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004914:	e042      	b.n	800499c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	2b10      	cmp	r3, #16
 8004922:	d119      	bne.n	8004958 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0210 	mvn.w	r2, #16
 800492c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e029      	b.n	80049ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004958:	f7fe fd68 	bl	800342c <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	429a      	cmp	r2, r3
 8004966:	d302      	bcc.n	800496e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d116      	bne.n	800499c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	f043 0220 	orr.w	r2, r3, #32
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e007      	b.n	80049ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d1b5      	bne.n	8004916 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ca:	d11b      	bne.n	8004a04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	f043 0204 	orr.w	r2, r3, #4
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr

08004a10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e272      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 8087 	beq.w	8004b3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a30:	4b92      	ldr	r3, [pc, #584]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f003 030c 	and.w	r3, r3, #12
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d00c      	beq.n	8004a56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a3c:	4b8f      	ldr	r3, [pc, #572]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f003 030c 	and.w	r3, r3, #12
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d112      	bne.n	8004a6e <HAL_RCC_OscConfig+0x5e>
 8004a48:	4b8c      	ldr	r3, [pc, #560]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a54:	d10b      	bne.n	8004a6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a56:	4b89      	ldr	r3, [pc, #548]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d06c      	beq.n	8004b3c <HAL_RCC_OscConfig+0x12c>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d168      	bne.n	8004b3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e24c      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a76:	d106      	bne.n	8004a86 <HAL_RCC_OscConfig+0x76>
 8004a78:	4b80      	ldr	r3, [pc, #512]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a7f      	ldr	r2, [pc, #508]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	e02e      	b.n	8004ae4 <HAL_RCC_OscConfig+0xd4>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10c      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x98>
 8004a8e:	4b7b      	ldr	r3, [pc, #492]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a7a      	ldr	r2, [pc, #488]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	4b78      	ldr	r3, [pc, #480]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a77      	ldr	r2, [pc, #476]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	e01d      	b.n	8004ae4 <HAL_RCC_OscConfig+0xd4>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ab0:	d10c      	bne.n	8004acc <HAL_RCC_OscConfig+0xbc>
 8004ab2:	4b72      	ldr	r3, [pc, #456]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a71      	ldr	r2, [pc, #452]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	4b6f      	ldr	r3, [pc, #444]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a6e      	ldr	r2, [pc, #440]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	e00b      	b.n	8004ae4 <HAL_RCC_OscConfig+0xd4>
 8004acc:	4b6b      	ldr	r3, [pc, #428]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a6a      	ldr	r2, [pc, #424]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	4b68      	ldr	r3, [pc, #416]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a67      	ldr	r2, [pc, #412]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ae2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d013      	beq.n	8004b14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aec:	f7fe fc9e 	bl	800342c <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af4:	f7fe fc9a 	bl	800342c <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b64      	cmp	r3, #100	; 0x64
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e200      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b06:	4b5d      	ldr	r3, [pc, #372]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0f0      	beq.n	8004af4 <HAL_RCC_OscConfig+0xe4>
 8004b12:	e014      	b.n	8004b3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b14:	f7fe fc8a 	bl	800342c <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b1c:	f7fe fc86 	bl	800342c <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b64      	cmp	r3, #100	; 0x64
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e1ec      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b2e:	4b53      	ldr	r3, [pc, #332]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1f0      	bne.n	8004b1c <HAL_RCC_OscConfig+0x10c>
 8004b3a:	e000      	b.n	8004b3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d063      	beq.n	8004c12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b4a:	4b4c      	ldr	r3, [pc, #304]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f003 030c 	and.w	r3, r3, #12
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00b      	beq.n	8004b6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b56:	4b49      	ldr	r3, [pc, #292]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f003 030c 	and.w	r3, r3, #12
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d11c      	bne.n	8004b9c <HAL_RCC_OscConfig+0x18c>
 8004b62:	4b46      	ldr	r3, [pc, #280]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d116      	bne.n	8004b9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b6e:	4b43      	ldr	r3, [pc, #268]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d005      	beq.n	8004b86 <HAL_RCC_OscConfig+0x176>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d001      	beq.n	8004b86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e1c0      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b86:	4b3d      	ldr	r3, [pc, #244]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	4939      	ldr	r1, [pc, #228]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b9a:	e03a      	b.n	8004c12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d020      	beq.n	8004be6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ba4:	4b36      	ldr	r3, [pc, #216]	; (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004baa:	f7fe fc3f 	bl	800342c <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb2:	f7fe fc3b 	bl	800342c <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e1a1      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc4:	4b2d      	ldr	r3, [pc, #180]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd0:	4b2a      	ldr	r3, [pc, #168]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	4927      	ldr	r1, [pc, #156]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	600b      	str	r3, [r1, #0]
 8004be4:	e015      	b.n	8004c12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004be6:	4b26      	ldr	r3, [pc, #152]	; (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bec:	f7fe fc1e 	bl	800342c <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf4:	f7fe fc1a 	bl	800342c <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e180      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c06:	4b1d      	ldr	r3, [pc, #116]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f0      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d03a      	beq.n	8004c94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d019      	beq.n	8004c5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c26:	4b17      	ldr	r3, [pc, #92]	; (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c2c:	f7fe fbfe 	bl	800342c <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c34:	f7fe fbfa 	bl	800342c <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e160      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c46:	4b0d      	ldr	r3, [pc, #52]	; (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f0      	beq.n	8004c34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c52:	2001      	movs	r0, #1
 8004c54:	f000 fac4 	bl	80051e0 <RCC_Delay>
 8004c58:	e01c      	b.n	8004c94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c60:	f7fe fbe4 	bl	800342c <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c66:	e00f      	b.n	8004c88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c68:	f7fe fbe0 	bl	800342c <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d908      	bls.n	8004c88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e146      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
 8004c7a:	bf00      	nop
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	42420000 	.word	0x42420000
 8004c84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c88:	4b92      	ldr	r3, [pc, #584]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e9      	bne.n	8004c68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80a6 	beq.w	8004dee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ca6:	4b8b      	ldr	r3, [pc, #556]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10d      	bne.n	8004cce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb2:	4b88      	ldr	r3, [pc, #544]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	4a87      	ldr	r2, [pc, #540]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	61d3      	str	r3, [r2, #28]
 8004cbe:	4b85      	ldr	r3, [pc, #532]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	60bb      	str	r3, [r7, #8]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cce:	4b82      	ldr	r3, [pc, #520]	; (8004ed8 <HAL_RCC_OscConfig+0x4c8>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d118      	bne.n	8004d0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cda:	4b7f      	ldr	r3, [pc, #508]	; (8004ed8 <HAL_RCC_OscConfig+0x4c8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a7e      	ldr	r2, [pc, #504]	; (8004ed8 <HAL_RCC_OscConfig+0x4c8>)
 8004ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ce6:	f7fe fba1 	bl	800342c <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cee:	f7fe fb9d 	bl	800342c <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b64      	cmp	r3, #100	; 0x64
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e103      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d00:	4b75      	ldr	r3, [pc, #468]	; (8004ed8 <HAL_RCC_OscConfig+0x4c8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0f0      	beq.n	8004cee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d106      	bne.n	8004d22 <HAL_RCC_OscConfig+0x312>
 8004d14:	4b6f      	ldr	r3, [pc, #444]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	4a6e      	ldr	r2, [pc, #440]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	6213      	str	r3, [r2, #32]
 8004d20:	e02d      	b.n	8004d7e <HAL_RCC_OscConfig+0x36e>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10c      	bne.n	8004d44 <HAL_RCC_OscConfig+0x334>
 8004d2a:	4b6a      	ldr	r3, [pc, #424]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	4a69      	ldr	r2, [pc, #420]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d30:	f023 0301 	bic.w	r3, r3, #1
 8004d34:	6213      	str	r3, [r2, #32]
 8004d36:	4b67      	ldr	r3, [pc, #412]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	4a66      	ldr	r2, [pc, #408]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d3c:	f023 0304 	bic.w	r3, r3, #4
 8004d40:	6213      	str	r3, [r2, #32]
 8004d42:	e01c      	b.n	8004d7e <HAL_RCC_OscConfig+0x36e>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	2b05      	cmp	r3, #5
 8004d4a:	d10c      	bne.n	8004d66 <HAL_RCC_OscConfig+0x356>
 8004d4c:	4b61      	ldr	r3, [pc, #388]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	4a60      	ldr	r2, [pc, #384]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d52:	f043 0304 	orr.w	r3, r3, #4
 8004d56:	6213      	str	r3, [r2, #32]
 8004d58:	4b5e      	ldr	r3, [pc, #376]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	4a5d      	ldr	r2, [pc, #372]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	6213      	str	r3, [r2, #32]
 8004d64:	e00b      	b.n	8004d7e <HAL_RCC_OscConfig+0x36e>
 8004d66:	4b5b      	ldr	r3, [pc, #364]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	4a5a      	ldr	r2, [pc, #360]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d6c:	f023 0301 	bic.w	r3, r3, #1
 8004d70:	6213      	str	r3, [r2, #32]
 8004d72:	4b58      	ldr	r3, [pc, #352]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	4a57      	ldr	r2, [pc, #348]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d78:	f023 0304 	bic.w	r3, r3, #4
 8004d7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d015      	beq.n	8004db2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d86:	f7fe fb51 	bl	800342c <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8c:	e00a      	b.n	8004da4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8e:	f7fe fb4d 	bl	800342c <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e0b1      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da4:	4b4b      	ldr	r3, [pc, #300]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0ee      	beq.n	8004d8e <HAL_RCC_OscConfig+0x37e>
 8004db0:	e014      	b.n	8004ddc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db2:	f7fe fb3b 	bl	800342c <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db8:	e00a      	b.n	8004dd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dba:	f7fe fb37 	bl	800342c <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e09b      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd0:	4b40      	ldr	r3, [pc, #256]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1ee      	bne.n	8004dba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ddc:	7dfb      	ldrb	r3, [r7, #23]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d105      	bne.n	8004dee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de2:	4b3c      	ldr	r3, [pc, #240]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	4a3b      	ldr	r2, [pc, #236]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 8087 	beq.w	8004f06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004df8:	4b36      	ldr	r3, [pc, #216]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f003 030c 	and.w	r3, r3, #12
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d061      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d146      	bne.n	8004e9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e0c:	4b33      	ldr	r3, [pc, #204]	; (8004edc <HAL_RCC_OscConfig+0x4cc>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e12:	f7fe fb0b 	bl	800342c <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e1a:	f7fe fb07 	bl	800342c <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e06d      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e2c:	4b29      	ldr	r3, [pc, #164]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1f0      	bne.n	8004e1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e40:	d108      	bne.n	8004e54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e42:	4b24      	ldr	r3, [pc, #144]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	4921      	ldr	r1, [pc, #132]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e54:	4b1f      	ldr	r3, [pc, #124]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a19      	ldr	r1, [r3, #32]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	430b      	orrs	r3, r1
 8004e66:	491b      	ldr	r1, [pc, #108]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e6c:	4b1b      	ldr	r3, [pc, #108]	; (8004edc <HAL_RCC_OscConfig+0x4cc>)
 8004e6e:	2201      	movs	r2, #1
 8004e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e72:	f7fe fadb 	bl	800342c <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7a:	f7fe fad7 	bl	800342c <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e03d      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e8c:	4b11      	ldr	r3, [pc, #68]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0f0      	beq.n	8004e7a <HAL_RCC_OscConfig+0x46a>
 8004e98:	e035      	b.n	8004f06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e9a:	4b10      	ldr	r3, [pc, #64]	; (8004edc <HAL_RCC_OscConfig+0x4cc>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea0:	f7fe fac4 	bl	800342c <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea8:	f7fe fac0 	bl	800342c <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e026      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eba:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f0      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x498>
 8004ec6:	e01e      	b.n	8004f06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d107      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e019      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	40007000 	.word	0x40007000
 8004edc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <HAL_RCC_OscConfig+0x500>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d106      	bne.n	8004f02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d001      	beq.n	8004f06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40021000 	.word	0x40021000

08004f14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e0d0      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f28:	4b6a      	ldr	r3, [pc, #424]	; (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d910      	bls.n	8004f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f36:	4b67      	ldr	r3, [pc, #412]	; (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f023 0207 	bic.w	r2, r3, #7
 8004f3e:	4965      	ldr	r1, [pc, #404]	; (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f46:	4b63      	ldr	r3, [pc, #396]	; (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d001      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0b8      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d020      	beq.n	8004fa6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f70:	4b59      	ldr	r3, [pc, #356]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4a58      	ldr	r2, [pc, #352]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0308 	and.w	r3, r3, #8
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f88:	4b53      	ldr	r3, [pc, #332]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	4a52      	ldr	r2, [pc, #328]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f94:	4b50      	ldr	r3, [pc, #320]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	494d      	ldr	r1, [pc, #308]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d040      	beq.n	8005034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d107      	bne.n	8004fca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fba:	4b47      	ldr	r3, [pc, #284]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d115      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e07f      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d107      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd2:	4b41      	ldr	r3, [pc, #260]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d109      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e073      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe2:	4b3d      	ldr	r3, [pc, #244]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e06b      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ff2:	4b39      	ldr	r3, [pc, #228]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f023 0203 	bic.w	r2, r3, #3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4936      	ldr	r1, [pc, #216]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005000:	4313      	orrs	r3, r2
 8005002:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005004:	f7fe fa12 	bl	800342c <HAL_GetTick>
 8005008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500a:	e00a      	b.n	8005022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800500c:	f7fe fa0e 	bl	800342c <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	f241 3288 	movw	r2, #5000	; 0x1388
 800501a:	4293      	cmp	r3, r2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e053      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005022:	4b2d      	ldr	r3, [pc, #180]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f003 020c 	and.w	r2, r3, #12
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	429a      	cmp	r2, r3
 8005032:	d1eb      	bne.n	800500c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005034:	4b27      	ldr	r3, [pc, #156]	; (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d210      	bcs.n	8005064 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005042:	4b24      	ldr	r3, [pc, #144]	; (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f023 0207 	bic.w	r2, r3, #7
 800504a:	4922      	ldr	r1, [pc, #136]	; (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	4313      	orrs	r3, r2
 8005050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005052:	4b20      	ldr	r3, [pc, #128]	; (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d001      	beq.n	8005064 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e032      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d008      	beq.n	8005082 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005070:	4b19      	ldr	r3, [pc, #100]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	4916      	ldr	r1, [pc, #88]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 800507e:	4313      	orrs	r3, r2
 8005080:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d009      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800508e:	4b12      	ldr	r3, [pc, #72]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	490e      	ldr	r1, [pc, #56]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050a2:	f000 f821 	bl	80050e8 <HAL_RCC_GetSysClockFreq>
 80050a6:	4602      	mov	r2, r0
 80050a8:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	091b      	lsrs	r3, r3, #4
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	490a      	ldr	r1, [pc, #40]	; (80050dc <HAL_RCC_ClockConfig+0x1c8>)
 80050b4:	5ccb      	ldrb	r3, [r1, r3]
 80050b6:	fa22 f303 	lsr.w	r3, r2, r3
 80050ba:	4a09      	ldr	r2, [pc, #36]	; (80050e0 <HAL_RCC_ClockConfig+0x1cc>)
 80050bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050be:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <HAL_RCC_ClockConfig+0x1d0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fe f970 	bl	80033a8 <HAL_InitTick>

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	40022000 	.word	0x40022000
 80050d8:	40021000 	.word	0x40021000
 80050dc:	0800b2a8 	.word	0x0800b2a8
 80050e0:	2000003c 	.word	0x2000003c
 80050e4:	20000040 	.word	0x20000040

080050e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050e8:	b490      	push	{r4, r7}
 80050ea:	b08a      	sub	sp, #40	; 0x28
 80050ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80050ee:	4b29      	ldr	r3, [pc, #164]	; (8005194 <HAL_RCC_GetSysClockFreq+0xac>)
 80050f0:	1d3c      	adds	r4, r7, #4
 80050f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80050f8:	f240 2301 	movw	r3, #513	; 0x201
 80050fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	61fb      	str	r3, [r7, #28]
 8005102:	2300      	movs	r3, #0
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	2300      	movs	r3, #0
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005112:	4b21      	ldr	r3, [pc, #132]	; (8005198 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	f003 030c 	and.w	r3, r3, #12
 800511e:	2b04      	cmp	r3, #4
 8005120:	d002      	beq.n	8005128 <HAL_RCC_GetSysClockFreq+0x40>
 8005122:	2b08      	cmp	r3, #8
 8005124:	d003      	beq.n	800512e <HAL_RCC_GetSysClockFreq+0x46>
 8005126:	e02b      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005128:	4b1c      	ldr	r3, [pc, #112]	; (800519c <HAL_RCC_GetSysClockFreq+0xb4>)
 800512a:	623b      	str	r3, [r7, #32]
      break;
 800512c:	e02b      	b.n	8005186 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	0c9b      	lsrs	r3, r3, #18
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	3328      	adds	r3, #40	; 0x28
 8005138:	443b      	add	r3, r7
 800513a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800513e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d012      	beq.n	8005170 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800514a:	4b13      	ldr	r3, [pc, #76]	; (8005198 <HAL_RCC_GetSysClockFreq+0xb0>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	0c5b      	lsrs	r3, r3, #17
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	3328      	adds	r3, #40	; 0x28
 8005156:	443b      	add	r3, r7
 8005158:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800515c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	4a0e      	ldr	r2, [pc, #56]	; (800519c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005162:	fb03 f202 	mul.w	r2, r3, r2
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	fbb2 f3f3 	udiv	r3, r2, r3
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
 800516e:	e004      	b.n	800517a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	4a0b      	ldr	r2, [pc, #44]	; (80051a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005174:	fb02 f303 	mul.w	r3, r2, r3
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	623b      	str	r3, [r7, #32]
      break;
 800517e:	e002      	b.n	8005186 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005180:	4b06      	ldr	r3, [pc, #24]	; (800519c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005182:	623b      	str	r3, [r7, #32]
      break;
 8005184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005186:	6a3b      	ldr	r3, [r7, #32]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3728      	adds	r7, #40	; 0x28
 800518c:	46bd      	mov	sp, r7
 800518e:	bc90      	pop	{r4, r7}
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	0800b298 	.word	0x0800b298
 8005198:	40021000 	.word	0x40021000
 800519c:	007a1200 	.word	0x007a1200
 80051a0:	003d0900 	.word	0x003d0900

080051a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051a8:	4b02      	ldr	r3, [pc, #8]	; (80051b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80051aa:	681b      	ldr	r3, [r3, #0]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bc80      	pop	{r7}
 80051b2:	4770      	bx	lr
 80051b4:	2000003c 	.word	0x2000003c

080051b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051bc:	f7ff fff2 	bl	80051a4 <HAL_RCC_GetHCLKFreq>
 80051c0:	4602      	mov	r2, r0
 80051c2:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	0a1b      	lsrs	r3, r3, #8
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	4903      	ldr	r1, [pc, #12]	; (80051dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ce:	5ccb      	ldrb	r3, [r1, r3]
 80051d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	40021000 	.word	0x40021000
 80051dc:	0800b2b8 	.word	0x0800b2b8

080051e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80051e8:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <RCC_Delay+0x34>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a0a      	ldr	r2, [pc, #40]	; (8005218 <RCC_Delay+0x38>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	0a5b      	lsrs	r3, r3, #9
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	fb02 f303 	mul.w	r3, r2, r3
 80051fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051fc:	bf00      	nop
  }
  while (Delay --);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1e5a      	subs	r2, r3, #1
 8005202:	60fa      	str	r2, [r7, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1f9      	bne.n	80051fc <RCC_Delay+0x1c>
}
 8005208:	bf00      	nop
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr
 8005214:	2000003c 	.word	0x2000003c
 8005218:	10624dd3 	.word	0x10624dd3

0800521c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e041      	b.n	80052b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fd fed2 	bl	8002fec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3304      	adds	r3, #4
 8005258:	4619      	mov	r1, r3
 800525a:	4610      	mov	r0, r2
 800525c:	f000 fe04 	bl	8005e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b082      	sub	sp, #8
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e041      	b.n	8005350 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d106      	bne.n	80052e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f839 	bl	8005358 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2202      	movs	r2, #2
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3304      	adds	r3, #4
 80052f6:	4619      	mov	r1, r3
 80052f8:	4610      	mov	r0, r2
 80052fa:	f000 fdb5 	bl	8005e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	bc80      	pop	{r7}
 8005368:	4770      	bx	lr
	...

0800536c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d109      	bne.n	8005390 <HAL_TIM_PWM_Start+0x24>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b01      	cmp	r3, #1
 8005386:	bf14      	ite	ne
 8005388:	2301      	movne	r3, #1
 800538a:	2300      	moveq	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	e022      	b.n	80053d6 <HAL_TIM_PWM_Start+0x6a>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b04      	cmp	r3, #4
 8005394:	d109      	bne.n	80053aa <HAL_TIM_PWM_Start+0x3e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b01      	cmp	r3, #1
 80053a0:	bf14      	ite	ne
 80053a2:	2301      	movne	r3, #1
 80053a4:	2300      	moveq	r3, #0
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	e015      	b.n	80053d6 <HAL_TIM_PWM_Start+0x6a>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d109      	bne.n	80053c4 <HAL_TIM_PWM_Start+0x58>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	bf14      	ite	ne
 80053bc:	2301      	movne	r3, #1
 80053be:	2300      	moveq	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	e008      	b.n	80053d6 <HAL_TIM_PWM_Start+0x6a>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	bf14      	ite	ne
 80053d0:	2301      	movne	r3, #1
 80053d2:	2300      	moveq	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e05e      	b.n	800549c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d104      	bne.n	80053ee <HAL_TIM_PWM_Start+0x82>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053ec:	e013      	b.n	8005416 <HAL_TIM_PWM_Start+0xaa>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d104      	bne.n	80053fe <HAL_TIM_PWM_Start+0x92>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053fc:	e00b      	b.n	8005416 <HAL_TIM_PWM_Start+0xaa>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b08      	cmp	r3, #8
 8005402:	d104      	bne.n	800540e <HAL_TIM_PWM_Start+0xa2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800540c:	e003      	b.n	8005416 <HAL_TIM_PWM_Start+0xaa>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2202      	movs	r2, #2
 8005412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2201      	movs	r2, #1
 800541c:	6839      	ldr	r1, [r7, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f001 f8af 	bl	8006582 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a1e      	ldr	r2, [pc, #120]	; (80054a4 <HAL_TIM_PWM_Start+0x138>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d107      	bne.n	800543e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800543c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a18      	ldr	r2, [pc, #96]	; (80054a4 <HAL_TIM_PWM_Start+0x138>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d00e      	beq.n	8005466 <HAL_TIM_PWM_Start+0xfa>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005450:	d009      	beq.n	8005466 <HAL_TIM_PWM_Start+0xfa>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a14      	ldr	r2, [pc, #80]	; (80054a8 <HAL_TIM_PWM_Start+0x13c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d004      	beq.n	8005466 <HAL_TIM_PWM_Start+0xfa>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a12      	ldr	r2, [pc, #72]	; (80054ac <HAL_TIM_PWM_Start+0x140>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d111      	bne.n	800548a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 0307 	and.w	r3, r3, #7
 8005470:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b06      	cmp	r3, #6
 8005476:	d010      	beq.n	800549a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005488:	e007      	b.n	800549a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0201 	orr.w	r2, r2, #1
 8005498:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40012c00 	.word	0x40012c00
 80054a8:	40000400 	.word	0x40000400
 80054ac:	40000800 	.word	0x40000800

080054b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e041      	b.n	8005546 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fd fd44 	bl	8002f64 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3304      	adds	r3, #4
 80054ec:	4619      	mov	r1, r3
 80054ee:	4610      	mov	r0, r2
 80054f0:	f000 fcba 	bl	8005e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d104      	bne.n	800556a <HAL_TIM_IC_Start_IT+0x1a>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005566:	b2db      	uxtb	r3, r3
 8005568:	e013      	b.n	8005592 <HAL_TIM_IC_Start_IT+0x42>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b04      	cmp	r3, #4
 800556e:	d104      	bne.n	800557a <HAL_TIM_IC_Start_IT+0x2a>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005576:	b2db      	uxtb	r3, r3
 8005578:	e00b      	b.n	8005592 <HAL_TIM_IC_Start_IT+0x42>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b08      	cmp	r3, #8
 800557e:	d104      	bne.n	800558a <HAL_TIM_IC_Start_IT+0x3a>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005586:	b2db      	uxtb	r3, r3
 8005588:	e003      	b.n	8005592 <HAL_TIM_IC_Start_IT+0x42>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005590:	b2db      	uxtb	r3, r3
 8005592:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d104      	bne.n	80055a4 <HAL_TIM_IC_Start_IT+0x54>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	e013      	b.n	80055cc <HAL_TIM_IC_Start_IT+0x7c>
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d104      	bne.n	80055b4 <HAL_TIM_IC_Start_IT+0x64>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	e00b      	b.n	80055cc <HAL_TIM_IC_Start_IT+0x7c>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d104      	bne.n	80055c4 <HAL_TIM_IC_Start_IT+0x74>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	e003      	b.n	80055cc <HAL_TIM_IC_Start_IT+0x7c>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d102      	bne.n	80055da <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80055d4:	7bbb      	ldrb	r3, [r7, #14]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d001      	beq.n	80055de <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e0b3      	b.n	8005746 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d104      	bne.n	80055ee <HAL_TIM_IC_Start_IT+0x9e>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055ec:	e013      	b.n	8005616 <HAL_TIM_IC_Start_IT+0xc6>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d104      	bne.n	80055fe <HAL_TIM_IC_Start_IT+0xae>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055fc:	e00b      	b.n	8005616 <HAL_TIM_IC_Start_IT+0xc6>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b08      	cmp	r3, #8
 8005602:	d104      	bne.n	800560e <HAL_TIM_IC_Start_IT+0xbe>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800560c:	e003      	b.n	8005616 <HAL_TIM_IC_Start_IT+0xc6>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2202      	movs	r2, #2
 8005612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d104      	bne.n	8005626 <HAL_TIM_IC_Start_IT+0xd6>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005624:	e013      	b.n	800564e <HAL_TIM_IC_Start_IT+0xfe>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b04      	cmp	r3, #4
 800562a:	d104      	bne.n	8005636 <HAL_TIM_IC_Start_IT+0xe6>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005634:	e00b      	b.n	800564e <HAL_TIM_IC_Start_IT+0xfe>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b08      	cmp	r3, #8
 800563a:	d104      	bne.n	8005646 <HAL_TIM_IC_Start_IT+0xf6>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005644:	e003      	b.n	800564e <HAL_TIM_IC_Start_IT+0xfe>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2202      	movs	r2, #2
 800564a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b0c      	cmp	r3, #12
 8005652:	d841      	bhi.n	80056d8 <HAL_TIM_IC_Start_IT+0x188>
 8005654:	a201      	add	r2, pc, #4	; (adr r2, 800565c <HAL_TIM_IC_Start_IT+0x10c>)
 8005656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565a:	bf00      	nop
 800565c:	08005691 	.word	0x08005691
 8005660:	080056d9 	.word	0x080056d9
 8005664:	080056d9 	.word	0x080056d9
 8005668:	080056d9 	.word	0x080056d9
 800566c:	080056a3 	.word	0x080056a3
 8005670:	080056d9 	.word	0x080056d9
 8005674:	080056d9 	.word	0x080056d9
 8005678:	080056d9 	.word	0x080056d9
 800567c:	080056b5 	.word	0x080056b5
 8005680:	080056d9 	.word	0x080056d9
 8005684:	080056d9 	.word	0x080056d9
 8005688:	080056d9 	.word	0x080056d9
 800568c:	080056c7 	.word	0x080056c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0202 	orr.w	r2, r2, #2
 800569e:	60da      	str	r2, [r3, #12]
      break;
 80056a0:	e01b      	b.n	80056da <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0204 	orr.w	r2, r2, #4
 80056b0:	60da      	str	r2, [r3, #12]
      break;
 80056b2:	e012      	b.n	80056da <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0208 	orr.w	r2, r2, #8
 80056c2:	60da      	str	r2, [r3, #12]
      break;
 80056c4:	e009      	b.n	80056da <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f042 0210 	orr.w	r2, r2, #16
 80056d4:	60da      	str	r2, [r3, #12]
      break;
 80056d6:	e000      	b.n	80056da <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80056d8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2201      	movs	r2, #1
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 ff4d 	bl	8006582 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a18      	ldr	r2, [pc, #96]	; (8005750 <HAL_TIM_IC_Start_IT+0x200>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00e      	beq.n	8005710 <HAL_TIM_IC_Start_IT+0x1c0>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fa:	d009      	beq.n	8005710 <HAL_TIM_IC_Start_IT+0x1c0>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a14      	ldr	r2, [pc, #80]	; (8005754 <HAL_TIM_IC_Start_IT+0x204>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d004      	beq.n	8005710 <HAL_TIM_IC_Start_IT+0x1c0>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a13      	ldr	r2, [pc, #76]	; (8005758 <HAL_TIM_IC_Start_IT+0x208>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d111      	bne.n	8005734 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2b06      	cmp	r3, #6
 8005720:	d010      	beq.n	8005744 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0201 	orr.w	r2, r2, #1
 8005730:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005732:	e007      	b.n	8005744 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	40012c00 	.word	0x40012c00
 8005754:	40000400 	.word	0x40000400
 8005758:	40000800 	.word	0x40000800

0800575c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b02      	cmp	r3, #2
 8005770:	d122      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b02      	cmp	r3, #2
 800577e:	d11b      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0202 	mvn.w	r2, #2
 8005788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fb fcbc 	bl	800111c <HAL_TIM_IC_CaptureCallback>
 80057a4:	e005      	b.n	80057b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fb43 	bl	8005e32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fb49 	bl	8005e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b04      	cmp	r3, #4
 80057c4:	d122      	bne.n	800580c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d11b      	bne.n	800580c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f06f 0204 	mvn.w	r2, #4
 80057dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2202      	movs	r2, #2
 80057e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fb fc92 	bl	800111c <HAL_TIM_IC_CaptureCallback>
 80057f8:	e005      	b.n	8005806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fb19 	bl	8005e32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fb1f 	bl	8005e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b08      	cmp	r3, #8
 8005818:	d122      	bne.n	8005860 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f003 0308 	and.w	r3, r3, #8
 8005824:	2b08      	cmp	r3, #8
 8005826:	d11b      	bne.n	8005860 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f06f 0208 	mvn.w	r2, #8
 8005830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2204      	movs	r2, #4
 8005836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fb fc68 	bl	800111c <HAL_TIM_IC_CaptureCallback>
 800584c:	e005      	b.n	800585a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 faef 	bl	8005e32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 faf5 	bl	8005e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f003 0310 	and.w	r3, r3, #16
 800586a:	2b10      	cmp	r3, #16
 800586c:	d122      	bne.n	80058b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f003 0310 	and.w	r3, r3, #16
 8005878:	2b10      	cmp	r3, #16
 800587a:	d11b      	bne.n	80058b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f06f 0210 	mvn.w	r2, #16
 8005884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2208      	movs	r2, #8
 800588a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fb fc3e 	bl	800111c <HAL_TIM_IC_CaptureCallback>
 80058a0:	e005      	b.n	80058ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fac5 	bl	8005e32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 facb 	bl	8005e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d10e      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d107      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f06f 0201 	mvn.w	r2, #1
 80058d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 faa0 	bl	8005e20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ea:	2b80      	cmp	r3, #128	; 0x80
 80058ec:	d10e      	bne.n	800590c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f8:	2b80      	cmp	r3, #128	; 0x80
 80058fa:	d107      	bne.n	800590c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fec7 	bl	800669a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005916:	2b40      	cmp	r3, #64	; 0x40
 8005918:	d10e      	bne.n	8005938 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005924:	2b40      	cmp	r3, #64	; 0x40
 8005926:	d107      	bne.n	8005938 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fa8f 	bl	8005e56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b20      	cmp	r3, #32
 8005944:	d10e      	bne.n	8005964 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b20      	cmp	r3, #32
 8005952:	d107      	bne.n	8005964 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0220 	mvn.w	r2, #32
 800595c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fe92 	bl	8006688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005964:	bf00      	nop
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005982:	2302      	movs	r3, #2
 8005984:	e082      	b.n	8005a8c <HAL_TIM_IC_ConfigChannel+0x120>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d11b      	bne.n	80059cc <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6818      	ldr	r0, [r3, #0]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	6819      	ldr	r1, [r3, #0]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f000 fc4a 	bl	800623c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 020c 	bic.w	r2, r2, #12
 80059b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6999      	ldr	r1, [r3, #24]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	689a      	ldr	r2, [r3, #8]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	619a      	str	r2, [r3, #24]
 80059ca:	e05a      	b.n	8005a82 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d11c      	bne.n	8005a0c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6818      	ldr	r0, [r3, #0]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	6819      	ldr	r1, [r3, #0]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f000 fcb3 	bl	800634c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	699a      	ldr	r2, [r3, #24]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6999      	ldr	r1, [r3, #24]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	021a      	lsls	r2, r3, #8
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	619a      	str	r2, [r3, #24]
 8005a0a:	e03a      	b.n	8005a82 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	d11b      	bne.n	8005a4a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6818      	ldr	r0, [r3, #0]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	6819      	ldr	r1, [r3, #0]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f000 fcfe 	bl	8006422 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	69da      	ldr	r2, [r3, #28]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 020c 	bic.w	r2, r2, #12
 8005a34:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69d9      	ldr	r1, [r3, #28]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	61da      	str	r2, [r3, #28]
 8005a48:	e01b      	b.n	8005a82 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	6819      	ldr	r1, [r3, #0]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f000 fd1d 	bl	8006498 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69da      	ldr	r2, [r3, #28]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a6c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69d9      	ldr	r1, [r3, #28]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	021a      	lsls	r2, r3, #8
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e0ac      	b.n	8005c08 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b0c      	cmp	r3, #12
 8005aba:	f200 809f 	bhi.w	8005bfc <HAL_TIM_PWM_ConfigChannel+0x168>
 8005abe:	a201      	add	r2, pc, #4	; (adr r2, 8005ac4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac4:	08005af9 	.word	0x08005af9
 8005ac8:	08005bfd 	.word	0x08005bfd
 8005acc:	08005bfd 	.word	0x08005bfd
 8005ad0:	08005bfd 	.word	0x08005bfd
 8005ad4:	08005b39 	.word	0x08005b39
 8005ad8:	08005bfd 	.word	0x08005bfd
 8005adc:	08005bfd 	.word	0x08005bfd
 8005ae0:	08005bfd 	.word	0x08005bfd
 8005ae4:	08005b7b 	.word	0x08005b7b
 8005ae8:	08005bfd 	.word	0x08005bfd
 8005aec:	08005bfd 	.word	0x08005bfd
 8005af0:	08005bfd 	.word	0x08005bfd
 8005af4:	08005bbb 	.word	0x08005bbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68b9      	ldr	r1, [r7, #8]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 fa14 	bl	8005f2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0208 	orr.w	r2, r2, #8
 8005b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0204 	bic.w	r2, r2, #4
 8005b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6999      	ldr	r1, [r3, #24]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	691a      	ldr	r2, [r3, #16]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	619a      	str	r2, [r3, #24]
      break;
 8005b36:	e062      	b.n	8005bfe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fa5a 	bl	8005ff8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699a      	ldr	r2, [r3, #24]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6999      	ldr	r1, [r3, #24]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	021a      	lsls	r2, r3, #8
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	619a      	str	r2, [r3, #24]
      break;
 8005b78:	e041      	b.n	8005bfe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68b9      	ldr	r1, [r7, #8]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 faa3 	bl	80060cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0208 	orr.w	r2, r2, #8
 8005b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69da      	ldr	r2, [r3, #28]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0204 	bic.w	r2, r2, #4
 8005ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69d9      	ldr	r1, [r3, #28]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	61da      	str	r2, [r3, #28]
      break;
 8005bb8:	e021      	b.n	8005bfe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 faed 	bl	80061a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69da      	ldr	r2, [r3, #28]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69d9      	ldr	r1, [r3, #28]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	021a      	lsls	r2, r3, #8
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	61da      	str	r2, [r3, #28]
      break;
 8005bfa:	e000      	b.n	8005bfe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005bfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_TIM_ConfigClockSource+0x18>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e0b3      	b.n	8005d90 <HAL_TIM_ConfigClockSource+0x180>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c60:	d03e      	beq.n	8005ce0 <HAL_TIM_ConfigClockSource+0xd0>
 8005c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c66:	f200 8087 	bhi.w	8005d78 <HAL_TIM_ConfigClockSource+0x168>
 8005c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6e:	f000 8085 	beq.w	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c76:	d87f      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x168>
 8005c78:	2b70      	cmp	r3, #112	; 0x70
 8005c7a:	d01a      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0xa2>
 8005c7c:	2b70      	cmp	r3, #112	; 0x70
 8005c7e:	d87b      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x168>
 8005c80:	2b60      	cmp	r3, #96	; 0x60
 8005c82:	d050      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x116>
 8005c84:	2b60      	cmp	r3, #96	; 0x60
 8005c86:	d877      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x168>
 8005c88:	2b50      	cmp	r3, #80	; 0x50
 8005c8a:	d03c      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0xf6>
 8005c8c:	2b50      	cmp	r3, #80	; 0x50
 8005c8e:	d873      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x168>
 8005c90:	2b40      	cmp	r3, #64	; 0x40
 8005c92:	d058      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x136>
 8005c94:	2b40      	cmp	r3, #64	; 0x40
 8005c96:	d86f      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x168>
 8005c98:	2b30      	cmp	r3, #48	; 0x30
 8005c9a:	d064      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x156>
 8005c9c:	2b30      	cmp	r3, #48	; 0x30
 8005c9e:	d86b      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x168>
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d060      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x156>
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d867      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x168>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d05c      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x156>
 8005cac:	2b10      	cmp	r3, #16
 8005cae:	d05a      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005cb0:	e062      	b.n	8005d78 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6818      	ldr	r0, [r3, #0]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	6899      	ldr	r1, [r3, #8]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f000 fc3f 	bl	8006544 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cd4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	609a      	str	r2, [r3, #8]
      break;
 8005cde:	e04e      	b.n	8005d7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6818      	ldr	r0, [r3, #0]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	6899      	ldr	r1, [r3, #8]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f000 fc28 	bl	8006544 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d02:	609a      	str	r2, [r3, #8]
      break;
 8005d04:	e03b      	b.n	8005d7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6859      	ldr	r1, [r3, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f000 faec 	bl	80062f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2150      	movs	r1, #80	; 0x50
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fbf6 	bl	8006510 <TIM_ITRx_SetConfig>
      break;
 8005d24:	e02b      	b.n	8005d7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6859      	ldr	r1, [r3, #4]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	461a      	mov	r2, r3
 8005d34:	f000 fb46 	bl	80063c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2160      	movs	r1, #96	; 0x60
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fbe6 	bl	8006510 <TIM_ITRx_SetConfig>
      break;
 8005d44:	e01b      	b.n	8005d7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	6859      	ldr	r1, [r3, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	461a      	mov	r2, r3
 8005d54:	f000 facc 	bl	80062f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2140      	movs	r1, #64	; 0x40
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fbd6 	bl	8006510 <TIM_ITRx_SetConfig>
      break;
 8005d64:	e00b      	b.n	8005d7e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	4610      	mov	r0, r2
 8005d72:	f000 fbcd 	bl	8006510 <TIM_ITRx_SetConfig>
        break;
 8005d76:	e002      	b.n	8005d7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005d78:	bf00      	nop
 8005d7a:	e000      	b.n	8005d7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005d7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b0c      	cmp	r3, #12
 8005daa:	d831      	bhi.n	8005e10 <HAL_TIM_ReadCapturedValue+0x78>
 8005dac:	a201      	add	r2, pc, #4	; (adr r2, 8005db4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db2:	bf00      	nop
 8005db4:	08005de9 	.word	0x08005de9
 8005db8:	08005e11 	.word	0x08005e11
 8005dbc:	08005e11 	.word	0x08005e11
 8005dc0:	08005e11 	.word	0x08005e11
 8005dc4:	08005df3 	.word	0x08005df3
 8005dc8:	08005e11 	.word	0x08005e11
 8005dcc:	08005e11 	.word	0x08005e11
 8005dd0:	08005e11 	.word	0x08005e11
 8005dd4:	08005dfd 	.word	0x08005dfd
 8005dd8:	08005e11 	.word	0x08005e11
 8005ddc:	08005e11 	.word	0x08005e11
 8005de0:	08005e11 	.word	0x08005e11
 8005de4:	08005e07 	.word	0x08005e07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dee:	60fb      	str	r3, [r7, #12]

      break;
 8005df0:	e00f      	b.n	8005e12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df8:	60fb      	str	r3, [r7, #12]

      break;
 8005dfa:	e00a      	b.n	8005e12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e02:	60fb      	str	r3, [r7, #12]

      break;
 8005e04:	e005      	b.n	8005e12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0c:	60fb      	str	r3, [r7, #12]

      break;
 8005e0e:	e000      	b.n	8005e12 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005e10:	bf00      	nop
  }

  return tmpreg;
 8005e12:	68fb      	ldr	r3, [r7, #12]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bc80      	pop	{r7}
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop

08005e20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bc80      	pop	{r7}
 8005e30:	4770      	bx	lr

08005e32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b083      	sub	sp, #12
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bc80      	pop	{r7}
 8005e42:	4770      	bx	lr

08005e44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bc80      	pop	{r7}
 8005e54:	4770      	bx	lr

08005e56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bc80      	pop	{r7}
 8005e66:	4770      	bx	lr

08005e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a29      	ldr	r2, [pc, #164]	; (8005f20 <TIM_Base_SetConfig+0xb8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d00b      	beq.n	8005e98 <TIM_Base_SetConfig+0x30>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e86:	d007      	beq.n	8005e98 <TIM_Base_SetConfig+0x30>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a26      	ldr	r2, [pc, #152]	; (8005f24 <TIM_Base_SetConfig+0xbc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d003      	beq.n	8005e98 <TIM_Base_SetConfig+0x30>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a25      	ldr	r2, [pc, #148]	; (8005f28 <TIM_Base_SetConfig+0xc0>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d108      	bne.n	8005eaa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a1c      	ldr	r2, [pc, #112]	; (8005f20 <TIM_Base_SetConfig+0xb8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00b      	beq.n	8005eca <TIM_Base_SetConfig+0x62>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb8:	d007      	beq.n	8005eca <TIM_Base_SetConfig+0x62>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a19      	ldr	r2, [pc, #100]	; (8005f24 <TIM_Base_SetConfig+0xbc>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d003      	beq.n	8005eca <TIM_Base_SetConfig+0x62>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a18      	ldr	r2, [pc, #96]	; (8005f28 <TIM_Base_SetConfig+0xc0>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d108      	bne.n	8005edc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a07      	ldr	r2, [pc, #28]	; (8005f20 <TIM_Base_SetConfig+0xb8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d103      	bne.n	8005f10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	691a      	ldr	r2, [r3, #16]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	615a      	str	r2, [r3, #20]
}
 8005f16:	bf00      	nop
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bc80      	pop	{r7}
 8005f1e:	4770      	bx	lr
 8005f20:	40012c00 	.word	0x40012c00
 8005f24:	40000400 	.word	0x40000400
 8005f28:	40000800 	.word	0x40000800

08005f2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	f023 0201 	bic.w	r2, r3, #1
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 0303 	bic.w	r3, r3, #3
 8005f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f023 0302 	bic.w	r3, r3, #2
 8005f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a1c      	ldr	r2, [pc, #112]	; (8005ff4 <TIM_OC1_SetConfig+0xc8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d10c      	bne.n	8005fa2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f023 0308 	bic.w	r3, r3, #8
 8005f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f023 0304 	bic.w	r3, r3, #4
 8005fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a13      	ldr	r2, [pc, #76]	; (8005ff4 <TIM_OC1_SetConfig+0xc8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d111      	bne.n	8005fce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	621a      	str	r2, [r3, #32]
}
 8005fe8:	bf00      	nop
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	40012c00 	.word	0x40012c00

08005ff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	f023 0210 	bic.w	r2, r3, #16
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800602e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	021b      	lsls	r3, r3, #8
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	4313      	orrs	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f023 0320 	bic.w	r3, r3, #32
 8006042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	011b      	lsls	r3, r3, #4
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4313      	orrs	r3, r2
 800604e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a1d      	ldr	r2, [pc, #116]	; (80060c8 <TIM_OC2_SetConfig+0xd0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d10d      	bne.n	8006074 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800605e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	011b      	lsls	r3, r3, #4
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006072:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a14      	ldr	r2, [pc, #80]	; (80060c8 <TIM_OC2_SetConfig+0xd0>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d113      	bne.n	80060a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006082:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800608a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr
 80060c8:	40012c00 	.word	0x40012c00

080060cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f023 0303 	bic.w	r3, r3, #3
 8006102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	021b      	lsls	r3, r3, #8
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a1d      	ldr	r2, [pc, #116]	; (800619c <TIM_OC3_SetConfig+0xd0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d10d      	bne.n	8006146 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006130:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	021b      	lsls	r3, r3, #8
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a14      	ldr	r2, [pc, #80]	; (800619c <TIM_OC3_SetConfig+0xd0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d113      	bne.n	8006176 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800615c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	4313      	orrs	r3, r2
 8006174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	621a      	str	r2, [r3, #32]
}
 8006190:	bf00      	nop
 8006192:	371c      	adds	r7, #28
 8006194:	46bd      	mov	sp, r7
 8006196:	bc80      	pop	{r7}
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	40012c00 	.word	0x40012c00

080061a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	021b      	lsls	r3, r3, #8
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	031b      	lsls	r3, r3, #12
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a0f      	ldr	r2, [pc, #60]	; (8006238 <TIM_OC4_SetConfig+0x98>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d109      	bne.n	8006214 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006206:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	019b      	lsls	r3, r3, #6
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4313      	orrs	r3, r2
 8006212:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	621a      	str	r2, [r3, #32]
}
 800622e:	bf00      	nop
 8006230:	371c      	adds	r7, #28
 8006232:	46bd      	mov	sp, r7
 8006234:	bc80      	pop	{r7}
 8006236:	4770      	bx	lr
 8006238:	40012c00 	.word	0x40012c00

0800623c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
 8006248:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	f023 0201 	bic.w	r2, r3, #1
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4a1f      	ldr	r2, [pc, #124]	; (80062e4 <TIM_TI1_SetConfig+0xa8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00b      	beq.n	8006282 <TIM_TI1_SetConfig+0x46>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006270:	d007      	beq.n	8006282 <TIM_TI1_SetConfig+0x46>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4a1c      	ldr	r2, [pc, #112]	; (80062e8 <TIM_TI1_SetConfig+0xac>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d003      	beq.n	8006282 <TIM_TI1_SetConfig+0x46>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4a1b      	ldr	r2, [pc, #108]	; (80062ec <TIM_TI1_SetConfig+0xb0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d101      	bne.n	8006286 <TIM_TI1_SetConfig+0x4a>
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <TIM_TI1_SetConfig+0x4c>
 8006286:	2300      	movs	r3, #0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d008      	beq.n	800629e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f023 0303 	bic.w	r3, r3, #3
 8006292:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4313      	orrs	r3, r2
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	e003      	b.n	80062a6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	011b      	lsls	r3, r3, #4
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f023 030a 	bic.w	r3, r3, #10
 80062c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f003 030a 	and.w	r3, r3, #10
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	621a      	str	r2, [r3, #32]
}
 80062da:	bf00      	nop
 80062dc:	371c      	adds	r7, #28
 80062de:	46bd      	mov	sp, r7
 80062e0:	bc80      	pop	{r7}
 80062e2:	4770      	bx	lr
 80062e4:	40012c00 	.word	0x40012c00
 80062e8:	40000400 	.word	0x40000400
 80062ec:	40000800 	.word	0x40000800

080062f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f023 0201 	bic.w	r2, r3, #1
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800631a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	011b      	lsls	r3, r3, #4
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	4313      	orrs	r3, r2
 8006324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f023 030a 	bic.w	r3, r3, #10
 800632c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	4313      	orrs	r3, r2
 8006334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	621a      	str	r2, [r3, #32]
}
 8006342:	bf00      	nop
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	bc80      	pop	{r7}
 800634a:	4770      	bx	lr

0800634c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	f023 0210 	bic.w	r2, r3, #16
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006378:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	021b      	lsls	r3, r3, #8
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800638a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	031b      	lsls	r3, r3, #12
 8006390:	b29b      	uxth	r3, r3
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800639e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	011b      	lsls	r3, r3, #4
 80063a4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	621a      	str	r2, [r3, #32]
}
 80063ba:	bf00      	nop
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	bc80      	pop	{r7}
 80063c2:	4770      	bx	lr

080063c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	f023 0210 	bic.w	r2, r3, #16
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	031b      	lsls	r3, r3, #12
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006400:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	011b      	lsls	r3, r3, #4
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	4313      	orrs	r3, r2
 800640a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	621a      	str	r2, [r3, #32]
}
 8006418:	bf00      	nop
 800641a:	371c      	adds	r7, #28
 800641c:	46bd      	mov	sp, r7
 800641e:	bc80      	pop	{r7}
 8006420:	4770      	bx	lr

08006422 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006422:	b480      	push	{r7}
 8006424:	b087      	sub	sp, #28
 8006426:	af00      	add	r7, sp, #0
 8006428:	60f8      	str	r0, [r7, #12]
 800642a:	60b9      	str	r1, [r7, #8]
 800642c:	607a      	str	r2, [r7, #4]
 800642e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f023 0303 	bic.w	r3, r3, #3
 800644e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800645e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	b2db      	uxtb	r3, r3
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006472:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	021b      	lsls	r3, r3, #8
 8006478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	4313      	orrs	r3, r2
 8006480:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	621a      	str	r2, [r3, #32]
}
 800648e:	bf00      	nop
 8006490:	371c      	adds	r7, #28
 8006492:	46bd      	mov	sp, r7
 8006494:	bc80      	pop	{r7}
 8006496:	4770      	bx	lr

08006498 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
 80064a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	021b      	lsls	r3, r3, #8
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	031b      	lsls	r3, r3, #12
 80064dc:	b29b      	uxth	r3, r3
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	031b      	lsls	r3, r3, #12
 80064f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	621a      	str	r2, [r3, #32]
}
 8006506:	bf00      	nop
 8006508:	371c      	adds	r7, #28
 800650a:	46bd      	mov	sp, r7
 800650c:	bc80      	pop	{r7}
 800650e:	4770      	bx	lr

08006510 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006526:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4313      	orrs	r3, r2
 800652e:	f043 0307 	orr.w	r3, r3, #7
 8006532:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	609a      	str	r2, [r3, #8]
}
 800653a:	bf00      	nop
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	bc80      	pop	{r7}
 8006542:	4770      	bx	lr

08006544 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800655e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	021a      	lsls	r2, r3, #8
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	431a      	orrs	r2, r3
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4313      	orrs	r3, r2
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	609a      	str	r2, [r3, #8]
}
 8006578:	bf00      	nop
 800657a:	371c      	adds	r7, #28
 800657c:	46bd      	mov	sp, r7
 800657e:	bc80      	pop	{r7}
 8006580:	4770      	bx	lr

08006582 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006582:	b480      	push	{r7}
 8006584:	b087      	sub	sp, #28
 8006586:	af00      	add	r7, sp, #0
 8006588:	60f8      	str	r0, [r7, #12]
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f003 031f 	and.w	r3, r3, #31
 8006594:	2201      	movs	r2, #1
 8006596:	fa02 f303 	lsl.w	r3, r2, r3
 800659a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a1a      	ldr	r2, [r3, #32]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	43db      	mvns	r3, r3
 80065a4:	401a      	ands	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6a1a      	ldr	r2, [r3, #32]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f003 031f 	and.w	r3, r3, #31
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ba:	431a      	orrs	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	621a      	str	r2, [r3, #32]
}
 80065c0:	bf00      	nop
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bc80      	pop	{r7}
 80065c8:	4770      	bx	lr
	...

080065cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d101      	bne.n	80065e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065e0:	2302      	movs	r3, #2
 80065e2:	e046      	b.n	8006672 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a16      	ldr	r2, [pc, #88]	; (800667c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00e      	beq.n	8006646 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006630:	d009      	beq.n	8006646 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a12      	ldr	r2, [pc, #72]	; (8006680 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d004      	beq.n	8006646 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a10      	ldr	r2, [pc, #64]	; (8006684 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d10c      	bne.n	8006660 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800664c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	4313      	orrs	r3, r2
 8006656:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	bc80      	pop	{r7}
 800667a:	4770      	bx	lr
 800667c:	40012c00 	.word	0x40012c00
 8006680:	40000400 	.word	0x40000400
 8006684:	40000800 	.word	0x40000800

08006688 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	bc80      	pop	{r7}
 8006698:	4770      	bx	lr

0800669a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bc80      	pop	{r7}
 80066aa:	4770      	bx	lr

080066ac <__errno>:
 80066ac:	4b01      	ldr	r3, [pc, #4]	; (80066b4 <__errno+0x8>)
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	20000048 	.word	0x20000048

080066b8 <__libc_init_array>:
 80066b8:	b570      	push	{r4, r5, r6, lr}
 80066ba:	2600      	movs	r6, #0
 80066bc:	4d0c      	ldr	r5, [pc, #48]	; (80066f0 <__libc_init_array+0x38>)
 80066be:	4c0d      	ldr	r4, [pc, #52]	; (80066f4 <__libc_init_array+0x3c>)
 80066c0:	1b64      	subs	r4, r4, r5
 80066c2:	10a4      	asrs	r4, r4, #2
 80066c4:	42a6      	cmp	r6, r4
 80066c6:	d109      	bne.n	80066dc <__libc_init_array+0x24>
 80066c8:	f004 fdd8 	bl	800b27c <_init>
 80066cc:	2600      	movs	r6, #0
 80066ce:	4d0a      	ldr	r5, [pc, #40]	; (80066f8 <__libc_init_array+0x40>)
 80066d0:	4c0a      	ldr	r4, [pc, #40]	; (80066fc <__libc_init_array+0x44>)
 80066d2:	1b64      	subs	r4, r4, r5
 80066d4:	10a4      	asrs	r4, r4, #2
 80066d6:	42a6      	cmp	r6, r4
 80066d8:	d105      	bne.n	80066e6 <__libc_init_array+0x2e>
 80066da:	bd70      	pop	{r4, r5, r6, pc}
 80066dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80066e0:	4798      	blx	r3
 80066e2:	3601      	adds	r6, #1
 80066e4:	e7ee      	b.n	80066c4 <__libc_init_array+0xc>
 80066e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ea:	4798      	blx	r3
 80066ec:	3601      	adds	r6, #1
 80066ee:	e7f2      	b.n	80066d6 <__libc_init_array+0x1e>
 80066f0:	0800b8a8 	.word	0x0800b8a8
 80066f4:	0800b8a8 	.word	0x0800b8a8
 80066f8:	0800b8a8 	.word	0x0800b8a8
 80066fc:	0800b8ac 	.word	0x0800b8ac

08006700 <memset>:
 8006700:	4603      	mov	r3, r0
 8006702:	4402      	add	r2, r0
 8006704:	4293      	cmp	r3, r2
 8006706:	d100      	bne.n	800670a <memset+0xa>
 8006708:	4770      	bx	lr
 800670a:	f803 1b01 	strb.w	r1, [r3], #1
 800670e:	e7f9      	b.n	8006704 <memset+0x4>

08006710 <__cvt>:
 8006710:	2b00      	cmp	r3, #0
 8006712:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006716:	461f      	mov	r7, r3
 8006718:	bfbb      	ittet	lt
 800671a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800671e:	461f      	movlt	r7, r3
 8006720:	2300      	movge	r3, #0
 8006722:	232d      	movlt	r3, #45	; 0x2d
 8006724:	b088      	sub	sp, #32
 8006726:	4614      	mov	r4, r2
 8006728:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800672a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800672c:	7013      	strb	r3, [r2, #0]
 800672e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006730:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006734:	f023 0820 	bic.w	r8, r3, #32
 8006738:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800673c:	d005      	beq.n	800674a <__cvt+0x3a>
 800673e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006742:	d100      	bne.n	8006746 <__cvt+0x36>
 8006744:	3501      	adds	r5, #1
 8006746:	2302      	movs	r3, #2
 8006748:	e000      	b.n	800674c <__cvt+0x3c>
 800674a:	2303      	movs	r3, #3
 800674c:	aa07      	add	r2, sp, #28
 800674e:	9204      	str	r2, [sp, #16]
 8006750:	aa06      	add	r2, sp, #24
 8006752:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006756:	e9cd 3500 	strd	r3, r5, [sp]
 800675a:	4622      	mov	r2, r4
 800675c:	463b      	mov	r3, r7
 800675e:	f000 fcc3 	bl	80070e8 <_dtoa_r>
 8006762:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006766:	4606      	mov	r6, r0
 8006768:	d102      	bne.n	8006770 <__cvt+0x60>
 800676a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800676c:	07db      	lsls	r3, r3, #31
 800676e:	d522      	bpl.n	80067b6 <__cvt+0xa6>
 8006770:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006774:	eb06 0905 	add.w	r9, r6, r5
 8006778:	d110      	bne.n	800679c <__cvt+0x8c>
 800677a:	7833      	ldrb	r3, [r6, #0]
 800677c:	2b30      	cmp	r3, #48	; 0x30
 800677e:	d10a      	bne.n	8006796 <__cvt+0x86>
 8006780:	2200      	movs	r2, #0
 8006782:	2300      	movs	r3, #0
 8006784:	4620      	mov	r0, r4
 8006786:	4639      	mov	r1, r7
 8006788:	f7fa f90e 	bl	80009a8 <__aeabi_dcmpeq>
 800678c:	b918      	cbnz	r0, 8006796 <__cvt+0x86>
 800678e:	f1c5 0501 	rsb	r5, r5, #1
 8006792:	f8ca 5000 	str.w	r5, [sl]
 8006796:	f8da 3000 	ldr.w	r3, [sl]
 800679a:	4499      	add	r9, r3
 800679c:	2200      	movs	r2, #0
 800679e:	2300      	movs	r3, #0
 80067a0:	4620      	mov	r0, r4
 80067a2:	4639      	mov	r1, r7
 80067a4:	f7fa f900 	bl	80009a8 <__aeabi_dcmpeq>
 80067a8:	b108      	cbz	r0, 80067ae <__cvt+0x9e>
 80067aa:	f8cd 901c 	str.w	r9, [sp, #28]
 80067ae:	2230      	movs	r2, #48	; 0x30
 80067b0:	9b07      	ldr	r3, [sp, #28]
 80067b2:	454b      	cmp	r3, r9
 80067b4:	d307      	bcc.n	80067c6 <__cvt+0xb6>
 80067b6:	4630      	mov	r0, r6
 80067b8:	9b07      	ldr	r3, [sp, #28]
 80067ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80067bc:	1b9b      	subs	r3, r3, r6
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	b008      	add	sp, #32
 80067c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c6:	1c59      	adds	r1, r3, #1
 80067c8:	9107      	str	r1, [sp, #28]
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	e7f0      	b.n	80067b0 <__cvt+0xa0>

080067ce <__exponent>:
 80067ce:	4603      	mov	r3, r0
 80067d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067d2:	2900      	cmp	r1, #0
 80067d4:	f803 2b02 	strb.w	r2, [r3], #2
 80067d8:	bfb6      	itet	lt
 80067da:	222d      	movlt	r2, #45	; 0x2d
 80067dc:	222b      	movge	r2, #43	; 0x2b
 80067de:	4249      	neglt	r1, r1
 80067e0:	2909      	cmp	r1, #9
 80067e2:	7042      	strb	r2, [r0, #1]
 80067e4:	dd2b      	ble.n	800683e <__exponent+0x70>
 80067e6:	f10d 0407 	add.w	r4, sp, #7
 80067ea:	46a4      	mov	ip, r4
 80067ec:	270a      	movs	r7, #10
 80067ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80067f2:	460a      	mov	r2, r1
 80067f4:	46a6      	mov	lr, r4
 80067f6:	fb07 1516 	mls	r5, r7, r6, r1
 80067fa:	2a63      	cmp	r2, #99	; 0x63
 80067fc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006800:	4631      	mov	r1, r6
 8006802:	f104 34ff 	add.w	r4, r4, #4294967295
 8006806:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800680a:	dcf0      	bgt.n	80067ee <__exponent+0x20>
 800680c:	3130      	adds	r1, #48	; 0x30
 800680e:	f1ae 0502 	sub.w	r5, lr, #2
 8006812:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006816:	4629      	mov	r1, r5
 8006818:	1c44      	adds	r4, r0, #1
 800681a:	4561      	cmp	r1, ip
 800681c:	d30a      	bcc.n	8006834 <__exponent+0x66>
 800681e:	f10d 0209 	add.w	r2, sp, #9
 8006822:	eba2 020e 	sub.w	r2, r2, lr
 8006826:	4565      	cmp	r5, ip
 8006828:	bf88      	it	hi
 800682a:	2200      	movhi	r2, #0
 800682c:	4413      	add	r3, r2
 800682e:	1a18      	subs	r0, r3, r0
 8006830:	b003      	add	sp, #12
 8006832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006834:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006838:	f804 2f01 	strb.w	r2, [r4, #1]!
 800683c:	e7ed      	b.n	800681a <__exponent+0x4c>
 800683e:	2330      	movs	r3, #48	; 0x30
 8006840:	3130      	adds	r1, #48	; 0x30
 8006842:	7083      	strb	r3, [r0, #2]
 8006844:	70c1      	strb	r1, [r0, #3]
 8006846:	1d03      	adds	r3, r0, #4
 8006848:	e7f1      	b.n	800682e <__exponent+0x60>
	...

0800684c <_printf_float>:
 800684c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006850:	b091      	sub	sp, #68	; 0x44
 8006852:	460c      	mov	r4, r1
 8006854:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006858:	4616      	mov	r6, r2
 800685a:	461f      	mov	r7, r3
 800685c:	4605      	mov	r5, r0
 800685e:	f001 fa31 	bl	8007cc4 <_localeconv_r>
 8006862:	6803      	ldr	r3, [r0, #0]
 8006864:	4618      	mov	r0, r3
 8006866:	9309      	str	r3, [sp, #36]	; 0x24
 8006868:	f7f9 fc72 	bl	8000150 <strlen>
 800686c:	2300      	movs	r3, #0
 800686e:	930e      	str	r3, [sp, #56]	; 0x38
 8006870:	f8d8 3000 	ldr.w	r3, [r8]
 8006874:	900a      	str	r0, [sp, #40]	; 0x28
 8006876:	3307      	adds	r3, #7
 8006878:	f023 0307 	bic.w	r3, r3, #7
 800687c:	f103 0208 	add.w	r2, r3, #8
 8006880:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006884:	f8d4 b000 	ldr.w	fp, [r4]
 8006888:	f8c8 2000 	str.w	r2, [r8]
 800688c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006890:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006894:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006898:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800689c:	930b      	str	r3, [sp, #44]	; 0x2c
 800689e:	f04f 32ff 	mov.w	r2, #4294967295
 80068a2:	4640      	mov	r0, r8
 80068a4:	4b9c      	ldr	r3, [pc, #624]	; (8006b18 <_printf_float+0x2cc>)
 80068a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068a8:	f7fa f8b0 	bl	8000a0c <__aeabi_dcmpun>
 80068ac:	bb70      	cbnz	r0, 800690c <_printf_float+0xc0>
 80068ae:	f04f 32ff 	mov.w	r2, #4294967295
 80068b2:	4640      	mov	r0, r8
 80068b4:	4b98      	ldr	r3, [pc, #608]	; (8006b18 <_printf_float+0x2cc>)
 80068b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068b8:	f7fa f88a 	bl	80009d0 <__aeabi_dcmple>
 80068bc:	bb30      	cbnz	r0, 800690c <_printf_float+0xc0>
 80068be:	2200      	movs	r2, #0
 80068c0:	2300      	movs	r3, #0
 80068c2:	4640      	mov	r0, r8
 80068c4:	4651      	mov	r1, sl
 80068c6:	f7fa f879 	bl	80009bc <__aeabi_dcmplt>
 80068ca:	b110      	cbz	r0, 80068d2 <_printf_float+0x86>
 80068cc:	232d      	movs	r3, #45	; 0x2d
 80068ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068d2:	4b92      	ldr	r3, [pc, #584]	; (8006b1c <_printf_float+0x2d0>)
 80068d4:	4892      	ldr	r0, [pc, #584]	; (8006b20 <_printf_float+0x2d4>)
 80068d6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80068da:	bf94      	ite	ls
 80068dc:	4698      	movls	r8, r3
 80068de:	4680      	movhi	r8, r0
 80068e0:	2303      	movs	r3, #3
 80068e2:	f04f 0a00 	mov.w	sl, #0
 80068e6:	6123      	str	r3, [r4, #16]
 80068e8:	f02b 0304 	bic.w	r3, fp, #4
 80068ec:	6023      	str	r3, [r4, #0]
 80068ee:	4633      	mov	r3, r6
 80068f0:	4621      	mov	r1, r4
 80068f2:	4628      	mov	r0, r5
 80068f4:	9700      	str	r7, [sp, #0]
 80068f6:	aa0f      	add	r2, sp, #60	; 0x3c
 80068f8:	f000 f9d4 	bl	8006ca4 <_printf_common>
 80068fc:	3001      	adds	r0, #1
 80068fe:	f040 8090 	bne.w	8006a22 <_printf_float+0x1d6>
 8006902:	f04f 30ff 	mov.w	r0, #4294967295
 8006906:	b011      	add	sp, #68	; 0x44
 8006908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690c:	4642      	mov	r2, r8
 800690e:	4653      	mov	r3, sl
 8006910:	4640      	mov	r0, r8
 8006912:	4651      	mov	r1, sl
 8006914:	f7fa f87a 	bl	8000a0c <__aeabi_dcmpun>
 8006918:	b148      	cbz	r0, 800692e <_printf_float+0xe2>
 800691a:	f1ba 0f00 	cmp.w	sl, #0
 800691e:	bfb8      	it	lt
 8006920:	232d      	movlt	r3, #45	; 0x2d
 8006922:	4880      	ldr	r0, [pc, #512]	; (8006b24 <_printf_float+0x2d8>)
 8006924:	bfb8      	it	lt
 8006926:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800692a:	4b7f      	ldr	r3, [pc, #508]	; (8006b28 <_printf_float+0x2dc>)
 800692c:	e7d3      	b.n	80068d6 <_printf_float+0x8a>
 800692e:	6863      	ldr	r3, [r4, #4]
 8006930:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	d142      	bne.n	80069be <_printf_float+0x172>
 8006938:	2306      	movs	r3, #6
 800693a:	6063      	str	r3, [r4, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	9206      	str	r2, [sp, #24]
 8006940:	aa0e      	add	r2, sp, #56	; 0x38
 8006942:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006946:	aa0d      	add	r2, sp, #52	; 0x34
 8006948:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800694c:	9203      	str	r2, [sp, #12]
 800694e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006952:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006956:	6023      	str	r3, [r4, #0]
 8006958:	6863      	ldr	r3, [r4, #4]
 800695a:	4642      	mov	r2, r8
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	4628      	mov	r0, r5
 8006960:	4653      	mov	r3, sl
 8006962:	910b      	str	r1, [sp, #44]	; 0x2c
 8006964:	f7ff fed4 	bl	8006710 <__cvt>
 8006968:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800696a:	4680      	mov	r8, r0
 800696c:	2947      	cmp	r1, #71	; 0x47
 800696e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006970:	d108      	bne.n	8006984 <_printf_float+0x138>
 8006972:	1cc8      	adds	r0, r1, #3
 8006974:	db02      	blt.n	800697c <_printf_float+0x130>
 8006976:	6863      	ldr	r3, [r4, #4]
 8006978:	4299      	cmp	r1, r3
 800697a:	dd40      	ble.n	80069fe <_printf_float+0x1b2>
 800697c:	f1a9 0902 	sub.w	r9, r9, #2
 8006980:	fa5f f989 	uxtb.w	r9, r9
 8006984:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006988:	d81f      	bhi.n	80069ca <_printf_float+0x17e>
 800698a:	464a      	mov	r2, r9
 800698c:	3901      	subs	r1, #1
 800698e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006992:	910d      	str	r1, [sp, #52]	; 0x34
 8006994:	f7ff ff1b 	bl	80067ce <__exponent>
 8006998:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800699a:	4682      	mov	sl, r0
 800699c:	1813      	adds	r3, r2, r0
 800699e:	2a01      	cmp	r2, #1
 80069a0:	6123      	str	r3, [r4, #16]
 80069a2:	dc02      	bgt.n	80069aa <_printf_float+0x15e>
 80069a4:	6822      	ldr	r2, [r4, #0]
 80069a6:	07d2      	lsls	r2, r2, #31
 80069a8:	d501      	bpl.n	80069ae <_printf_float+0x162>
 80069aa:	3301      	adds	r3, #1
 80069ac:	6123      	str	r3, [r4, #16]
 80069ae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d09b      	beq.n	80068ee <_printf_float+0xa2>
 80069b6:	232d      	movs	r3, #45	; 0x2d
 80069b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069bc:	e797      	b.n	80068ee <_printf_float+0xa2>
 80069be:	2947      	cmp	r1, #71	; 0x47
 80069c0:	d1bc      	bne.n	800693c <_printf_float+0xf0>
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1ba      	bne.n	800693c <_printf_float+0xf0>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e7b7      	b.n	800693a <_printf_float+0xee>
 80069ca:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80069ce:	d118      	bne.n	8006a02 <_printf_float+0x1b6>
 80069d0:	2900      	cmp	r1, #0
 80069d2:	6863      	ldr	r3, [r4, #4]
 80069d4:	dd0b      	ble.n	80069ee <_printf_float+0x1a2>
 80069d6:	6121      	str	r1, [r4, #16]
 80069d8:	b913      	cbnz	r3, 80069e0 <_printf_float+0x194>
 80069da:	6822      	ldr	r2, [r4, #0]
 80069dc:	07d0      	lsls	r0, r2, #31
 80069de:	d502      	bpl.n	80069e6 <_printf_float+0x19a>
 80069e0:	3301      	adds	r3, #1
 80069e2:	440b      	add	r3, r1
 80069e4:	6123      	str	r3, [r4, #16]
 80069e6:	f04f 0a00 	mov.w	sl, #0
 80069ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80069ec:	e7df      	b.n	80069ae <_printf_float+0x162>
 80069ee:	b913      	cbnz	r3, 80069f6 <_printf_float+0x1aa>
 80069f0:	6822      	ldr	r2, [r4, #0]
 80069f2:	07d2      	lsls	r2, r2, #31
 80069f4:	d501      	bpl.n	80069fa <_printf_float+0x1ae>
 80069f6:	3302      	adds	r3, #2
 80069f8:	e7f4      	b.n	80069e4 <_printf_float+0x198>
 80069fa:	2301      	movs	r3, #1
 80069fc:	e7f2      	b.n	80069e4 <_printf_float+0x198>
 80069fe:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a04:	4299      	cmp	r1, r3
 8006a06:	db05      	blt.n	8006a14 <_printf_float+0x1c8>
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	6121      	str	r1, [r4, #16]
 8006a0c:	07d8      	lsls	r0, r3, #31
 8006a0e:	d5ea      	bpl.n	80069e6 <_printf_float+0x19a>
 8006a10:	1c4b      	adds	r3, r1, #1
 8006a12:	e7e7      	b.n	80069e4 <_printf_float+0x198>
 8006a14:	2900      	cmp	r1, #0
 8006a16:	bfcc      	ite	gt
 8006a18:	2201      	movgt	r2, #1
 8006a1a:	f1c1 0202 	rsble	r2, r1, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	e7e0      	b.n	80069e4 <_printf_float+0x198>
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	055a      	lsls	r2, r3, #21
 8006a26:	d407      	bmi.n	8006a38 <_printf_float+0x1ec>
 8006a28:	6923      	ldr	r3, [r4, #16]
 8006a2a:	4642      	mov	r2, r8
 8006a2c:	4631      	mov	r1, r6
 8006a2e:	4628      	mov	r0, r5
 8006a30:	47b8      	blx	r7
 8006a32:	3001      	adds	r0, #1
 8006a34:	d12b      	bne.n	8006a8e <_printf_float+0x242>
 8006a36:	e764      	b.n	8006902 <_printf_float+0xb6>
 8006a38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006a3c:	f240 80dd 	bls.w	8006bfa <_printf_float+0x3ae>
 8006a40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a44:	2200      	movs	r2, #0
 8006a46:	2300      	movs	r3, #0
 8006a48:	f7f9 ffae 	bl	80009a8 <__aeabi_dcmpeq>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d033      	beq.n	8006ab8 <_printf_float+0x26c>
 8006a50:	2301      	movs	r3, #1
 8006a52:	4631      	mov	r1, r6
 8006a54:	4628      	mov	r0, r5
 8006a56:	4a35      	ldr	r2, [pc, #212]	; (8006b2c <_printf_float+0x2e0>)
 8006a58:	47b8      	blx	r7
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	f43f af51 	beq.w	8006902 <_printf_float+0xb6>
 8006a60:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a64:	429a      	cmp	r2, r3
 8006a66:	db02      	blt.n	8006a6e <_printf_float+0x222>
 8006a68:	6823      	ldr	r3, [r4, #0]
 8006a6a:	07d8      	lsls	r0, r3, #31
 8006a6c:	d50f      	bpl.n	8006a8e <_printf_float+0x242>
 8006a6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a72:	4631      	mov	r1, r6
 8006a74:	4628      	mov	r0, r5
 8006a76:	47b8      	blx	r7
 8006a78:	3001      	adds	r0, #1
 8006a7a:	f43f af42 	beq.w	8006902 <_printf_float+0xb6>
 8006a7e:	f04f 0800 	mov.w	r8, #0
 8006a82:	f104 091a 	add.w	r9, r4, #26
 8006a86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	4543      	cmp	r3, r8
 8006a8c:	dc09      	bgt.n	8006aa2 <_printf_float+0x256>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	079b      	lsls	r3, r3, #30
 8006a92:	f100 8102 	bmi.w	8006c9a <_printf_float+0x44e>
 8006a96:	68e0      	ldr	r0, [r4, #12]
 8006a98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a9a:	4298      	cmp	r0, r3
 8006a9c:	bfb8      	it	lt
 8006a9e:	4618      	movlt	r0, r3
 8006aa0:	e731      	b.n	8006906 <_printf_float+0xba>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	464a      	mov	r2, r9
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	47b8      	blx	r7
 8006aac:	3001      	adds	r0, #1
 8006aae:	f43f af28 	beq.w	8006902 <_printf_float+0xb6>
 8006ab2:	f108 0801 	add.w	r8, r8, #1
 8006ab6:	e7e6      	b.n	8006a86 <_printf_float+0x23a>
 8006ab8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	dc38      	bgt.n	8006b30 <_printf_float+0x2e4>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	4631      	mov	r1, r6
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	4a19      	ldr	r2, [pc, #100]	; (8006b2c <_printf_float+0x2e0>)
 8006ac6:	47b8      	blx	r7
 8006ac8:	3001      	adds	r0, #1
 8006aca:	f43f af1a 	beq.w	8006902 <_printf_float+0xb6>
 8006ace:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	d102      	bne.n	8006adc <_printf_float+0x290>
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	07d9      	lsls	r1, r3, #31
 8006ada:	d5d8      	bpl.n	8006a8e <_printf_float+0x242>
 8006adc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ae0:	4631      	mov	r1, r6
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	47b8      	blx	r7
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	f43f af0b 	beq.w	8006902 <_printf_float+0xb6>
 8006aec:	f04f 0900 	mov.w	r9, #0
 8006af0:	f104 0a1a 	add.w	sl, r4, #26
 8006af4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006af6:	425b      	negs	r3, r3
 8006af8:	454b      	cmp	r3, r9
 8006afa:	dc01      	bgt.n	8006b00 <_printf_float+0x2b4>
 8006afc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006afe:	e794      	b.n	8006a2a <_printf_float+0x1de>
 8006b00:	2301      	movs	r3, #1
 8006b02:	4652      	mov	r2, sl
 8006b04:	4631      	mov	r1, r6
 8006b06:	4628      	mov	r0, r5
 8006b08:	47b8      	blx	r7
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	f43f aef9 	beq.w	8006902 <_printf_float+0xb6>
 8006b10:	f109 0901 	add.w	r9, r9, #1
 8006b14:	e7ee      	b.n	8006af4 <_printf_float+0x2a8>
 8006b16:	bf00      	nop
 8006b18:	7fefffff 	.word	0x7fefffff
 8006b1c:	0800b2c4 	.word	0x0800b2c4
 8006b20:	0800b2c8 	.word	0x0800b2c8
 8006b24:	0800b2d0 	.word	0x0800b2d0
 8006b28:	0800b2cc 	.word	0x0800b2cc
 8006b2c:	0800b2d4 	.word	0x0800b2d4
 8006b30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b34:	429a      	cmp	r2, r3
 8006b36:	bfa8      	it	ge
 8006b38:	461a      	movge	r2, r3
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	4691      	mov	r9, r2
 8006b3e:	dc37      	bgt.n	8006bb0 <_printf_float+0x364>
 8006b40:	f04f 0b00 	mov.w	fp, #0
 8006b44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b48:	f104 021a 	add.w	r2, r4, #26
 8006b4c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006b50:	ebaa 0309 	sub.w	r3, sl, r9
 8006b54:	455b      	cmp	r3, fp
 8006b56:	dc33      	bgt.n	8006bc0 <_printf_float+0x374>
 8006b58:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	db3b      	blt.n	8006bd8 <_printf_float+0x38c>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	07da      	lsls	r2, r3, #31
 8006b64:	d438      	bmi.n	8006bd8 <_printf_float+0x38c>
 8006b66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b68:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006b6a:	eba3 020a 	sub.w	r2, r3, sl
 8006b6e:	eba3 0901 	sub.w	r9, r3, r1
 8006b72:	4591      	cmp	r9, r2
 8006b74:	bfa8      	it	ge
 8006b76:	4691      	movge	r9, r2
 8006b78:	f1b9 0f00 	cmp.w	r9, #0
 8006b7c:	dc34      	bgt.n	8006be8 <_printf_float+0x39c>
 8006b7e:	f04f 0800 	mov.w	r8, #0
 8006b82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b86:	f104 0a1a 	add.w	sl, r4, #26
 8006b8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006b8e:	1a9b      	subs	r3, r3, r2
 8006b90:	eba3 0309 	sub.w	r3, r3, r9
 8006b94:	4543      	cmp	r3, r8
 8006b96:	f77f af7a 	ble.w	8006a8e <_printf_float+0x242>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	4652      	mov	r2, sl
 8006b9e:	4631      	mov	r1, r6
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	47b8      	blx	r7
 8006ba4:	3001      	adds	r0, #1
 8006ba6:	f43f aeac 	beq.w	8006902 <_printf_float+0xb6>
 8006baa:	f108 0801 	add.w	r8, r8, #1
 8006bae:	e7ec      	b.n	8006b8a <_printf_float+0x33e>
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	4631      	mov	r1, r6
 8006bb4:	4642      	mov	r2, r8
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	47b8      	blx	r7
 8006bba:	3001      	adds	r0, #1
 8006bbc:	d1c0      	bne.n	8006b40 <_printf_float+0x2f4>
 8006bbe:	e6a0      	b.n	8006902 <_printf_float+0xb6>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	920b      	str	r2, [sp, #44]	; 0x2c
 8006bc8:	47b8      	blx	r7
 8006bca:	3001      	adds	r0, #1
 8006bcc:	f43f ae99 	beq.w	8006902 <_printf_float+0xb6>
 8006bd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bd2:	f10b 0b01 	add.w	fp, fp, #1
 8006bd6:	e7b9      	b.n	8006b4c <_printf_float+0x300>
 8006bd8:	4631      	mov	r1, r6
 8006bda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bde:	4628      	mov	r0, r5
 8006be0:	47b8      	blx	r7
 8006be2:	3001      	adds	r0, #1
 8006be4:	d1bf      	bne.n	8006b66 <_printf_float+0x31a>
 8006be6:	e68c      	b.n	8006902 <_printf_float+0xb6>
 8006be8:	464b      	mov	r3, r9
 8006bea:	4631      	mov	r1, r6
 8006bec:	4628      	mov	r0, r5
 8006bee:	eb08 020a 	add.w	r2, r8, sl
 8006bf2:	47b8      	blx	r7
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	d1c2      	bne.n	8006b7e <_printf_float+0x332>
 8006bf8:	e683      	b.n	8006902 <_printf_float+0xb6>
 8006bfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bfc:	2a01      	cmp	r2, #1
 8006bfe:	dc01      	bgt.n	8006c04 <_printf_float+0x3b8>
 8006c00:	07db      	lsls	r3, r3, #31
 8006c02:	d537      	bpl.n	8006c74 <_printf_float+0x428>
 8006c04:	2301      	movs	r3, #1
 8006c06:	4642      	mov	r2, r8
 8006c08:	4631      	mov	r1, r6
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	47b8      	blx	r7
 8006c0e:	3001      	adds	r0, #1
 8006c10:	f43f ae77 	beq.w	8006902 <_printf_float+0xb6>
 8006c14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c18:	4631      	mov	r1, r6
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	47b8      	blx	r7
 8006c1e:	3001      	adds	r0, #1
 8006c20:	f43f ae6f 	beq.w	8006902 <_printf_float+0xb6>
 8006c24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f7f9 febc 	bl	80009a8 <__aeabi_dcmpeq>
 8006c30:	b9d8      	cbnz	r0, 8006c6a <_printf_float+0x41e>
 8006c32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c34:	f108 0201 	add.w	r2, r8, #1
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	47b8      	blx	r7
 8006c40:	3001      	adds	r0, #1
 8006c42:	d10e      	bne.n	8006c62 <_printf_float+0x416>
 8006c44:	e65d      	b.n	8006902 <_printf_float+0xb6>
 8006c46:	2301      	movs	r3, #1
 8006c48:	464a      	mov	r2, r9
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	47b8      	blx	r7
 8006c50:	3001      	adds	r0, #1
 8006c52:	f43f ae56 	beq.w	8006902 <_printf_float+0xb6>
 8006c56:	f108 0801 	add.w	r8, r8, #1
 8006c5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	4543      	cmp	r3, r8
 8006c60:	dcf1      	bgt.n	8006c46 <_printf_float+0x3fa>
 8006c62:	4653      	mov	r3, sl
 8006c64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c68:	e6e0      	b.n	8006a2c <_printf_float+0x1e0>
 8006c6a:	f04f 0800 	mov.w	r8, #0
 8006c6e:	f104 091a 	add.w	r9, r4, #26
 8006c72:	e7f2      	b.n	8006c5a <_printf_float+0x40e>
 8006c74:	2301      	movs	r3, #1
 8006c76:	4642      	mov	r2, r8
 8006c78:	e7df      	b.n	8006c3a <_printf_float+0x3ee>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	464a      	mov	r2, r9
 8006c7e:	4631      	mov	r1, r6
 8006c80:	4628      	mov	r0, r5
 8006c82:	47b8      	blx	r7
 8006c84:	3001      	adds	r0, #1
 8006c86:	f43f ae3c 	beq.w	8006902 <_printf_float+0xb6>
 8006c8a:	f108 0801 	add.w	r8, r8, #1
 8006c8e:	68e3      	ldr	r3, [r4, #12]
 8006c90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006c92:	1a5b      	subs	r3, r3, r1
 8006c94:	4543      	cmp	r3, r8
 8006c96:	dcf0      	bgt.n	8006c7a <_printf_float+0x42e>
 8006c98:	e6fd      	b.n	8006a96 <_printf_float+0x24a>
 8006c9a:	f04f 0800 	mov.w	r8, #0
 8006c9e:	f104 0919 	add.w	r9, r4, #25
 8006ca2:	e7f4      	b.n	8006c8e <_printf_float+0x442>

08006ca4 <_printf_common>:
 8006ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca8:	4616      	mov	r6, r2
 8006caa:	4699      	mov	r9, r3
 8006cac:	688a      	ldr	r2, [r1, #8]
 8006cae:	690b      	ldr	r3, [r1, #16]
 8006cb0:	4607      	mov	r7, r0
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	bfb8      	it	lt
 8006cb6:	4613      	movlt	r3, r2
 8006cb8:	6033      	str	r3, [r6, #0]
 8006cba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cc4:	b10a      	cbz	r2, 8006cca <_printf_common+0x26>
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	6033      	str	r3, [r6, #0]
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	0699      	lsls	r1, r3, #26
 8006cce:	bf42      	ittt	mi
 8006cd0:	6833      	ldrmi	r3, [r6, #0]
 8006cd2:	3302      	addmi	r3, #2
 8006cd4:	6033      	strmi	r3, [r6, #0]
 8006cd6:	6825      	ldr	r5, [r4, #0]
 8006cd8:	f015 0506 	ands.w	r5, r5, #6
 8006cdc:	d106      	bne.n	8006cec <_printf_common+0x48>
 8006cde:	f104 0a19 	add.w	sl, r4, #25
 8006ce2:	68e3      	ldr	r3, [r4, #12]
 8006ce4:	6832      	ldr	r2, [r6, #0]
 8006ce6:	1a9b      	subs	r3, r3, r2
 8006ce8:	42ab      	cmp	r3, r5
 8006cea:	dc28      	bgt.n	8006d3e <_printf_common+0x9a>
 8006cec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cf0:	1e13      	subs	r3, r2, #0
 8006cf2:	6822      	ldr	r2, [r4, #0]
 8006cf4:	bf18      	it	ne
 8006cf6:	2301      	movne	r3, #1
 8006cf8:	0692      	lsls	r2, r2, #26
 8006cfa:	d42d      	bmi.n	8006d58 <_printf_common+0xb4>
 8006cfc:	4649      	mov	r1, r9
 8006cfe:	4638      	mov	r0, r7
 8006d00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d04:	47c0      	blx	r8
 8006d06:	3001      	adds	r0, #1
 8006d08:	d020      	beq.n	8006d4c <_printf_common+0xa8>
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	68e5      	ldr	r5, [r4, #12]
 8006d0e:	f003 0306 	and.w	r3, r3, #6
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	bf18      	it	ne
 8006d16:	2500      	movne	r5, #0
 8006d18:	6832      	ldr	r2, [r6, #0]
 8006d1a:	f04f 0600 	mov.w	r6, #0
 8006d1e:	68a3      	ldr	r3, [r4, #8]
 8006d20:	bf08      	it	eq
 8006d22:	1aad      	subeq	r5, r5, r2
 8006d24:	6922      	ldr	r2, [r4, #16]
 8006d26:	bf08      	it	eq
 8006d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	bfc4      	itt	gt
 8006d30:	1a9b      	subgt	r3, r3, r2
 8006d32:	18ed      	addgt	r5, r5, r3
 8006d34:	341a      	adds	r4, #26
 8006d36:	42b5      	cmp	r5, r6
 8006d38:	d11a      	bne.n	8006d70 <_printf_common+0xcc>
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	e008      	b.n	8006d50 <_printf_common+0xac>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	4652      	mov	r2, sl
 8006d42:	4649      	mov	r1, r9
 8006d44:	4638      	mov	r0, r7
 8006d46:	47c0      	blx	r8
 8006d48:	3001      	adds	r0, #1
 8006d4a:	d103      	bne.n	8006d54 <_printf_common+0xb0>
 8006d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d54:	3501      	adds	r5, #1
 8006d56:	e7c4      	b.n	8006ce2 <_printf_common+0x3e>
 8006d58:	2030      	movs	r0, #48	; 0x30
 8006d5a:	18e1      	adds	r1, r4, r3
 8006d5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d60:	1c5a      	adds	r2, r3, #1
 8006d62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d66:	4422      	add	r2, r4
 8006d68:	3302      	adds	r3, #2
 8006d6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d6e:	e7c5      	b.n	8006cfc <_printf_common+0x58>
 8006d70:	2301      	movs	r3, #1
 8006d72:	4622      	mov	r2, r4
 8006d74:	4649      	mov	r1, r9
 8006d76:	4638      	mov	r0, r7
 8006d78:	47c0      	blx	r8
 8006d7a:	3001      	adds	r0, #1
 8006d7c:	d0e6      	beq.n	8006d4c <_printf_common+0xa8>
 8006d7e:	3601      	adds	r6, #1
 8006d80:	e7d9      	b.n	8006d36 <_printf_common+0x92>
	...

08006d84 <_printf_i>:
 8006d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d88:	7e0f      	ldrb	r7, [r1, #24]
 8006d8a:	4691      	mov	r9, r2
 8006d8c:	2f78      	cmp	r7, #120	; 0x78
 8006d8e:	4680      	mov	r8, r0
 8006d90:	460c      	mov	r4, r1
 8006d92:	469a      	mov	sl, r3
 8006d94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d9a:	d807      	bhi.n	8006dac <_printf_i+0x28>
 8006d9c:	2f62      	cmp	r7, #98	; 0x62
 8006d9e:	d80a      	bhi.n	8006db6 <_printf_i+0x32>
 8006da0:	2f00      	cmp	r7, #0
 8006da2:	f000 80d9 	beq.w	8006f58 <_printf_i+0x1d4>
 8006da6:	2f58      	cmp	r7, #88	; 0x58
 8006da8:	f000 80a4 	beq.w	8006ef4 <_printf_i+0x170>
 8006dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006db0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006db4:	e03a      	b.n	8006e2c <_printf_i+0xa8>
 8006db6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dba:	2b15      	cmp	r3, #21
 8006dbc:	d8f6      	bhi.n	8006dac <_printf_i+0x28>
 8006dbe:	a101      	add	r1, pc, #4	; (adr r1, 8006dc4 <_printf_i+0x40>)
 8006dc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dc4:	08006e1d 	.word	0x08006e1d
 8006dc8:	08006e31 	.word	0x08006e31
 8006dcc:	08006dad 	.word	0x08006dad
 8006dd0:	08006dad 	.word	0x08006dad
 8006dd4:	08006dad 	.word	0x08006dad
 8006dd8:	08006dad 	.word	0x08006dad
 8006ddc:	08006e31 	.word	0x08006e31
 8006de0:	08006dad 	.word	0x08006dad
 8006de4:	08006dad 	.word	0x08006dad
 8006de8:	08006dad 	.word	0x08006dad
 8006dec:	08006dad 	.word	0x08006dad
 8006df0:	08006f3f 	.word	0x08006f3f
 8006df4:	08006e61 	.word	0x08006e61
 8006df8:	08006f21 	.word	0x08006f21
 8006dfc:	08006dad 	.word	0x08006dad
 8006e00:	08006dad 	.word	0x08006dad
 8006e04:	08006f61 	.word	0x08006f61
 8006e08:	08006dad 	.word	0x08006dad
 8006e0c:	08006e61 	.word	0x08006e61
 8006e10:	08006dad 	.word	0x08006dad
 8006e14:	08006dad 	.word	0x08006dad
 8006e18:	08006f29 	.word	0x08006f29
 8006e1c:	682b      	ldr	r3, [r5, #0]
 8006e1e:	1d1a      	adds	r2, r3, #4
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	602a      	str	r2, [r5, #0]
 8006e24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e0a4      	b.n	8006f7a <_printf_i+0x1f6>
 8006e30:	6820      	ldr	r0, [r4, #0]
 8006e32:	6829      	ldr	r1, [r5, #0]
 8006e34:	0606      	lsls	r6, r0, #24
 8006e36:	f101 0304 	add.w	r3, r1, #4
 8006e3a:	d50a      	bpl.n	8006e52 <_printf_i+0xce>
 8006e3c:	680e      	ldr	r6, [r1, #0]
 8006e3e:	602b      	str	r3, [r5, #0]
 8006e40:	2e00      	cmp	r6, #0
 8006e42:	da03      	bge.n	8006e4c <_printf_i+0xc8>
 8006e44:	232d      	movs	r3, #45	; 0x2d
 8006e46:	4276      	negs	r6, r6
 8006e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e4c:	230a      	movs	r3, #10
 8006e4e:	485e      	ldr	r0, [pc, #376]	; (8006fc8 <_printf_i+0x244>)
 8006e50:	e019      	b.n	8006e86 <_printf_i+0x102>
 8006e52:	680e      	ldr	r6, [r1, #0]
 8006e54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e58:	602b      	str	r3, [r5, #0]
 8006e5a:	bf18      	it	ne
 8006e5c:	b236      	sxthne	r6, r6
 8006e5e:	e7ef      	b.n	8006e40 <_printf_i+0xbc>
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	6820      	ldr	r0, [r4, #0]
 8006e64:	1d19      	adds	r1, r3, #4
 8006e66:	6029      	str	r1, [r5, #0]
 8006e68:	0601      	lsls	r1, r0, #24
 8006e6a:	d501      	bpl.n	8006e70 <_printf_i+0xec>
 8006e6c:	681e      	ldr	r6, [r3, #0]
 8006e6e:	e002      	b.n	8006e76 <_printf_i+0xf2>
 8006e70:	0646      	lsls	r6, r0, #25
 8006e72:	d5fb      	bpl.n	8006e6c <_printf_i+0xe8>
 8006e74:	881e      	ldrh	r6, [r3, #0]
 8006e76:	2f6f      	cmp	r7, #111	; 0x6f
 8006e78:	bf0c      	ite	eq
 8006e7a:	2308      	moveq	r3, #8
 8006e7c:	230a      	movne	r3, #10
 8006e7e:	4852      	ldr	r0, [pc, #328]	; (8006fc8 <_printf_i+0x244>)
 8006e80:	2100      	movs	r1, #0
 8006e82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e86:	6865      	ldr	r5, [r4, #4]
 8006e88:	2d00      	cmp	r5, #0
 8006e8a:	bfa8      	it	ge
 8006e8c:	6821      	ldrge	r1, [r4, #0]
 8006e8e:	60a5      	str	r5, [r4, #8]
 8006e90:	bfa4      	itt	ge
 8006e92:	f021 0104 	bicge.w	r1, r1, #4
 8006e96:	6021      	strge	r1, [r4, #0]
 8006e98:	b90e      	cbnz	r6, 8006e9e <_printf_i+0x11a>
 8006e9a:	2d00      	cmp	r5, #0
 8006e9c:	d04d      	beq.n	8006f3a <_printf_i+0x1b6>
 8006e9e:	4615      	mov	r5, r2
 8006ea0:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ea4:	fb03 6711 	mls	r7, r3, r1, r6
 8006ea8:	5dc7      	ldrb	r7, [r0, r7]
 8006eaa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006eae:	4637      	mov	r7, r6
 8006eb0:	42bb      	cmp	r3, r7
 8006eb2:	460e      	mov	r6, r1
 8006eb4:	d9f4      	bls.n	8006ea0 <_printf_i+0x11c>
 8006eb6:	2b08      	cmp	r3, #8
 8006eb8:	d10b      	bne.n	8006ed2 <_printf_i+0x14e>
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	07de      	lsls	r6, r3, #31
 8006ebe:	d508      	bpl.n	8006ed2 <_printf_i+0x14e>
 8006ec0:	6923      	ldr	r3, [r4, #16]
 8006ec2:	6861      	ldr	r1, [r4, #4]
 8006ec4:	4299      	cmp	r1, r3
 8006ec6:	bfde      	ittt	le
 8006ec8:	2330      	movle	r3, #48	; 0x30
 8006eca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ece:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ed2:	1b52      	subs	r2, r2, r5
 8006ed4:	6122      	str	r2, [r4, #16]
 8006ed6:	464b      	mov	r3, r9
 8006ed8:	4621      	mov	r1, r4
 8006eda:	4640      	mov	r0, r8
 8006edc:	f8cd a000 	str.w	sl, [sp]
 8006ee0:	aa03      	add	r2, sp, #12
 8006ee2:	f7ff fedf 	bl	8006ca4 <_printf_common>
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	d14c      	bne.n	8006f84 <_printf_i+0x200>
 8006eea:	f04f 30ff 	mov.w	r0, #4294967295
 8006eee:	b004      	add	sp, #16
 8006ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef4:	4834      	ldr	r0, [pc, #208]	; (8006fc8 <_printf_i+0x244>)
 8006ef6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006efa:	6829      	ldr	r1, [r5, #0]
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f02:	6029      	str	r1, [r5, #0]
 8006f04:	061d      	lsls	r5, r3, #24
 8006f06:	d514      	bpl.n	8006f32 <_printf_i+0x1ae>
 8006f08:	07df      	lsls	r7, r3, #31
 8006f0a:	bf44      	itt	mi
 8006f0c:	f043 0320 	orrmi.w	r3, r3, #32
 8006f10:	6023      	strmi	r3, [r4, #0]
 8006f12:	b91e      	cbnz	r6, 8006f1c <_printf_i+0x198>
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	f023 0320 	bic.w	r3, r3, #32
 8006f1a:	6023      	str	r3, [r4, #0]
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	e7af      	b.n	8006e80 <_printf_i+0xfc>
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	f043 0320 	orr.w	r3, r3, #32
 8006f26:	6023      	str	r3, [r4, #0]
 8006f28:	2378      	movs	r3, #120	; 0x78
 8006f2a:	4828      	ldr	r0, [pc, #160]	; (8006fcc <_printf_i+0x248>)
 8006f2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f30:	e7e3      	b.n	8006efa <_printf_i+0x176>
 8006f32:	0659      	lsls	r1, r3, #25
 8006f34:	bf48      	it	mi
 8006f36:	b2b6      	uxthmi	r6, r6
 8006f38:	e7e6      	b.n	8006f08 <_printf_i+0x184>
 8006f3a:	4615      	mov	r5, r2
 8006f3c:	e7bb      	b.n	8006eb6 <_printf_i+0x132>
 8006f3e:	682b      	ldr	r3, [r5, #0]
 8006f40:	6826      	ldr	r6, [r4, #0]
 8006f42:	1d18      	adds	r0, r3, #4
 8006f44:	6961      	ldr	r1, [r4, #20]
 8006f46:	6028      	str	r0, [r5, #0]
 8006f48:	0635      	lsls	r5, r6, #24
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	d501      	bpl.n	8006f52 <_printf_i+0x1ce>
 8006f4e:	6019      	str	r1, [r3, #0]
 8006f50:	e002      	b.n	8006f58 <_printf_i+0x1d4>
 8006f52:	0670      	lsls	r0, r6, #25
 8006f54:	d5fb      	bpl.n	8006f4e <_printf_i+0x1ca>
 8006f56:	8019      	strh	r1, [r3, #0]
 8006f58:	2300      	movs	r3, #0
 8006f5a:	4615      	mov	r5, r2
 8006f5c:	6123      	str	r3, [r4, #16]
 8006f5e:	e7ba      	b.n	8006ed6 <_printf_i+0x152>
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	2100      	movs	r1, #0
 8006f64:	1d1a      	adds	r2, r3, #4
 8006f66:	602a      	str	r2, [r5, #0]
 8006f68:	681d      	ldr	r5, [r3, #0]
 8006f6a:	6862      	ldr	r2, [r4, #4]
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f000 feb5 	bl	8007cdc <memchr>
 8006f72:	b108      	cbz	r0, 8006f78 <_printf_i+0x1f4>
 8006f74:	1b40      	subs	r0, r0, r5
 8006f76:	6060      	str	r0, [r4, #4]
 8006f78:	6863      	ldr	r3, [r4, #4]
 8006f7a:	6123      	str	r3, [r4, #16]
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f82:	e7a8      	b.n	8006ed6 <_printf_i+0x152>
 8006f84:	462a      	mov	r2, r5
 8006f86:	4649      	mov	r1, r9
 8006f88:	4640      	mov	r0, r8
 8006f8a:	6923      	ldr	r3, [r4, #16]
 8006f8c:	47d0      	blx	sl
 8006f8e:	3001      	adds	r0, #1
 8006f90:	d0ab      	beq.n	8006eea <_printf_i+0x166>
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	079b      	lsls	r3, r3, #30
 8006f96:	d413      	bmi.n	8006fc0 <_printf_i+0x23c>
 8006f98:	68e0      	ldr	r0, [r4, #12]
 8006f9a:	9b03      	ldr	r3, [sp, #12]
 8006f9c:	4298      	cmp	r0, r3
 8006f9e:	bfb8      	it	lt
 8006fa0:	4618      	movlt	r0, r3
 8006fa2:	e7a4      	b.n	8006eee <_printf_i+0x16a>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	4632      	mov	r2, r6
 8006fa8:	4649      	mov	r1, r9
 8006faa:	4640      	mov	r0, r8
 8006fac:	47d0      	blx	sl
 8006fae:	3001      	adds	r0, #1
 8006fb0:	d09b      	beq.n	8006eea <_printf_i+0x166>
 8006fb2:	3501      	adds	r5, #1
 8006fb4:	68e3      	ldr	r3, [r4, #12]
 8006fb6:	9903      	ldr	r1, [sp, #12]
 8006fb8:	1a5b      	subs	r3, r3, r1
 8006fba:	42ab      	cmp	r3, r5
 8006fbc:	dcf2      	bgt.n	8006fa4 <_printf_i+0x220>
 8006fbe:	e7eb      	b.n	8006f98 <_printf_i+0x214>
 8006fc0:	2500      	movs	r5, #0
 8006fc2:	f104 0619 	add.w	r6, r4, #25
 8006fc6:	e7f5      	b.n	8006fb4 <_printf_i+0x230>
 8006fc8:	0800b2d6 	.word	0x0800b2d6
 8006fcc:	0800b2e7 	.word	0x0800b2e7

08006fd0 <quorem>:
 8006fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd4:	6903      	ldr	r3, [r0, #16]
 8006fd6:	690c      	ldr	r4, [r1, #16]
 8006fd8:	4607      	mov	r7, r0
 8006fda:	42a3      	cmp	r3, r4
 8006fdc:	f2c0 8082 	blt.w	80070e4 <quorem+0x114>
 8006fe0:	3c01      	subs	r4, #1
 8006fe2:	f100 0514 	add.w	r5, r0, #20
 8006fe6:	f101 0814 	add.w	r8, r1, #20
 8006fea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fee:	9301      	str	r3, [sp, #4]
 8006ff0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ff4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	fbb2 f6f3 	udiv	r6, r2, r3
 8007000:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007004:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007008:	d331      	bcc.n	800706e <quorem+0x9e>
 800700a:	f04f 0e00 	mov.w	lr, #0
 800700e:	4640      	mov	r0, r8
 8007010:	46ac      	mov	ip, r5
 8007012:	46f2      	mov	sl, lr
 8007014:	f850 2b04 	ldr.w	r2, [r0], #4
 8007018:	b293      	uxth	r3, r2
 800701a:	fb06 e303 	mla	r3, r6, r3, lr
 800701e:	0c12      	lsrs	r2, r2, #16
 8007020:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007024:	b29b      	uxth	r3, r3
 8007026:	fb06 e202 	mla	r2, r6, r2, lr
 800702a:	ebaa 0303 	sub.w	r3, sl, r3
 800702e:	f8dc a000 	ldr.w	sl, [ip]
 8007032:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007036:	fa1f fa8a 	uxth.w	sl, sl
 800703a:	4453      	add	r3, sl
 800703c:	f8dc a000 	ldr.w	sl, [ip]
 8007040:	b292      	uxth	r2, r2
 8007042:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007046:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800704a:	b29b      	uxth	r3, r3
 800704c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007050:	4581      	cmp	r9, r0
 8007052:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007056:	f84c 3b04 	str.w	r3, [ip], #4
 800705a:	d2db      	bcs.n	8007014 <quorem+0x44>
 800705c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007060:	b92b      	cbnz	r3, 800706e <quorem+0x9e>
 8007062:	9b01      	ldr	r3, [sp, #4]
 8007064:	3b04      	subs	r3, #4
 8007066:	429d      	cmp	r5, r3
 8007068:	461a      	mov	r2, r3
 800706a:	d32f      	bcc.n	80070cc <quorem+0xfc>
 800706c:	613c      	str	r4, [r7, #16]
 800706e:	4638      	mov	r0, r7
 8007070:	f001 f8ce 	bl	8008210 <__mcmp>
 8007074:	2800      	cmp	r0, #0
 8007076:	db25      	blt.n	80070c4 <quorem+0xf4>
 8007078:	4628      	mov	r0, r5
 800707a:	f04f 0c00 	mov.w	ip, #0
 800707e:	3601      	adds	r6, #1
 8007080:	f858 1b04 	ldr.w	r1, [r8], #4
 8007084:	f8d0 e000 	ldr.w	lr, [r0]
 8007088:	b28b      	uxth	r3, r1
 800708a:	ebac 0303 	sub.w	r3, ip, r3
 800708e:	fa1f f28e 	uxth.w	r2, lr
 8007092:	4413      	add	r3, r2
 8007094:	0c0a      	lsrs	r2, r1, #16
 8007096:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800709a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800709e:	b29b      	uxth	r3, r3
 80070a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070a4:	45c1      	cmp	r9, r8
 80070a6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80070aa:	f840 3b04 	str.w	r3, [r0], #4
 80070ae:	d2e7      	bcs.n	8007080 <quorem+0xb0>
 80070b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070b8:	b922      	cbnz	r2, 80070c4 <quorem+0xf4>
 80070ba:	3b04      	subs	r3, #4
 80070bc:	429d      	cmp	r5, r3
 80070be:	461a      	mov	r2, r3
 80070c0:	d30a      	bcc.n	80070d8 <quorem+0x108>
 80070c2:	613c      	str	r4, [r7, #16]
 80070c4:	4630      	mov	r0, r6
 80070c6:	b003      	add	sp, #12
 80070c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070cc:	6812      	ldr	r2, [r2, #0]
 80070ce:	3b04      	subs	r3, #4
 80070d0:	2a00      	cmp	r2, #0
 80070d2:	d1cb      	bne.n	800706c <quorem+0x9c>
 80070d4:	3c01      	subs	r4, #1
 80070d6:	e7c6      	b.n	8007066 <quorem+0x96>
 80070d8:	6812      	ldr	r2, [r2, #0]
 80070da:	3b04      	subs	r3, #4
 80070dc:	2a00      	cmp	r2, #0
 80070de:	d1f0      	bne.n	80070c2 <quorem+0xf2>
 80070e0:	3c01      	subs	r4, #1
 80070e2:	e7eb      	b.n	80070bc <quorem+0xec>
 80070e4:	2000      	movs	r0, #0
 80070e6:	e7ee      	b.n	80070c6 <quorem+0xf6>

080070e8 <_dtoa_r>:
 80070e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ec:	4616      	mov	r6, r2
 80070ee:	461f      	mov	r7, r3
 80070f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80070f2:	b099      	sub	sp, #100	; 0x64
 80070f4:	4605      	mov	r5, r0
 80070f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80070fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80070fe:	b974      	cbnz	r4, 800711e <_dtoa_r+0x36>
 8007100:	2010      	movs	r0, #16
 8007102:	f000 fde3 	bl	8007ccc <malloc>
 8007106:	4602      	mov	r2, r0
 8007108:	6268      	str	r0, [r5, #36]	; 0x24
 800710a:	b920      	cbnz	r0, 8007116 <_dtoa_r+0x2e>
 800710c:	21ea      	movs	r1, #234	; 0xea
 800710e:	4ba8      	ldr	r3, [pc, #672]	; (80073b0 <_dtoa_r+0x2c8>)
 8007110:	48a8      	ldr	r0, [pc, #672]	; (80073b4 <_dtoa_r+0x2cc>)
 8007112:	f001 fa81 	bl	8008618 <__assert_func>
 8007116:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800711a:	6004      	str	r4, [r0, #0]
 800711c:	60c4      	str	r4, [r0, #12]
 800711e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007120:	6819      	ldr	r1, [r3, #0]
 8007122:	b151      	cbz	r1, 800713a <_dtoa_r+0x52>
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	2301      	movs	r3, #1
 8007128:	4093      	lsls	r3, r2
 800712a:	604a      	str	r2, [r1, #4]
 800712c:	608b      	str	r3, [r1, #8]
 800712e:	4628      	mov	r0, r5
 8007130:	f000 fe30 	bl	8007d94 <_Bfree>
 8007134:	2200      	movs	r2, #0
 8007136:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	1e3b      	subs	r3, r7, #0
 800713c:	bfaf      	iteee	ge
 800713e:	2300      	movge	r3, #0
 8007140:	2201      	movlt	r2, #1
 8007142:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007146:	9305      	strlt	r3, [sp, #20]
 8007148:	bfa8      	it	ge
 800714a:	f8c8 3000 	strge.w	r3, [r8]
 800714e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007152:	4b99      	ldr	r3, [pc, #612]	; (80073b8 <_dtoa_r+0x2d0>)
 8007154:	bfb8      	it	lt
 8007156:	f8c8 2000 	strlt.w	r2, [r8]
 800715a:	ea33 0309 	bics.w	r3, r3, r9
 800715e:	d119      	bne.n	8007194 <_dtoa_r+0xac>
 8007160:	f242 730f 	movw	r3, #9999	; 0x270f
 8007164:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800716c:	4333      	orrs	r3, r6
 800716e:	f000 857f 	beq.w	8007c70 <_dtoa_r+0xb88>
 8007172:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007174:	b953      	cbnz	r3, 800718c <_dtoa_r+0xa4>
 8007176:	4b91      	ldr	r3, [pc, #580]	; (80073bc <_dtoa_r+0x2d4>)
 8007178:	e022      	b.n	80071c0 <_dtoa_r+0xd8>
 800717a:	4b91      	ldr	r3, [pc, #580]	; (80073c0 <_dtoa_r+0x2d8>)
 800717c:	9303      	str	r3, [sp, #12]
 800717e:	3308      	adds	r3, #8
 8007180:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	9803      	ldr	r0, [sp, #12]
 8007186:	b019      	add	sp, #100	; 0x64
 8007188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718c:	4b8b      	ldr	r3, [pc, #556]	; (80073bc <_dtoa_r+0x2d4>)
 800718e:	9303      	str	r3, [sp, #12]
 8007190:	3303      	adds	r3, #3
 8007192:	e7f5      	b.n	8007180 <_dtoa_r+0x98>
 8007194:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007198:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800719c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071a0:	2200      	movs	r2, #0
 80071a2:	2300      	movs	r3, #0
 80071a4:	f7f9 fc00 	bl	80009a8 <__aeabi_dcmpeq>
 80071a8:	4680      	mov	r8, r0
 80071aa:	b158      	cbz	r0, 80071c4 <_dtoa_r+0xdc>
 80071ac:	2301      	movs	r3, #1
 80071ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 8558 	beq.w	8007c6a <_dtoa_r+0xb82>
 80071ba:	4882      	ldr	r0, [pc, #520]	; (80073c4 <_dtoa_r+0x2dc>)
 80071bc:	6018      	str	r0, [r3, #0]
 80071be:	1e43      	subs	r3, r0, #1
 80071c0:	9303      	str	r3, [sp, #12]
 80071c2:	e7df      	b.n	8007184 <_dtoa_r+0x9c>
 80071c4:	ab16      	add	r3, sp, #88	; 0x58
 80071c6:	9301      	str	r3, [sp, #4]
 80071c8:	ab17      	add	r3, sp, #92	; 0x5c
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	4628      	mov	r0, r5
 80071ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80071d2:	f001 f8c5 	bl	8008360 <__d2b>
 80071d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80071da:	4683      	mov	fp, r0
 80071dc:	2c00      	cmp	r4, #0
 80071de:	d07f      	beq.n	80072e0 <_dtoa_r+0x1f8>
 80071e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80071ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80071f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80071f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80071fa:	2200      	movs	r2, #0
 80071fc:	4b72      	ldr	r3, [pc, #456]	; (80073c8 <_dtoa_r+0x2e0>)
 80071fe:	f7f8 ffb3 	bl	8000168 <__aeabi_dsub>
 8007202:	a365      	add	r3, pc, #404	; (adr r3, 8007398 <_dtoa_r+0x2b0>)
 8007204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007208:	f7f9 f966 	bl	80004d8 <__aeabi_dmul>
 800720c:	a364      	add	r3, pc, #400	; (adr r3, 80073a0 <_dtoa_r+0x2b8>)
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	f7f8 ffab 	bl	800016c <__adddf3>
 8007216:	4606      	mov	r6, r0
 8007218:	4620      	mov	r0, r4
 800721a:	460f      	mov	r7, r1
 800721c:	f7f9 f8f2 	bl	8000404 <__aeabi_i2d>
 8007220:	a361      	add	r3, pc, #388	; (adr r3, 80073a8 <_dtoa_r+0x2c0>)
 8007222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007226:	f7f9 f957 	bl	80004d8 <__aeabi_dmul>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	4630      	mov	r0, r6
 8007230:	4639      	mov	r1, r7
 8007232:	f7f8 ff9b 	bl	800016c <__adddf3>
 8007236:	4606      	mov	r6, r0
 8007238:	460f      	mov	r7, r1
 800723a:	f7f9 fbfd 	bl	8000a38 <__aeabi_d2iz>
 800723e:	2200      	movs	r2, #0
 8007240:	4682      	mov	sl, r0
 8007242:	2300      	movs	r3, #0
 8007244:	4630      	mov	r0, r6
 8007246:	4639      	mov	r1, r7
 8007248:	f7f9 fbb8 	bl	80009bc <__aeabi_dcmplt>
 800724c:	b148      	cbz	r0, 8007262 <_dtoa_r+0x17a>
 800724e:	4650      	mov	r0, sl
 8007250:	f7f9 f8d8 	bl	8000404 <__aeabi_i2d>
 8007254:	4632      	mov	r2, r6
 8007256:	463b      	mov	r3, r7
 8007258:	f7f9 fba6 	bl	80009a8 <__aeabi_dcmpeq>
 800725c:	b908      	cbnz	r0, 8007262 <_dtoa_r+0x17a>
 800725e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007262:	f1ba 0f16 	cmp.w	sl, #22
 8007266:	d858      	bhi.n	800731a <_dtoa_r+0x232>
 8007268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800726c:	4b57      	ldr	r3, [pc, #348]	; (80073cc <_dtoa_r+0x2e4>)
 800726e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	f7f9 fba1 	bl	80009bc <__aeabi_dcmplt>
 800727a:	2800      	cmp	r0, #0
 800727c:	d04f      	beq.n	800731e <_dtoa_r+0x236>
 800727e:	2300      	movs	r3, #0
 8007280:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007284:	930f      	str	r3, [sp, #60]	; 0x3c
 8007286:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007288:	1b1c      	subs	r4, r3, r4
 800728a:	1e63      	subs	r3, r4, #1
 800728c:	9309      	str	r3, [sp, #36]	; 0x24
 800728e:	bf49      	itett	mi
 8007290:	f1c4 0301 	rsbmi	r3, r4, #1
 8007294:	2300      	movpl	r3, #0
 8007296:	9306      	strmi	r3, [sp, #24]
 8007298:	2300      	movmi	r3, #0
 800729a:	bf54      	ite	pl
 800729c:	9306      	strpl	r3, [sp, #24]
 800729e:	9309      	strmi	r3, [sp, #36]	; 0x24
 80072a0:	f1ba 0f00 	cmp.w	sl, #0
 80072a4:	db3d      	blt.n	8007322 <_dtoa_r+0x23a>
 80072a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80072ac:	4453      	add	r3, sl
 80072ae:	9309      	str	r3, [sp, #36]	; 0x24
 80072b0:	2300      	movs	r3, #0
 80072b2:	930a      	str	r3, [sp, #40]	; 0x28
 80072b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072b6:	2b09      	cmp	r3, #9
 80072b8:	f200 808c 	bhi.w	80073d4 <_dtoa_r+0x2ec>
 80072bc:	2b05      	cmp	r3, #5
 80072be:	bfc4      	itt	gt
 80072c0:	3b04      	subgt	r3, #4
 80072c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80072c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072c6:	bfc8      	it	gt
 80072c8:	2400      	movgt	r4, #0
 80072ca:	f1a3 0302 	sub.w	r3, r3, #2
 80072ce:	bfd8      	it	le
 80072d0:	2401      	movle	r4, #1
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	f200 808a 	bhi.w	80073ec <_dtoa_r+0x304>
 80072d8:	e8df f003 	tbb	[pc, r3]
 80072dc:	5b4d4f2d 	.word	0x5b4d4f2d
 80072e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80072e4:	441c      	add	r4, r3
 80072e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80072ea:	2b20      	cmp	r3, #32
 80072ec:	bfc3      	ittte	gt
 80072ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80072f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80072f6:	fa09 f303 	lslgt.w	r3, r9, r3
 80072fa:	f1c3 0320 	rsble	r3, r3, #32
 80072fe:	bfc6      	itte	gt
 8007300:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007304:	4318      	orrgt	r0, r3
 8007306:	fa06 f003 	lslle.w	r0, r6, r3
 800730a:	f7f9 f86b 	bl	80003e4 <__aeabi_ui2d>
 800730e:	2301      	movs	r3, #1
 8007310:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007314:	3c01      	subs	r4, #1
 8007316:	9313      	str	r3, [sp, #76]	; 0x4c
 8007318:	e76f      	b.n	80071fa <_dtoa_r+0x112>
 800731a:	2301      	movs	r3, #1
 800731c:	e7b2      	b.n	8007284 <_dtoa_r+0x19c>
 800731e:	900f      	str	r0, [sp, #60]	; 0x3c
 8007320:	e7b1      	b.n	8007286 <_dtoa_r+0x19e>
 8007322:	9b06      	ldr	r3, [sp, #24]
 8007324:	eba3 030a 	sub.w	r3, r3, sl
 8007328:	9306      	str	r3, [sp, #24]
 800732a:	f1ca 0300 	rsb	r3, sl, #0
 800732e:	930a      	str	r3, [sp, #40]	; 0x28
 8007330:	2300      	movs	r3, #0
 8007332:	930e      	str	r3, [sp, #56]	; 0x38
 8007334:	e7be      	b.n	80072b4 <_dtoa_r+0x1cc>
 8007336:	2300      	movs	r3, #0
 8007338:	930b      	str	r3, [sp, #44]	; 0x2c
 800733a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800733c:	2b00      	cmp	r3, #0
 800733e:	dc58      	bgt.n	80073f2 <_dtoa_r+0x30a>
 8007340:	f04f 0901 	mov.w	r9, #1
 8007344:	464b      	mov	r3, r9
 8007346:	f8cd 9020 	str.w	r9, [sp, #32]
 800734a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800734e:	2200      	movs	r2, #0
 8007350:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007352:	6042      	str	r2, [r0, #4]
 8007354:	2204      	movs	r2, #4
 8007356:	f102 0614 	add.w	r6, r2, #20
 800735a:	429e      	cmp	r6, r3
 800735c:	6841      	ldr	r1, [r0, #4]
 800735e:	d94e      	bls.n	80073fe <_dtoa_r+0x316>
 8007360:	4628      	mov	r0, r5
 8007362:	f000 fcd7 	bl	8007d14 <_Balloc>
 8007366:	9003      	str	r0, [sp, #12]
 8007368:	2800      	cmp	r0, #0
 800736a:	d14c      	bne.n	8007406 <_dtoa_r+0x31e>
 800736c:	4602      	mov	r2, r0
 800736e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007372:	4b17      	ldr	r3, [pc, #92]	; (80073d0 <_dtoa_r+0x2e8>)
 8007374:	e6cc      	b.n	8007110 <_dtoa_r+0x28>
 8007376:	2301      	movs	r3, #1
 8007378:	e7de      	b.n	8007338 <_dtoa_r+0x250>
 800737a:	2300      	movs	r3, #0
 800737c:	930b      	str	r3, [sp, #44]	; 0x2c
 800737e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007380:	eb0a 0903 	add.w	r9, sl, r3
 8007384:	f109 0301 	add.w	r3, r9, #1
 8007388:	2b01      	cmp	r3, #1
 800738a:	9308      	str	r3, [sp, #32]
 800738c:	bfb8      	it	lt
 800738e:	2301      	movlt	r3, #1
 8007390:	e7dd      	b.n	800734e <_dtoa_r+0x266>
 8007392:	2301      	movs	r3, #1
 8007394:	e7f2      	b.n	800737c <_dtoa_r+0x294>
 8007396:	bf00      	nop
 8007398:	636f4361 	.word	0x636f4361
 800739c:	3fd287a7 	.word	0x3fd287a7
 80073a0:	8b60c8b3 	.word	0x8b60c8b3
 80073a4:	3fc68a28 	.word	0x3fc68a28
 80073a8:	509f79fb 	.word	0x509f79fb
 80073ac:	3fd34413 	.word	0x3fd34413
 80073b0:	0800b305 	.word	0x0800b305
 80073b4:	0800b31c 	.word	0x0800b31c
 80073b8:	7ff00000 	.word	0x7ff00000
 80073bc:	0800b301 	.word	0x0800b301
 80073c0:	0800b2f8 	.word	0x0800b2f8
 80073c4:	0800b2d5 	.word	0x0800b2d5
 80073c8:	3ff80000 	.word	0x3ff80000
 80073cc:	0800b410 	.word	0x0800b410
 80073d0:	0800b377 	.word	0x0800b377
 80073d4:	2401      	movs	r4, #1
 80073d6:	2300      	movs	r3, #0
 80073d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80073da:	9322      	str	r3, [sp, #136]	; 0x88
 80073dc:	f04f 39ff 	mov.w	r9, #4294967295
 80073e0:	2200      	movs	r2, #0
 80073e2:	2312      	movs	r3, #18
 80073e4:	f8cd 9020 	str.w	r9, [sp, #32]
 80073e8:	9223      	str	r2, [sp, #140]	; 0x8c
 80073ea:	e7b0      	b.n	800734e <_dtoa_r+0x266>
 80073ec:	2301      	movs	r3, #1
 80073ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80073f0:	e7f4      	b.n	80073dc <_dtoa_r+0x2f4>
 80073f2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80073f6:	464b      	mov	r3, r9
 80073f8:	f8cd 9020 	str.w	r9, [sp, #32]
 80073fc:	e7a7      	b.n	800734e <_dtoa_r+0x266>
 80073fe:	3101      	adds	r1, #1
 8007400:	6041      	str	r1, [r0, #4]
 8007402:	0052      	lsls	r2, r2, #1
 8007404:	e7a7      	b.n	8007356 <_dtoa_r+0x26e>
 8007406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007408:	9a03      	ldr	r2, [sp, #12]
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	9b08      	ldr	r3, [sp, #32]
 800740e:	2b0e      	cmp	r3, #14
 8007410:	f200 80a8 	bhi.w	8007564 <_dtoa_r+0x47c>
 8007414:	2c00      	cmp	r4, #0
 8007416:	f000 80a5 	beq.w	8007564 <_dtoa_r+0x47c>
 800741a:	f1ba 0f00 	cmp.w	sl, #0
 800741e:	dd34      	ble.n	800748a <_dtoa_r+0x3a2>
 8007420:	4a9a      	ldr	r2, [pc, #616]	; (800768c <_dtoa_r+0x5a4>)
 8007422:	f00a 030f 	and.w	r3, sl, #15
 8007426:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800742a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800742e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007432:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007436:	ea4f 142a 	mov.w	r4, sl, asr #4
 800743a:	d016      	beq.n	800746a <_dtoa_r+0x382>
 800743c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007440:	4b93      	ldr	r3, [pc, #588]	; (8007690 <_dtoa_r+0x5a8>)
 8007442:	2703      	movs	r7, #3
 8007444:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007448:	f7f9 f970 	bl	800072c <__aeabi_ddiv>
 800744c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007450:	f004 040f 	and.w	r4, r4, #15
 8007454:	4e8e      	ldr	r6, [pc, #568]	; (8007690 <_dtoa_r+0x5a8>)
 8007456:	b954      	cbnz	r4, 800746e <_dtoa_r+0x386>
 8007458:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800745c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007460:	f7f9 f964 	bl	800072c <__aeabi_ddiv>
 8007464:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007468:	e029      	b.n	80074be <_dtoa_r+0x3d6>
 800746a:	2702      	movs	r7, #2
 800746c:	e7f2      	b.n	8007454 <_dtoa_r+0x36c>
 800746e:	07e1      	lsls	r1, r4, #31
 8007470:	d508      	bpl.n	8007484 <_dtoa_r+0x39c>
 8007472:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007476:	e9d6 2300 	ldrd	r2, r3, [r6]
 800747a:	f7f9 f82d 	bl	80004d8 <__aeabi_dmul>
 800747e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007482:	3701      	adds	r7, #1
 8007484:	1064      	asrs	r4, r4, #1
 8007486:	3608      	adds	r6, #8
 8007488:	e7e5      	b.n	8007456 <_dtoa_r+0x36e>
 800748a:	f000 80a5 	beq.w	80075d8 <_dtoa_r+0x4f0>
 800748e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007492:	f1ca 0400 	rsb	r4, sl, #0
 8007496:	4b7d      	ldr	r3, [pc, #500]	; (800768c <_dtoa_r+0x5a4>)
 8007498:	f004 020f 	and.w	r2, r4, #15
 800749c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a4:	f7f9 f818 	bl	80004d8 <__aeabi_dmul>
 80074a8:	2702      	movs	r7, #2
 80074aa:	2300      	movs	r3, #0
 80074ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074b0:	4e77      	ldr	r6, [pc, #476]	; (8007690 <_dtoa_r+0x5a8>)
 80074b2:	1124      	asrs	r4, r4, #4
 80074b4:	2c00      	cmp	r4, #0
 80074b6:	f040 8084 	bne.w	80075c2 <_dtoa_r+0x4da>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1d2      	bne.n	8007464 <_dtoa_r+0x37c>
 80074be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 808b 	beq.w	80075dc <_dtoa_r+0x4f4>
 80074c6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80074ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80074ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074d2:	2200      	movs	r2, #0
 80074d4:	4b6f      	ldr	r3, [pc, #444]	; (8007694 <_dtoa_r+0x5ac>)
 80074d6:	f7f9 fa71 	bl	80009bc <__aeabi_dcmplt>
 80074da:	2800      	cmp	r0, #0
 80074dc:	d07e      	beq.n	80075dc <_dtoa_r+0x4f4>
 80074de:	9b08      	ldr	r3, [sp, #32]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d07b      	beq.n	80075dc <_dtoa_r+0x4f4>
 80074e4:	f1b9 0f00 	cmp.w	r9, #0
 80074e8:	dd38      	ble.n	800755c <_dtoa_r+0x474>
 80074ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074ee:	2200      	movs	r2, #0
 80074f0:	4b69      	ldr	r3, [pc, #420]	; (8007698 <_dtoa_r+0x5b0>)
 80074f2:	f7f8 fff1 	bl	80004d8 <__aeabi_dmul>
 80074f6:	464c      	mov	r4, r9
 80074f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074fc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007500:	3701      	adds	r7, #1
 8007502:	4638      	mov	r0, r7
 8007504:	f7f8 ff7e 	bl	8000404 <__aeabi_i2d>
 8007508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800750c:	f7f8 ffe4 	bl	80004d8 <__aeabi_dmul>
 8007510:	2200      	movs	r2, #0
 8007512:	4b62      	ldr	r3, [pc, #392]	; (800769c <_dtoa_r+0x5b4>)
 8007514:	f7f8 fe2a 	bl	800016c <__adddf3>
 8007518:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800751c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007520:	9611      	str	r6, [sp, #68]	; 0x44
 8007522:	2c00      	cmp	r4, #0
 8007524:	d15d      	bne.n	80075e2 <_dtoa_r+0x4fa>
 8007526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800752a:	2200      	movs	r2, #0
 800752c:	4b5c      	ldr	r3, [pc, #368]	; (80076a0 <_dtoa_r+0x5b8>)
 800752e:	f7f8 fe1b 	bl	8000168 <__aeabi_dsub>
 8007532:	4602      	mov	r2, r0
 8007534:	460b      	mov	r3, r1
 8007536:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800753a:	4633      	mov	r3, r6
 800753c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800753e:	f7f9 fa5b 	bl	80009f8 <__aeabi_dcmpgt>
 8007542:	2800      	cmp	r0, #0
 8007544:	f040 829c 	bne.w	8007a80 <_dtoa_r+0x998>
 8007548:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800754c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800754e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007552:	f7f9 fa33 	bl	80009bc <__aeabi_dcmplt>
 8007556:	2800      	cmp	r0, #0
 8007558:	f040 8290 	bne.w	8007a7c <_dtoa_r+0x994>
 800755c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007560:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007564:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007566:	2b00      	cmp	r3, #0
 8007568:	f2c0 8152 	blt.w	8007810 <_dtoa_r+0x728>
 800756c:	f1ba 0f0e 	cmp.w	sl, #14
 8007570:	f300 814e 	bgt.w	8007810 <_dtoa_r+0x728>
 8007574:	4b45      	ldr	r3, [pc, #276]	; (800768c <_dtoa_r+0x5a4>)
 8007576:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800757a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800757e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007582:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007584:	2b00      	cmp	r3, #0
 8007586:	f280 80db 	bge.w	8007740 <_dtoa_r+0x658>
 800758a:	9b08      	ldr	r3, [sp, #32]
 800758c:	2b00      	cmp	r3, #0
 800758e:	f300 80d7 	bgt.w	8007740 <_dtoa_r+0x658>
 8007592:	f040 8272 	bne.w	8007a7a <_dtoa_r+0x992>
 8007596:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800759a:	2200      	movs	r2, #0
 800759c:	4b40      	ldr	r3, [pc, #256]	; (80076a0 <_dtoa_r+0x5b8>)
 800759e:	f7f8 ff9b 	bl	80004d8 <__aeabi_dmul>
 80075a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075a6:	f7f9 fa1d 	bl	80009e4 <__aeabi_dcmpge>
 80075aa:	9c08      	ldr	r4, [sp, #32]
 80075ac:	4626      	mov	r6, r4
 80075ae:	2800      	cmp	r0, #0
 80075b0:	f040 8248 	bne.w	8007a44 <_dtoa_r+0x95c>
 80075b4:	2331      	movs	r3, #49	; 0x31
 80075b6:	9f03      	ldr	r7, [sp, #12]
 80075b8:	f10a 0a01 	add.w	sl, sl, #1
 80075bc:	f807 3b01 	strb.w	r3, [r7], #1
 80075c0:	e244      	b.n	8007a4c <_dtoa_r+0x964>
 80075c2:	07e2      	lsls	r2, r4, #31
 80075c4:	d505      	bpl.n	80075d2 <_dtoa_r+0x4ea>
 80075c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075ca:	f7f8 ff85 	bl	80004d8 <__aeabi_dmul>
 80075ce:	2301      	movs	r3, #1
 80075d0:	3701      	adds	r7, #1
 80075d2:	1064      	asrs	r4, r4, #1
 80075d4:	3608      	adds	r6, #8
 80075d6:	e76d      	b.n	80074b4 <_dtoa_r+0x3cc>
 80075d8:	2702      	movs	r7, #2
 80075da:	e770      	b.n	80074be <_dtoa_r+0x3d6>
 80075dc:	46d0      	mov	r8, sl
 80075de:	9c08      	ldr	r4, [sp, #32]
 80075e0:	e78f      	b.n	8007502 <_dtoa_r+0x41a>
 80075e2:	9903      	ldr	r1, [sp, #12]
 80075e4:	4b29      	ldr	r3, [pc, #164]	; (800768c <_dtoa_r+0x5a4>)
 80075e6:	4421      	add	r1, r4
 80075e8:	9112      	str	r1, [sp, #72]	; 0x48
 80075ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80075f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075f8:	2900      	cmp	r1, #0
 80075fa:	d055      	beq.n	80076a8 <_dtoa_r+0x5c0>
 80075fc:	2000      	movs	r0, #0
 80075fe:	4929      	ldr	r1, [pc, #164]	; (80076a4 <_dtoa_r+0x5bc>)
 8007600:	f7f9 f894 	bl	800072c <__aeabi_ddiv>
 8007604:	463b      	mov	r3, r7
 8007606:	4632      	mov	r2, r6
 8007608:	f7f8 fdae 	bl	8000168 <__aeabi_dsub>
 800760c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007610:	9f03      	ldr	r7, [sp, #12]
 8007612:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007616:	f7f9 fa0f 	bl	8000a38 <__aeabi_d2iz>
 800761a:	4604      	mov	r4, r0
 800761c:	f7f8 fef2 	bl	8000404 <__aeabi_i2d>
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007628:	f7f8 fd9e 	bl	8000168 <__aeabi_dsub>
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	3430      	adds	r4, #48	; 0x30
 8007632:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007636:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800763a:	f807 4b01 	strb.w	r4, [r7], #1
 800763e:	f7f9 f9bd 	bl	80009bc <__aeabi_dcmplt>
 8007642:	2800      	cmp	r0, #0
 8007644:	d174      	bne.n	8007730 <_dtoa_r+0x648>
 8007646:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800764a:	2000      	movs	r0, #0
 800764c:	4911      	ldr	r1, [pc, #68]	; (8007694 <_dtoa_r+0x5ac>)
 800764e:	f7f8 fd8b 	bl	8000168 <__aeabi_dsub>
 8007652:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007656:	f7f9 f9b1 	bl	80009bc <__aeabi_dcmplt>
 800765a:	2800      	cmp	r0, #0
 800765c:	f040 80b7 	bne.w	80077ce <_dtoa_r+0x6e6>
 8007660:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007662:	429f      	cmp	r7, r3
 8007664:	f43f af7a 	beq.w	800755c <_dtoa_r+0x474>
 8007668:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800766c:	2200      	movs	r2, #0
 800766e:	4b0a      	ldr	r3, [pc, #40]	; (8007698 <_dtoa_r+0x5b0>)
 8007670:	f7f8 ff32 	bl	80004d8 <__aeabi_dmul>
 8007674:	2200      	movs	r2, #0
 8007676:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800767a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800767e:	4b06      	ldr	r3, [pc, #24]	; (8007698 <_dtoa_r+0x5b0>)
 8007680:	f7f8 ff2a 	bl	80004d8 <__aeabi_dmul>
 8007684:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007688:	e7c3      	b.n	8007612 <_dtoa_r+0x52a>
 800768a:	bf00      	nop
 800768c:	0800b410 	.word	0x0800b410
 8007690:	0800b3e8 	.word	0x0800b3e8
 8007694:	3ff00000 	.word	0x3ff00000
 8007698:	40240000 	.word	0x40240000
 800769c:	401c0000 	.word	0x401c0000
 80076a0:	40140000 	.word	0x40140000
 80076a4:	3fe00000 	.word	0x3fe00000
 80076a8:	4630      	mov	r0, r6
 80076aa:	4639      	mov	r1, r7
 80076ac:	f7f8 ff14 	bl	80004d8 <__aeabi_dmul>
 80076b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076b6:	9c03      	ldr	r4, [sp, #12]
 80076b8:	9314      	str	r3, [sp, #80]	; 0x50
 80076ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076be:	f7f9 f9bb 	bl	8000a38 <__aeabi_d2iz>
 80076c2:	9015      	str	r0, [sp, #84]	; 0x54
 80076c4:	f7f8 fe9e 	bl	8000404 <__aeabi_i2d>
 80076c8:	4602      	mov	r2, r0
 80076ca:	460b      	mov	r3, r1
 80076cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076d0:	f7f8 fd4a 	bl	8000168 <__aeabi_dsub>
 80076d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076d6:	4606      	mov	r6, r0
 80076d8:	3330      	adds	r3, #48	; 0x30
 80076da:	f804 3b01 	strb.w	r3, [r4], #1
 80076de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076e0:	460f      	mov	r7, r1
 80076e2:	429c      	cmp	r4, r3
 80076e4:	f04f 0200 	mov.w	r2, #0
 80076e8:	d124      	bne.n	8007734 <_dtoa_r+0x64c>
 80076ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076ee:	4bb0      	ldr	r3, [pc, #704]	; (80079b0 <_dtoa_r+0x8c8>)
 80076f0:	f7f8 fd3c 	bl	800016c <__adddf3>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	4630      	mov	r0, r6
 80076fa:	4639      	mov	r1, r7
 80076fc:	f7f9 f97c 	bl	80009f8 <__aeabi_dcmpgt>
 8007700:	2800      	cmp	r0, #0
 8007702:	d163      	bne.n	80077cc <_dtoa_r+0x6e4>
 8007704:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007708:	2000      	movs	r0, #0
 800770a:	49a9      	ldr	r1, [pc, #676]	; (80079b0 <_dtoa_r+0x8c8>)
 800770c:	f7f8 fd2c 	bl	8000168 <__aeabi_dsub>
 8007710:	4602      	mov	r2, r0
 8007712:	460b      	mov	r3, r1
 8007714:	4630      	mov	r0, r6
 8007716:	4639      	mov	r1, r7
 8007718:	f7f9 f950 	bl	80009bc <__aeabi_dcmplt>
 800771c:	2800      	cmp	r0, #0
 800771e:	f43f af1d 	beq.w	800755c <_dtoa_r+0x474>
 8007722:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007724:	1e7b      	subs	r3, r7, #1
 8007726:	9314      	str	r3, [sp, #80]	; 0x50
 8007728:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800772c:	2b30      	cmp	r3, #48	; 0x30
 800772e:	d0f8      	beq.n	8007722 <_dtoa_r+0x63a>
 8007730:	46c2      	mov	sl, r8
 8007732:	e03b      	b.n	80077ac <_dtoa_r+0x6c4>
 8007734:	4b9f      	ldr	r3, [pc, #636]	; (80079b4 <_dtoa_r+0x8cc>)
 8007736:	f7f8 fecf 	bl	80004d8 <__aeabi_dmul>
 800773a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800773e:	e7bc      	b.n	80076ba <_dtoa_r+0x5d2>
 8007740:	9f03      	ldr	r7, [sp, #12]
 8007742:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007746:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800774a:	4640      	mov	r0, r8
 800774c:	4649      	mov	r1, r9
 800774e:	f7f8 ffed 	bl	800072c <__aeabi_ddiv>
 8007752:	f7f9 f971 	bl	8000a38 <__aeabi_d2iz>
 8007756:	4604      	mov	r4, r0
 8007758:	f7f8 fe54 	bl	8000404 <__aeabi_i2d>
 800775c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007760:	f7f8 feba 	bl	80004d8 <__aeabi_dmul>
 8007764:	4602      	mov	r2, r0
 8007766:	460b      	mov	r3, r1
 8007768:	4640      	mov	r0, r8
 800776a:	4649      	mov	r1, r9
 800776c:	f7f8 fcfc 	bl	8000168 <__aeabi_dsub>
 8007770:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007774:	f807 6b01 	strb.w	r6, [r7], #1
 8007778:	9e03      	ldr	r6, [sp, #12]
 800777a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800777e:	1bbe      	subs	r6, r7, r6
 8007780:	45b4      	cmp	ip, r6
 8007782:	4602      	mov	r2, r0
 8007784:	460b      	mov	r3, r1
 8007786:	d136      	bne.n	80077f6 <_dtoa_r+0x70e>
 8007788:	f7f8 fcf0 	bl	800016c <__adddf3>
 800778c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007790:	4680      	mov	r8, r0
 8007792:	4689      	mov	r9, r1
 8007794:	f7f9 f930 	bl	80009f8 <__aeabi_dcmpgt>
 8007798:	bb58      	cbnz	r0, 80077f2 <_dtoa_r+0x70a>
 800779a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800779e:	4640      	mov	r0, r8
 80077a0:	4649      	mov	r1, r9
 80077a2:	f7f9 f901 	bl	80009a8 <__aeabi_dcmpeq>
 80077a6:	b108      	cbz	r0, 80077ac <_dtoa_r+0x6c4>
 80077a8:	07e1      	lsls	r1, r4, #31
 80077aa:	d422      	bmi.n	80077f2 <_dtoa_r+0x70a>
 80077ac:	4628      	mov	r0, r5
 80077ae:	4659      	mov	r1, fp
 80077b0:	f000 faf0 	bl	8007d94 <_Bfree>
 80077b4:	2300      	movs	r3, #0
 80077b6:	703b      	strb	r3, [r7, #0]
 80077b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80077ba:	f10a 0001 	add.w	r0, sl, #1
 80077be:	6018      	str	r0, [r3, #0]
 80077c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f43f acde 	beq.w	8007184 <_dtoa_r+0x9c>
 80077c8:	601f      	str	r7, [r3, #0]
 80077ca:	e4db      	b.n	8007184 <_dtoa_r+0x9c>
 80077cc:	4627      	mov	r7, r4
 80077ce:	463b      	mov	r3, r7
 80077d0:	461f      	mov	r7, r3
 80077d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077d6:	2a39      	cmp	r2, #57	; 0x39
 80077d8:	d107      	bne.n	80077ea <_dtoa_r+0x702>
 80077da:	9a03      	ldr	r2, [sp, #12]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d1f7      	bne.n	80077d0 <_dtoa_r+0x6e8>
 80077e0:	2230      	movs	r2, #48	; 0x30
 80077e2:	9903      	ldr	r1, [sp, #12]
 80077e4:	f108 0801 	add.w	r8, r8, #1
 80077e8:	700a      	strb	r2, [r1, #0]
 80077ea:	781a      	ldrb	r2, [r3, #0]
 80077ec:	3201      	adds	r2, #1
 80077ee:	701a      	strb	r2, [r3, #0]
 80077f0:	e79e      	b.n	8007730 <_dtoa_r+0x648>
 80077f2:	46d0      	mov	r8, sl
 80077f4:	e7eb      	b.n	80077ce <_dtoa_r+0x6e6>
 80077f6:	2200      	movs	r2, #0
 80077f8:	4b6e      	ldr	r3, [pc, #440]	; (80079b4 <_dtoa_r+0x8cc>)
 80077fa:	f7f8 fe6d 	bl	80004d8 <__aeabi_dmul>
 80077fe:	2200      	movs	r2, #0
 8007800:	2300      	movs	r3, #0
 8007802:	4680      	mov	r8, r0
 8007804:	4689      	mov	r9, r1
 8007806:	f7f9 f8cf 	bl	80009a8 <__aeabi_dcmpeq>
 800780a:	2800      	cmp	r0, #0
 800780c:	d09b      	beq.n	8007746 <_dtoa_r+0x65e>
 800780e:	e7cd      	b.n	80077ac <_dtoa_r+0x6c4>
 8007810:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007812:	2a00      	cmp	r2, #0
 8007814:	f000 80d0 	beq.w	80079b8 <_dtoa_r+0x8d0>
 8007818:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800781a:	2a01      	cmp	r2, #1
 800781c:	f300 80ae 	bgt.w	800797c <_dtoa_r+0x894>
 8007820:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007822:	2a00      	cmp	r2, #0
 8007824:	f000 80a6 	beq.w	8007974 <_dtoa_r+0x88c>
 8007828:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800782c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800782e:	9f06      	ldr	r7, [sp, #24]
 8007830:	9a06      	ldr	r2, [sp, #24]
 8007832:	2101      	movs	r1, #1
 8007834:	441a      	add	r2, r3
 8007836:	9206      	str	r2, [sp, #24]
 8007838:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800783a:	4628      	mov	r0, r5
 800783c:	441a      	add	r2, r3
 800783e:	9209      	str	r2, [sp, #36]	; 0x24
 8007840:	f000 fb5e 	bl	8007f00 <__i2b>
 8007844:	4606      	mov	r6, r0
 8007846:	2f00      	cmp	r7, #0
 8007848:	dd0c      	ble.n	8007864 <_dtoa_r+0x77c>
 800784a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800784c:	2b00      	cmp	r3, #0
 800784e:	dd09      	ble.n	8007864 <_dtoa_r+0x77c>
 8007850:	42bb      	cmp	r3, r7
 8007852:	bfa8      	it	ge
 8007854:	463b      	movge	r3, r7
 8007856:	9a06      	ldr	r2, [sp, #24]
 8007858:	1aff      	subs	r7, r7, r3
 800785a:	1ad2      	subs	r2, r2, r3
 800785c:	9206      	str	r2, [sp, #24]
 800785e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	9309      	str	r3, [sp, #36]	; 0x24
 8007864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007866:	b1f3      	cbz	r3, 80078a6 <_dtoa_r+0x7be>
 8007868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 80a8 	beq.w	80079c0 <_dtoa_r+0x8d8>
 8007870:	2c00      	cmp	r4, #0
 8007872:	dd10      	ble.n	8007896 <_dtoa_r+0x7ae>
 8007874:	4631      	mov	r1, r6
 8007876:	4622      	mov	r2, r4
 8007878:	4628      	mov	r0, r5
 800787a:	f000 fbff 	bl	800807c <__pow5mult>
 800787e:	465a      	mov	r2, fp
 8007880:	4601      	mov	r1, r0
 8007882:	4606      	mov	r6, r0
 8007884:	4628      	mov	r0, r5
 8007886:	f000 fb51 	bl	8007f2c <__multiply>
 800788a:	4680      	mov	r8, r0
 800788c:	4659      	mov	r1, fp
 800788e:	4628      	mov	r0, r5
 8007890:	f000 fa80 	bl	8007d94 <_Bfree>
 8007894:	46c3      	mov	fp, r8
 8007896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007898:	1b1a      	subs	r2, r3, r4
 800789a:	d004      	beq.n	80078a6 <_dtoa_r+0x7be>
 800789c:	4659      	mov	r1, fp
 800789e:	4628      	mov	r0, r5
 80078a0:	f000 fbec 	bl	800807c <__pow5mult>
 80078a4:	4683      	mov	fp, r0
 80078a6:	2101      	movs	r1, #1
 80078a8:	4628      	mov	r0, r5
 80078aa:	f000 fb29 	bl	8007f00 <__i2b>
 80078ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078b0:	4604      	mov	r4, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f340 8086 	ble.w	80079c4 <_dtoa_r+0x8dc>
 80078b8:	461a      	mov	r2, r3
 80078ba:	4601      	mov	r1, r0
 80078bc:	4628      	mov	r0, r5
 80078be:	f000 fbdd 	bl	800807c <__pow5mult>
 80078c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078c4:	4604      	mov	r4, r0
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	dd7f      	ble.n	80079ca <_dtoa_r+0x8e2>
 80078ca:	f04f 0800 	mov.w	r8, #0
 80078ce:	6923      	ldr	r3, [r4, #16]
 80078d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80078d4:	6918      	ldr	r0, [r3, #16]
 80078d6:	f000 fac5 	bl	8007e64 <__hi0bits>
 80078da:	f1c0 0020 	rsb	r0, r0, #32
 80078de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e0:	4418      	add	r0, r3
 80078e2:	f010 001f 	ands.w	r0, r0, #31
 80078e6:	f000 8092 	beq.w	8007a0e <_dtoa_r+0x926>
 80078ea:	f1c0 0320 	rsb	r3, r0, #32
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	f340 808a 	ble.w	8007a08 <_dtoa_r+0x920>
 80078f4:	f1c0 001c 	rsb	r0, r0, #28
 80078f8:	9b06      	ldr	r3, [sp, #24]
 80078fa:	4407      	add	r7, r0
 80078fc:	4403      	add	r3, r0
 80078fe:	9306      	str	r3, [sp, #24]
 8007900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007902:	4403      	add	r3, r0
 8007904:	9309      	str	r3, [sp, #36]	; 0x24
 8007906:	9b06      	ldr	r3, [sp, #24]
 8007908:	2b00      	cmp	r3, #0
 800790a:	dd05      	ble.n	8007918 <_dtoa_r+0x830>
 800790c:	4659      	mov	r1, fp
 800790e:	461a      	mov	r2, r3
 8007910:	4628      	mov	r0, r5
 8007912:	f000 fc0d 	bl	8008130 <__lshift>
 8007916:	4683      	mov	fp, r0
 8007918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800791a:	2b00      	cmp	r3, #0
 800791c:	dd05      	ble.n	800792a <_dtoa_r+0x842>
 800791e:	4621      	mov	r1, r4
 8007920:	461a      	mov	r2, r3
 8007922:	4628      	mov	r0, r5
 8007924:	f000 fc04 	bl	8008130 <__lshift>
 8007928:	4604      	mov	r4, r0
 800792a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800792c:	2b00      	cmp	r3, #0
 800792e:	d070      	beq.n	8007a12 <_dtoa_r+0x92a>
 8007930:	4621      	mov	r1, r4
 8007932:	4658      	mov	r0, fp
 8007934:	f000 fc6c 	bl	8008210 <__mcmp>
 8007938:	2800      	cmp	r0, #0
 800793a:	da6a      	bge.n	8007a12 <_dtoa_r+0x92a>
 800793c:	2300      	movs	r3, #0
 800793e:	4659      	mov	r1, fp
 8007940:	220a      	movs	r2, #10
 8007942:	4628      	mov	r0, r5
 8007944:	f000 fa48 	bl	8007dd8 <__multadd>
 8007948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800794a:	4683      	mov	fp, r0
 800794c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 8194 	beq.w	8007c7e <_dtoa_r+0xb96>
 8007956:	4631      	mov	r1, r6
 8007958:	2300      	movs	r3, #0
 800795a:	220a      	movs	r2, #10
 800795c:	4628      	mov	r0, r5
 800795e:	f000 fa3b 	bl	8007dd8 <__multadd>
 8007962:	f1b9 0f00 	cmp.w	r9, #0
 8007966:	4606      	mov	r6, r0
 8007968:	f300 8093 	bgt.w	8007a92 <_dtoa_r+0x9aa>
 800796c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800796e:	2b02      	cmp	r3, #2
 8007970:	dc57      	bgt.n	8007a22 <_dtoa_r+0x93a>
 8007972:	e08e      	b.n	8007a92 <_dtoa_r+0x9aa>
 8007974:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007976:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800797a:	e757      	b.n	800782c <_dtoa_r+0x744>
 800797c:	9b08      	ldr	r3, [sp, #32]
 800797e:	1e5c      	subs	r4, r3, #1
 8007980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007982:	42a3      	cmp	r3, r4
 8007984:	bfb7      	itett	lt
 8007986:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007988:	1b1c      	subge	r4, r3, r4
 800798a:	1ae2      	sublt	r2, r4, r3
 800798c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800798e:	bfbe      	ittt	lt
 8007990:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007992:	189b      	addlt	r3, r3, r2
 8007994:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007996:	9b08      	ldr	r3, [sp, #32]
 8007998:	bfb8      	it	lt
 800799a:	2400      	movlt	r4, #0
 800799c:	2b00      	cmp	r3, #0
 800799e:	bfbb      	ittet	lt
 80079a0:	9b06      	ldrlt	r3, [sp, #24]
 80079a2:	9a08      	ldrlt	r2, [sp, #32]
 80079a4:	9f06      	ldrge	r7, [sp, #24]
 80079a6:	1a9f      	sublt	r7, r3, r2
 80079a8:	bfac      	ite	ge
 80079aa:	9b08      	ldrge	r3, [sp, #32]
 80079ac:	2300      	movlt	r3, #0
 80079ae:	e73f      	b.n	8007830 <_dtoa_r+0x748>
 80079b0:	3fe00000 	.word	0x3fe00000
 80079b4:	40240000 	.word	0x40240000
 80079b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80079ba:	9f06      	ldr	r7, [sp, #24]
 80079bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80079be:	e742      	b.n	8007846 <_dtoa_r+0x75e>
 80079c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079c2:	e76b      	b.n	800789c <_dtoa_r+0x7b4>
 80079c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	dc19      	bgt.n	80079fe <_dtoa_r+0x916>
 80079ca:	9b04      	ldr	r3, [sp, #16]
 80079cc:	b9bb      	cbnz	r3, 80079fe <_dtoa_r+0x916>
 80079ce:	9b05      	ldr	r3, [sp, #20]
 80079d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079d4:	b99b      	cbnz	r3, 80079fe <_dtoa_r+0x916>
 80079d6:	9b05      	ldr	r3, [sp, #20]
 80079d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079dc:	0d1b      	lsrs	r3, r3, #20
 80079de:	051b      	lsls	r3, r3, #20
 80079e0:	b183      	cbz	r3, 8007a04 <_dtoa_r+0x91c>
 80079e2:	f04f 0801 	mov.w	r8, #1
 80079e6:	9b06      	ldr	r3, [sp, #24]
 80079e8:	3301      	adds	r3, #1
 80079ea:	9306      	str	r3, [sp, #24]
 80079ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ee:	3301      	adds	r3, #1
 80079f0:	9309      	str	r3, [sp, #36]	; 0x24
 80079f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f47f af6a 	bne.w	80078ce <_dtoa_r+0x7e6>
 80079fa:	2001      	movs	r0, #1
 80079fc:	e76f      	b.n	80078de <_dtoa_r+0x7f6>
 80079fe:	f04f 0800 	mov.w	r8, #0
 8007a02:	e7f6      	b.n	80079f2 <_dtoa_r+0x90a>
 8007a04:	4698      	mov	r8, r3
 8007a06:	e7f4      	b.n	80079f2 <_dtoa_r+0x90a>
 8007a08:	f43f af7d 	beq.w	8007906 <_dtoa_r+0x81e>
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	301c      	adds	r0, #28
 8007a10:	e772      	b.n	80078f8 <_dtoa_r+0x810>
 8007a12:	9b08      	ldr	r3, [sp, #32]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	dc36      	bgt.n	8007a86 <_dtoa_r+0x99e>
 8007a18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	dd33      	ble.n	8007a86 <_dtoa_r+0x99e>
 8007a1e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a22:	f1b9 0f00 	cmp.w	r9, #0
 8007a26:	d10d      	bne.n	8007a44 <_dtoa_r+0x95c>
 8007a28:	4621      	mov	r1, r4
 8007a2a:	464b      	mov	r3, r9
 8007a2c:	2205      	movs	r2, #5
 8007a2e:	4628      	mov	r0, r5
 8007a30:	f000 f9d2 	bl	8007dd8 <__multadd>
 8007a34:	4601      	mov	r1, r0
 8007a36:	4604      	mov	r4, r0
 8007a38:	4658      	mov	r0, fp
 8007a3a:	f000 fbe9 	bl	8008210 <__mcmp>
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	f73f adb8 	bgt.w	80075b4 <_dtoa_r+0x4cc>
 8007a44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a46:	9f03      	ldr	r7, [sp, #12]
 8007a48:	ea6f 0a03 	mvn.w	sl, r3
 8007a4c:	f04f 0800 	mov.w	r8, #0
 8007a50:	4621      	mov	r1, r4
 8007a52:	4628      	mov	r0, r5
 8007a54:	f000 f99e 	bl	8007d94 <_Bfree>
 8007a58:	2e00      	cmp	r6, #0
 8007a5a:	f43f aea7 	beq.w	80077ac <_dtoa_r+0x6c4>
 8007a5e:	f1b8 0f00 	cmp.w	r8, #0
 8007a62:	d005      	beq.n	8007a70 <_dtoa_r+0x988>
 8007a64:	45b0      	cmp	r8, r6
 8007a66:	d003      	beq.n	8007a70 <_dtoa_r+0x988>
 8007a68:	4641      	mov	r1, r8
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	f000 f992 	bl	8007d94 <_Bfree>
 8007a70:	4631      	mov	r1, r6
 8007a72:	4628      	mov	r0, r5
 8007a74:	f000 f98e 	bl	8007d94 <_Bfree>
 8007a78:	e698      	b.n	80077ac <_dtoa_r+0x6c4>
 8007a7a:	2400      	movs	r4, #0
 8007a7c:	4626      	mov	r6, r4
 8007a7e:	e7e1      	b.n	8007a44 <_dtoa_r+0x95c>
 8007a80:	46c2      	mov	sl, r8
 8007a82:	4626      	mov	r6, r4
 8007a84:	e596      	b.n	80075b4 <_dtoa_r+0x4cc>
 8007a86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 80fd 	beq.w	8007c8c <_dtoa_r+0xba4>
 8007a92:	2f00      	cmp	r7, #0
 8007a94:	dd05      	ble.n	8007aa2 <_dtoa_r+0x9ba>
 8007a96:	4631      	mov	r1, r6
 8007a98:	463a      	mov	r2, r7
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	f000 fb48 	bl	8008130 <__lshift>
 8007aa0:	4606      	mov	r6, r0
 8007aa2:	f1b8 0f00 	cmp.w	r8, #0
 8007aa6:	d05c      	beq.n	8007b62 <_dtoa_r+0xa7a>
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	6871      	ldr	r1, [r6, #4]
 8007aac:	f000 f932 	bl	8007d14 <_Balloc>
 8007ab0:	4607      	mov	r7, r0
 8007ab2:	b928      	cbnz	r0, 8007ac0 <_dtoa_r+0x9d8>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007aba:	4b7f      	ldr	r3, [pc, #508]	; (8007cb8 <_dtoa_r+0xbd0>)
 8007abc:	f7ff bb28 	b.w	8007110 <_dtoa_r+0x28>
 8007ac0:	6932      	ldr	r2, [r6, #16]
 8007ac2:	f106 010c 	add.w	r1, r6, #12
 8007ac6:	3202      	adds	r2, #2
 8007ac8:	0092      	lsls	r2, r2, #2
 8007aca:	300c      	adds	r0, #12
 8007acc:	f000 f914 	bl	8007cf8 <memcpy>
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	4639      	mov	r1, r7
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	f000 fb2b 	bl	8008130 <__lshift>
 8007ada:	46b0      	mov	r8, r6
 8007adc:	4606      	mov	r6, r0
 8007ade:	9b03      	ldr	r3, [sp, #12]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	9308      	str	r3, [sp, #32]
 8007ae4:	9b03      	ldr	r3, [sp, #12]
 8007ae6:	444b      	add	r3, r9
 8007ae8:	930a      	str	r3, [sp, #40]	; 0x28
 8007aea:	9b04      	ldr	r3, [sp, #16]
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	9309      	str	r3, [sp, #36]	; 0x24
 8007af2:	9b08      	ldr	r3, [sp, #32]
 8007af4:	4621      	mov	r1, r4
 8007af6:	3b01      	subs	r3, #1
 8007af8:	4658      	mov	r0, fp
 8007afa:	9304      	str	r3, [sp, #16]
 8007afc:	f7ff fa68 	bl	8006fd0 <quorem>
 8007b00:	4603      	mov	r3, r0
 8007b02:	4641      	mov	r1, r8
 8007b04:	3330      	adds	r3, #48	; 0x30
 8007b06:	9006      	str	r0, [sp, #24]
 8007b08:	4658      	mov	r0, fp
 8007b0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b0c:	f000 fb80 	bl	8008210 <__mcmp>
 8007b10:	4632      	mov	r2, r6
 8007b12:	4681      	mov	r9, r0
 8007b14:	4621      	mov	r1, r4
 8007b16:	4628      	mov	r0, r5
 8007b18:	f000 fb96 	bl	8008248 <__mdiff>
 8007b1c:	68c2      	ldr	r2, [r0, #12]
 8007b1e:	4607      	mov	r7, r0
 8007b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b22:	bb02      	cbnz	r2, 8007b66 <_dtoa_r+0xa7e>
 8007b24:	4601      	mov	r1, r0
 8007b26:	4658      	mov	r0, fp
 8007b28:	f000 fb72 	bl	8008210 <__mcmp>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b30:	4639      	mov	r1, r7
 8007b32:	4628      	mov	r0, r5
 8007b34:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007b38:	f000 f92c 	bl	8007d94 <_Bfree>
 8007b3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b40:	9f08      	ldr	r7, [sp, #32]
 8007b42:	ea43 0102 	orr.w	r1, r3, r2
 8007b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b48:	430b      	orrs	r3, r1
 8007b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b4c:	d10d      	bne.n	8007b6a <_dtoa_r+0xa82>
 8007b4e:	2b39      	cmp	r3, #57	; 0x39
 8007b50:	d029      	beq.n	8007ba6 <_dtoa_r+0xabe>
 8007b52:	f1b9 0f00 	cmp.w	r9, #0
 8007b56:	dd01      	ble.n	8007b5c <_dtoa_r+0xa74>
 8007b58:	9b06      	ldr	r3, [sp, #24]
 8007b5a:	3331      	adds	r3, #49	; 0x31
 8007b5c:	9a04      	ldr	r2, [sp, #16]
 8007b5e:	7013      	strb	r3, [r2, #0]
 8007b60:	e776      	b.n	8007a50 <_dtoa_r+0x968>
 8007b62:	4630      	mov	r0, r6
 8007b64:	e7b9      	b.n	8007ada <_dtoa_r+0x9f2>
 8007b66:	2201      	movs	r2, #1
 8007b68:	e7e2      	b.n	8007b30 <_dtoa_r+0xa48>
 8007b6a:	f1b9 0f00 	cmp.w	r9, #0
 8007b6e:	db06      	blt.n	8007b7e <_dtoa_r+0xa96>
 8007b70:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007b72:	ea41 0909 	orr.w	r9, r1, r9
 8007b76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b78:	ea59 0101 	orrs.w	r1, r9, r1
 8007b7c:	d120      	bne.n	8007bc0 <_dtoa_r+0xad8>
 8007b7e:	2a00      	cmp	r2, #0
 8007b80:	ddec      	ble.n	8007b5c <_dtoa_r+0xa74>
 8007b82:	4659      	mov	r1, fp
 8007b84:	2201      	movs	r2, #1
 8007b86:	4628      	mov	r0, r5
 8007b88:	9308      	str	r3, [sp, #32]
 8007b8a:	f000 fad1 	bl	8008130 <__lshift>
 8007b8e:	4621      	mov	r1, r4
 8007b90:	4683      	mov	fp, r0
 8007b92:	f000 fb3d 	bl	8008210 <__mcmp>
 8007b96:	2800      	cmp	r0, #0
 8007b98:	9b08      	ldr	r3, [sp, #32]
 8007b9a:	dc02      	bgt.n	8007ba2 <_dtoa_r+0xaba>
 8007b9c:	d1de      	bne.n	8007b5c <_dtoa_r+0xa74>
 8007b9e:	07da      	lsls	r2, r3, #31
 8007ba0:	d5dc      	bpl.n	8007b5c <_dtoa_r+0xa74>
 8007ba2:	2b39      	cmp	r3, #57	; 0x39
 8007ba4:	d1d8      	bne.n	8007b58 <_dtoa_r+0xa70>
 8007ba6:	2339      	movs	r3, #57	; 0x39
 8007ba8:	9a04      	ldr	r2, [sp, #16]
 8007baa:	7013      	strb	r3, [r2, #0]
 8007bac:	463b      	mov	r3, r7
 8007bae:	461f      	mov	r7, r3
 8007bb0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	2a39      	cmp	r2, #57	; 0x39
 8007bb8:	d050      	beq.n	8007c5c <_dtoa_r+0xb74>
 8007bba:	3201      	adds	r2, #1
 8007bbc:	701a      	strb	r2, [r3, #0]
 8007bbe:	e747      	b.n	8007a50 <_dtoa_r+0x968>
 8007bc0:	2a00      	cmp	r2, #0
 8007bc2:	dd03      	ble.n	8007bcc <_dtoa_r+0xae4>
 8007bc4:	2b39      	cmp	r3, #57	; 0x39
 8007bc6:	d0ee      	beq.n	8007ba6 <_dtoa_r+0xabe>
 8007bc8:	3301      	adds	r3, #1
 8007bca:	e7c7      	b.n	8007b5c <_dtoa_r+0xa74>
 8007bcc:	9a08      	ldr	r2, [sp, #32]
 8007bce:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007bd0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007bd4:	428a      	cmp	r2, r1
 8007bd6:	d02a      	beq.n	8007c2e <_dtoa_r+0xb46>
 8007bd8:	4659      	mov	r1, fp
 8007bda:	2300      	movs	r3, #0
 8007bdc:	220a      	movs	r2, #10
 8007bde:	4628      	mov	r0, r5
 8007be0:	f000 f8fa 	bl	8007dd8 <__multadd>
 8007be4:	45b0      	cmp	r8, r6
 8007be6:	4683      	mov	fp, r0
 8007be8:	f04f 0300 	mov.w	r3, #0
 8007bec:	f04f 020a 	mov.w	r2, #10
 8007bf0:	4641      	mov	r1, r8
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	d107      	bne.n	8007c06 <_dtoa_r+0xb1e>
 8007bf6:	f000 f8ef 	bl	8007dd8 <__multadd>
 8007bfa:	4680      	mov	r8, r0
 8007bfc:	4606      	mov	r6, r0
 8007bfe:	9b08      	ldr	r3, [sp, #32]
 8007c00:	3301      	adds	r3, #1
 8007c02:	9308      	str	r3, [sp, #32]
 8007c04:	e775      	b.n	8007af2 <_dtoa_r+0xa0a>
 8007c06:	f000 f8e7 	bl	8007dd8 <__multadd>
 8007c0a:	4631      	mov	r1, r6
 8007c0c:	4680      	mov	r8, r0
 8007c0e:	2300      	movs	r3, #0
 8007c10:	220a      	movs	r2, #10
 8007c12:	4628      	mov	r0, r5
 8007c14:	f000 f8e0 	bl	8007dd8 <__multadd>
 8007c18:	4606      	mov	r6, r0
 8007c1a:	e7f0      	b.n	8007bfe <_dtoa_r+0xb16>
 8007c1c:	f1b9 0f00 	cmp.w	r9, #0
 8007c20:	bfcc      	ite	gt
 8007c22:	464f      	movgt	r7, r9
 8007c24:	2701      	movle	r7, #1
 8007c26:	f04f 0800 	mov.w	r8, #0
 8007c2a:	9a03      	ldr	r2, [sp, #12]
 8007c2c:	4417      	add	r7, r2
 8007c2e:	4659      	mov	r1, fp
 8007c30:	2201      	movs	r2, #1
 8007c32:	4628      	mov	r0, r5
 8007c34:	9308      	str	r3, [sp, #32]
 8007c36:	f000 fa7b 	bl	8008130 <__lshift>
 8007c3a:	4621      	mov	r1, r4
 8007c3c:	4683      	mov	fp, r0
 8007c3e:	f000 fae7 	bl	8008210 <__mcmp>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	dcb2      	bgt.n	8007bac <_dtoa_r+0xac4>
 8007c46:	d102      	bne.n	8007c4e <_dtoa_r+0xb66>
 8007c48:	9b08      	ldr	r3, [sp, #32]
 8007c4a:	07db      	lsls	r3, r3, #31
 8007c4c:	d4ae      	bmi.n	8007bac <_dtoa_r+0xac4>
 8007c4e:	463b      	mov	r3, r7
 8007c50:	461f      	mov	r7, r3
 8007c52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c56:	2a30      	cmp	r2, #48	; 0x30
 8007c58:	d0fa      	beq.n	8007c50 <_dtoa_r+0xb68>
 8007c5a:	e6f9      	b.n	8007a50 <_dtoa_r+0x968>
 8007c5c:	9a03      	ldr	r2, [sp, #12]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d1a5      	bne.n	8007bae <_dtoa_r+0xac6>
 8007c62:	2331      	movs	r3, #49	; 0x31
 8007c64:	f10a 0a01 	add.w	sl, sl, #1
 8007c68:	e779      	b.n	8007b5e <_dtoa_r+0xa76>
 8007c6a:	4b14      	ldr	r3, [pc, #80]	; (8007cbc <_dtoa_r+0xbd4>)
 8007c6c:	f7ff baa8 	b.w	80071c0 <_dtoa_r+0xd8>
 8007c70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f47f aa81 	bne.w	800717a <_dtoa_r+0x92>
 8007c78:	4b11      	ldr	r3, [pc, #68]	; (8007cc0 <_dtoa_r+0xbd8>)
 8007c7a:	f7ff baa1 	b.w	80071c0 <_dtoa_r+0xd8>
 8007c7e:	f1b9 0f00 	cmp.w	r9, #0
 8007c82:	dc03      	bgt.n	8007c8c <_dtoa_r+0xba4>
 8007c84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	f73f aecb 	bgt.w	8007a22 <_dtoa_r+0x93a>
 8007c8c:	9f03      	ldr	r7, [sp, #12]
 8007c8e:	4621      	mov	r1, r4
 8007c90:	4658      	mov	r0, fp
 8007c92:	f7ff f99d 	bl	8006fd0 <quorem>
 8007c96:	9a03      	ldr	r2, [sp, #12]
 8007c98:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007c9c:	f807 3b01 	strb.w	r3, [r7], #1
 8007ca0:	1aba      	subs	r2, r7, r2
 8007ca2:	4591      	cmp	r9, r2
 8007ca4:	ddba      	ble.n	8007c1c <_dtoa_r+0xb34>
 8007ca6:	4659      	mov	r1, fp
 8007ca8:	2300      	movs	r3, #0
 8007caa:	220a      	movs	r2, #10
 8007cac:	4628      	mov	r0, r5
 8007cae:	f000 f893 	bl	8007dd8 <__multadd>
 8007cb2:	4683      	mov	fp, r0
 8007cb4:	e7eb      	b.n	8007c8e <_dtoa_r+0xba6>
 8007cb6:	bf00      	nop
 8007cb8:	0800b377 	.word	0x0800b377
 8007cbc:	0800b2d4 	.word	0x0800b2d4
 8007cc0:	0800b2f8 	.word	0x0800b2f8

08007cc4 <_localeconv_r>:
 8007cc4:	4800      	ldr	r0, [pc, #0]	; (8007cc8 <_localeconv_r+0x4>)
 8007cc6:	4770      	bx	lr
 8007cc8:	2000019c 	.word	0x2000019c

08007ccc <malloc>:
 8007ccc:	4b02      	ldr	r3, [pc, #8]	; (8007cd8 <malloc+0xc>)
 8007cce:	4601      	mov	r1, r0
 8007cd0:	6818      	ldr	r0, [r3, #0]
 8007cd2:	f000 bc1d 	b.w	8008510 <_malloc_r>
 8007cd6:	bf00      	nop
 8007cd8:	20000048 	.word	0x20000048

08007cdc <memchr>:
 8007cdc:	4603      	mov	r3, r0
 8007cde:	b510      	push	{r4, lr}
 8007ce0:	b2c9      	uxtb	r1, r1
 8007ce2:	4402      	add	r2, r0
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	d101      	bne.n	8007cee <memchr+0x12>
 8007cea:	2000      	movs	r0, #0
 8007cec:	e003      	b.n	8007cf6 <memchr+0x1a>
 8007cee:	7804      	ldrb	r4, [r0, #0]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	428c      	cmp	r4, r1
 8007cf4:	d1f6      	bne.n	8007ce4 <memchr+0x8>
 8007cf6:	bd10      	pop	{r4, pc}

08007cf8 <memcpy>:
 8007cf8:	440a      	add	r2, r1
 8007cfa:	4291      	cmp	r1, r2
 8007cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d00:	d100      	bne.n	8007d04 <memcpy+0xc>
 8007d02:	4770      	bx	lr
 8007d04:	b510      	push	{r4, lr}
 8007d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d0a:	4291      	cmp	r1, r2
 8007d0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d10:	d1f9      	bne.n	8007d06 <memcpy+0xe>
 8007d12:	bd10      	pop	{r4, pc}

08007d14 <_Balloc>:
 8007d14:	b570      	push	{r4, r5, r6, lr}
 8007d16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007d18:	4604      	mov	r4, r0
 8007d1a:	460d      	mov	r5, r1
 8007d1c:	b976      	cbnz	r6, 8007d3c <_Balloc+0x28>
 8007d1e:	2010      	movs	r0, #16
 8007d20:	f7ff ffd4 	bl	8007ccc <malloc>
 8007d24:	4602      	mov	r2, r0
 8007d26:	6260      	str	r0, [r4, #36]	; 0x24
 8007d28:	b920      	cbnz	r0, 8007d34 <_Balloc+0x20>
 8007d2a:	2166      	movs	r1, #102	; 0x66
 8007d2c:	4b17      	ldr	r3, [pc, #92]	; (8007d8c <_Balloc+0x78>)
 8007d2e:	4818      	ldr	r0, [pc, #96]	; (8007d90 <_Balloc+0x7c>)
 8007d30:	f000 fc72 	bl	8008618 <__assert_func>
 8007d34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d38:	6006      	str	r6, [r0, #0]
 8007d3a:	60c6      	str	r6, [r0, #12]
 8007d3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007d3e:	68f3      	ldr	r3, [r6, #12]
 8007d40:	b183      	cbz	r3, 8007d64 <_Balloc+0x50>
 8007d42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d4a:	b9b8      	cbnz	r0, 8007d7c <_Balloc+0x68>
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	fa01 f605 	lsl.w	r6, r1, r5
 8007d52:	1d72      	adds	r2, r6, #5
 8007d54:	4620      	mov	r0, r4
 8007d56:	0092      	lsls	r2, r2, #2
 8007d58:	f000 fb5e 	bl	8008418 <_calloc_r>
 8007d5c:	b160      	cbz	r0, 8007d78 <_Balloc+0x64>
 8007d5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d62:	e00e      	b.n	8007d82 <_Balloc+0x6e>
 8007d64:	2221      	movs	r2, #33	; 0x21
 8007d66:	2104      	movs	r1, #4
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f000 fb55 	bl	8008418 <_calloc_r>
 8007d6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d70:	60f0      	str	r0, [r6, #12]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1e4      	bne.n	8007d42 <_Balloc+0x2e>
 8007d78:	2000      	movs	r0, #0
 8007d7a:	bd70      	pop	{r4, r5, r6, pc}
 8007d7c:	6802      	ldr	r2, [r0, #0]
 8007d7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d82:	2300      	movs	r3, #0
 8007d84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d88:	e7f7      	b.n	8007d7a <_Balloc+0x66>
 8007d8a:	bf00      	nop
 8007d8c:	0800b305 	.word	0x0800b305
 8007d90:	0800b388 	.word	0x0800b388

08007d94 <_Bfree>:
 8007d94:	b570      	push	{r4, r5, r6, lr}
 8007d96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007d98:	4605      	mov	r5, r0
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	b976      	cbnz	r6, 8007dbc <_Bfree+0x28>
 8007d9e:	2010      	movs	r0, #16
 8007da0:	f7ff ff94 	bl	8007ccc <malloc>
 8007da4:	4602      	mov	r2, r0
 8007da6:	6268      	str	r0, [r5, #36]	; 0x24
 8007da8:	b920      	cbnz	r0, 8007db4 <_Bfree+0x20>
 8007daa:	218a      	movs	r1, #138	; 0x8a
 8007dac:	4b08      	ldr	r3, [pc, #32]	; (8007dd0 <_Bfree+0x3c>)
 8007dae:	4809      	ldr	r0, [pc, #36]	; (8007dd4 <_Bfree+0x40>)
 8007db0:	f000 fc32 	bl	8008618 <__assert_func>
 8007db4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007db8:	6006      	str	r6, [r0, #0]
 8007dba:	60c6      	str	r6, [r0, #12]
 8007dbc:	b13c      	cbz	r4, 8007dce <_Bfree+0x3a>
 8007dbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007dc0:	6862      	ldr	r2, [r4, #4]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007dc8:	6021      	str	r1, [r4, #0]
 8007dca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007dce:	bd70      	pop	{r4, r5, r6, pc}
 8007dd0:	0800b305 	.word	0x0800b305
 8007dd4:	0800b388 	.word	0x0800b388

08007dd8 <__multadd>:
 8007dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ddc:	4607      	mov	r7, r0
 8007dde:	460c      	mov	r4, r1
 8007de0:	461e      	mov	r6, r3
 8007de2:	2000      	movs	r0, #0
 8007de4:	690d      	ldr	r5, [r1, #16]
 8007de6:	f101 0c14 	add.w	ip, r1, #20
 8007dea:	f8dc 3000 	ldr.w	r3, [ip]
 8007dee:	3001      	adds	r0, #1
 8007df0:	b299      	uxth	r1, r3
 8007df2:	fb02 6101 	mla	r1, r2, r1, r6
 8007df6:	0c1e      	lsrs	r6, r3, #16
 8007df8:	0c0b      	lsrs	r3, r1, #16
 8007dfa:	fb02 3306 	mla	r3, r2, r6, r3
 8007dfe:	b289      	uxth	r1, r1
 8007e00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e04:	4285      	cmp	r5, r0
 8007e06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e0a:	f84c 1b04 	str.w	r1, [ip], #4
 8007e0e:	dcec      	bgt.n	8007dea <__multadd+0x12>
 8007e10:	b30e      	cbz	r6, 8007e56 <__multadd+0x7e>
 8007e12:	68a3      	ldr	r3, [r4, #8]
 8007e14:	42ab      	cmp	r3, r5
 8007e16:	dc19      	bgt.n	8007e4c <__multadd+0x74>
 8007e18:	6861      	ldr	r1, [r4, #4]
 8007e1a:	4638      	mov	r0, r7
 8007e1c:	3101      	adds	r1, #1
 8007e1e:	f7ff ff79 	bl	8007d14 <_Balloc>
 8007e22:	4680      	mov	r8, r0
 8007e24:	b928      	cbnz	r0, 8007e32 <__multadd+0x5a>
 8007e26:	4602      	mov	r2, r0
 8007e28:	21b5      	movs	r1, #181	; 0xb5
 8007e2a:	4b0c      	ldr	r3, [pc, #48]	; (8007e5c <__multadd+0x84>)
 8007e2c:	480c      	ldr	r0, [pc, #48]	; (8007e60 <__multadd+0x88>)
 8007e2e:	f000 fbf3 	bl	8008618 <__assert_func>
 8007e32:	6922      	ldr	r2, [r4, #16]
 8007e34:	f104 010c 	add.w	r1, r4, #12
 8007e38:	3202      	adds	r2, #2
 8007e3a:	0092      	lsls	r2, r2, #2
 8007e3c:	300c      	adds	r0, #12
 8007e3e:	f7ff ff5b 	bl	8007cf8 <memcpy>
 8007e42:	4621      	mov	r1, r4
 8007e44:	4638      	mov	r0, r7
 8007e46:	f7ff ffa5 	bl	8007d94 <_Bfree>
 8007e4a:	4644      	mov	r4, r8
 8007e4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e50:	3501      	adds	r5, #1
 8007e52:	615e      	str	r6, [r3, #20]
 8007e54:	6125      	str	r5, [r4, #16]
 8007e56:	4620      	mov	r0, r4
 8007e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e5c:	0800b377 	.word	0x0800b377
 8007e60:	0800b388 	.word	0x0800b388

08007e64 <__hi0bits>:
 8007e64:	0c02      	lsrs	r2, r0, #16
 8007e66:	0412      	lsls	r2, r2, #16
 8007e68:	4603      	mov	r3, r0
 8007e6a:	b9ca      	cbnz	r2, 8007ea0 <__hi0bits+0x3c>
 8007e6c:	0403      	lsls	r3, r0, #16
 8007e6e:	2010      	movs	r0, #16
 8007e70:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007e74:	bf04      	itt	eq
 8007e76:	021b      	lsleq	r3, r3, #8
 8007e78:	3008      	addeq	r0, #8
 8007e7a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007e7e:	bf04      	itt	eq
 8007e80:	011b      	lsleq	r3, r3, #4
 8007e82:	3004      	addeq	r0, #4
 8007e84:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007e88:	bf04      	itt	eq
 8007e8a:	009b      	lsleq	r3, r3, #2
 8007e8c:	3002      	addeq	r0, #2
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	db05      	blt.n	8007e9e <__hi0bits+0x3a>
 8007e92:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007e96:	f100 0001 	add.w	r0, r0, #1
 8007e9a:	bf08      	it	eq
 8007e9c:	2020      	moveq	r0, #32
 8007e9e:	4770      	bx	lr
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	e7e5      	b.n	8007e70 <__hi0bits+0xc>

08007ea4 <__lo0bits>:
 8007ea4:	6803      	ldr	r3, [r0, #0]
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	f013 0007 	ands.w	r0, r3, #7
 8007eac:	d00b      	beq.n	8007ec6 <__lo0bits+0x22>
 8007eae:	07d9      	lsls	r1, r3, #31
 8007eb0:	d421      	bmi.n	8007ef6 <__lo0bits+0x52>
 8007eb2:	0798      	lsls	r0, r3, #30
 8007eb4:	bf49      	itett	mi
 8007eb6:	085b      	lsrmi	r3, r3, #1
 8007eb8:	089b      	lsrpl	r3, r3, #2
 8007eba:	2001      	movmi	r0, #1
 8007ebc:	6013      	strmi	r3, [r2, #0]
 8007ebe:	bf5c      	itt	pl
 8007ec0:	2002      	movpl	r0, #2
 8007ec2:	6013      	strpl	r3, [r2, #0]
 8007ec4:	4770      	bx	lr
 8007ec6:	b299      	uxth	r1, r3
 8007ec8:	b909      	cbnz	r1, 8007ece <__lo0bits+0x2a>
 8007eca:	2010      	movs	r0, #16
 8007ecc:	0c1b      	lsrs	r3, r3, #16
 8007ece:	b2d9      	uxtb	r1, r3
 8007ed0:	b909      	cbnz	r1, 8007ed6 <__lo0bits+0x32>
 8007ed2:	3008      	adds	r0, #8
 8007ed4:	0a1b      	lsrs	r3, r3, #8
 8007ed6:	0719      	lsls	r1, r3, #28
 8007ed8:	bf04      	itt	eq
 8007eda:	091b      	lsreq	r3, r3, #4
 8007edc:	3004      	addeq	r0, #4
 8007ede:	0799      	lsls	r1, r3, #30
 8007ee0:	bf04      	itt	eq
 8007ee2:	089b      	lsreq	r3, r3, #2
 8007ee4:	3002      	addeq	r0, #2
 8007ee6:	07d9      	lsls	r1, r3, #31
 8007ee8:	d403      	bmi.n	8007ef2 <__lo0bits+0x4e>
 8007eea:	085b      	lsrs	r3, r3, #1
 8007eec:	f100 0001 	add.w	r0, r0, #1
 8007ef0:	d003      	beq.n	8007efa <__lo0bits+0x56>
 8007ef2:	6013      	str	r3, [r2, #0]
 8007ef4:	4770      	bx	lr
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	4770      	bx	lr
 8007efa:	2020      	movs	r0, #32
 8007efc:	4770      	bx	lr
	...

08007f00 <__i2b>:
 8007f00:	b510      	push	{r4, lr}
 8007f02:	460c      	mov	r4, r1
 8007f04:	2101      	movs	r1, #1
 8007f06:	f7ff ff05 	bl	8007d14 <_Balloc>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	b928      	cbnz	r0, 8007f1a <__i2b+0x1a>
 8007f0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007f12:	4b04      	ldr	r3, [pc, #16]	; (8007f24 <__i2b+0x24>)
 8007f14:	4804      	ldr	r0, [pc, #16]	; (8007f28 <__i2b+0x28>)
 8007f16:	f000 fb7f 	bl	8008618 <__assert_func>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	6144      	str	r4, [r0, #20]
 8007f1e:	6103      	str	r3, [r0, #16]
 8007f20:	bd10      	pop	{r4, pc}
 8007f22:	bf00      	nop
 8007f24:	0800b377 	.word	0x0800b377
 8007f28:	0800b388 	.word	0x0800b388

08007f2c <__multiply>:
 8007f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f30:	4691      	mov	r9, r2
 8007f32:	690a      	ldr	r2, [r1, #16]
 8007f34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f38:	460c      	mov	r4, r1
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	bfbe      	ittt	lt
 8007f3e:	460b      	movlt	r3, r1
 8007f40:	464c      	movlt	r4, r9
 8007f42:	4699      	movlt	r9, r3
 8007f44:	6927      	ldr	r7, [r4, #16]
 8007f46:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007f4a:	68a3      	ldr	r3, [r4, #8]
 8007f4c:	6861      	ldr	r1, [r4, #4]
 8007f4e:	eb07 060a 	add.w	r6, r7, sl
 8007f52:	42b3      	cmp	r3, r6
 8007f54:	b085      	sub	sp, #20
 8007f56:	bfb8      	it	lt
 8007f58:	3101      	addlt	r1, #1
 8007f5a:	f7ff fedb 	bl	8007d14 <_Balloc>
 8007f5e:	b930      	cbnz	r0, 8007f6e <__multiply+0x42>
 8007f60:	4602      	mov	r2, r0
 8007f62:	f240 115d 	movw	r1, #349	; 0x15d
 8007f66:	4b43      	ldr	r3, [pc, #268]	; (8008074 <__multiply+0x148>)
 8007f68:	4843      	ldr	r0, [pc, #268]	; (8008078 <__multiply+0x14c>)
 8007f6a:	f000 fb55 	bl	8008618 <__assert_func>
 8007f6e:	f100 0514 	add.w	r5, r0, #20
 8007f72:	462b      	mov	r3, r5
 8007f74:	2200      	movs	r2, #0
 8007f76:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f7a:	4543      	cmp	r3, r8
 8007f7c:	d321      	bcc.n	8007fc2 <__multiply+0x96>
 8007f7e:	f104 0314 	add.w	r3, r4, #20
 8007f82:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007f86:	f109 0314 	add.w	r3, r9, #20
 8007f8a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007f8e:	9202      	str	r2, [sp, #8]
 8007f90:	1b3a      	subs	r2, r7, r4
 8007f92:	3a15      	subs	r2, #21
 8007f94:	f022 0203 	bic.w	r2, r2, #3
 8007f98:	3204      	adds	r2, #4
 8007f9a:	f104 0115 	add.w	r1, r4, #21
 8007f9e:	428f      	cmp	r7, r1
 8007fa0:	bf38      	it	cc
 8007fa2:	2204      	movcc	r2, #4
 8007fa4:	9201      	str	r2, [sp, #4]
 8007fa6:	9a02      	ldr	r2, [sp, #8]
 8007fa8:	9303      	str	r3, [sp, #12]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d80c      	bhi.n	8007fc8 <__multiply+0x9c>
 8007fae:	2e00      	cmp	r6, #0
 8007fb0:	dd03      	ble.n	8007fba <__multiply+0x8e>
 8007fb2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d059      	beq.n	800806e <__multiply+0x142>
 8007fba:	6106      	str	r6, [r0, #16]
 8007fbc:	b005      	add	sp, #20
 8007fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc2:	f843 2b04 	str.w	r2, [r3], #4
 8007fc6:	e7d8      	b.n	8007f7a <__multiply+0x4e>
 8007fc8:	f8b3 a000 	ldrh.w	sl, [r3]
 8007fcc:	f1ba 0f00 	cmp.w	sl, #0
 8007fd0:	d023      	beq.n	800801a <__multiply+0xee>
 8007fd2:	46a9      	mov	r9, r5
 8007fd4:	f04f 0c00 	mov.w	ip, #0
 8007fd8:	f104 0e14 	add.w	lr, r4, #20
 8007fdc:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007fe0:	f8d9 1000 	ldr.w	r1, [r9]
 8007fe4:	fa1f fb82 	uxth.w	fp, r2
 8007fe8:	b289      	uxth	r1, r1
 8007fea:	fb0a 110b 	mla	r1, sl, fp, r1
 8007fee:	4461      	add	r1, ip
 8007ff0:	f8d9 c000 	ldr.w	ip, [r9]
 8007ff4:	0c12      	lsrs	r2, r2, #16
 8007ff6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007ffa:	fb0a c202 	mla	r2, sl, r2, ip
 8007ffe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008002:	b289      	uxth	r1, r1
 8008004:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008008:	4577      	cmp	r7, lr
 800800a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800800e:	f849 1b04 	str.w	r1, [r9], #4
 8008012:	d8e3      	bhi.n	8007fdc <__multiply+0xb0>
 8008014:	9a01      	ldr	r2, [sp, #4]
 8008016:	f845 c002 	str.w	ip, [r5, r2]
 800801a:	9a03      	ldr	r2, [sp, #12]
 800801c:	3304      	adds	r3, #4
 800801e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008022:	f1b9 0f00 	cmp.w	r9, #0
 8008026:	d020      	beq.n	800806a <__multiply+0x13e>
 8008028:	46ae      	mov	lr, r5
 800802a:	f04f 0a00 	mov.w	sl, #0
 800802e:	6829      	ldr	r1, [r5, #0]
 8008030:	f104 0c14 	add.w	ip, r4, #20
 8008034:	f8bc b000 	ldrh.w	fp, [ip]
 8008038:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800803c:	b289      	uxth	r1, r1
 800803e:	fb09 220b 	mla	r2, r9, fp, r2
 8008042:	4492      	add	sl, r2
 8008044:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008048:	f84e 1b04 	str.w	r1, [lr], #4
 800804c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008050:	f8be 1000 	ldrh.w	r1, [lr]
 8008054:	0c12      	lsrs	r2, r2, #16
 8008056:	fb09 1102 	mla	r1, r9, r2, r1
 800805a:	4567      	cmp	r7, ip
 800805c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008060:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008064:	d8e6      	bhi.n	8008034 <__multiply+0x108>
 8008066:	9a01      	ldr	r2, [sp, #4]
 8008068:	50a9      	str	r1, [r5, r2]
 800806a:	3504      	adds	r5, #4
 800806c:	e79b      	b.n	8007fa6 <__multiply+0x7a>
 800806e:	3e01      	subs	r6, #1
 8008070:	e79d      	b.n	8007fae <__multiply+0x82>
 8008072:	bf00      	nop
 8008074:	0800b377 	.word	0x0800b377
 8008078:	0800b388 	.word	0x0800b388

0800807c <__pow5mult>:
 800807c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008080:	4615      	mov	r5, r2
 8008082:	f012 0203 	ands.w	r2, r2, #3
 8008086:	4606      	mov	r6, r0
 8008088:	460f      	mov	r7, r1
 800808a:	d007      	beq.n	800809c <__pow5mult+0x20>
 800808c:	4c25      	ldr	r4, [pc, #148]	; (8008124 <__pow5mult+0xa8>)
 800808e:	3a01      	subs	r2, #1
 8008090:	2300      	movs	r3, #0
 8008092:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008096:	f7ff fe9f 	bl	8007dd8 <__multadd>
 800809a:	4607      	mov	r7, r0
 800809c:	10ad      	asrs	r5, r5, #2
 800809e:	d03d      	beq.n	800811c <__pow5mult+0xa0>
 80080a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80080a2:	b97c      	cbnz	r4, 80080c4 <__pow5mult+0x48>
 80080a4:	2010      	movs	r0, #16
 80080a6:	f7ff fe11 	bl	8007ccc <malloc>
 80080aa:	4602      	mov	r2, r0
 80080ac:	6270      	str	r0, [r6, #36]	; 0x24
 80080ae:	b928      	cbnz	r0, 80080bc <__pow5mult+0x40>
 80080b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80080b4:	4b1c      	ldr	r3, [pc, #112]	; (8008128 <__pow5mult+0xac>)
 80080b6:	481d      	ldr	r0, [pc, #116]	; (800812c <__pow5mult+0xb0>)
 80080b8:	f000 faae 	bl	8008618 <__assert_func>
 80080bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080c0:	6004      	str	r4, [r0, #0]
 80080c2:	60c4      	str	r4, [r0, #12]
 80080c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80080c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080cc:	b94c      	cbnz	r4, 80080e2 <__pow5mult+0x66>
 80080ce:	f240 2171 	movw	r1, #625	; 0x271
 80080d2:	4630      	mov	r0, r6
 80080d4:	f7ff ff14 	bl	8007f00 <__i2b>
 80080d8:	2300      	movs	r3, #0
 80080da:	4604      	mov	r4, r0
 80080dc:	f8c8 0008 	str.w	r0, [r8, #8]
 80080e0:	6003      	str	r3, [r0, #0]
 80080e2:	f04f 0900 	mov.w	r9, #0
 80080e6:	07eb      	lsls	r3, r5, #31
 80080e8:	d50a      	bpl.n	8008100 <__pow5mult+0x84>
 80080ea:	4639      	mov	r1, r7
 80080ec:	4622      	mov	r2, r4
 80080ee:	4630      	mov	r0, r6
 80080f0:	f7ff ff1c 	bl	8007f2c <__multiply>
 80080f4:	4680      	mov	r8, r0
 80080f6:	4639      	mov	r1, r7
 80080f8:	4630      	mov	r0, r6
 80080fa:	f7ff fe4b 	bl	8007d94 <_Bfree>
 80080fe:	4647      	mov	r7, r8
 8008100:	106d      	asrs	r5, r5, #1
 8008102:	d00b      	beq.n	800811c <__pow5mult+0xa0>
 8008104:	6820      	ldr	r0, [r4, #0]
 8008106:	b938      	cbnz	r0, 8008118 <__pow5mult+0x9c>
 8008108:	4622      	mov	r2, r4
 800810a:	4621      	mov	r1, r4
 800810c:	4630      	mov	r0, r6
 800810e:	f7ff ff0d 	bl	8007f2c <__multiply>
 8008112:	6020      	str	r0, [r4, #0]
 8008114:	f8c0 9000 	str.w	r9, [r0]
 8008118:	4604      	mov	r4, r0
 800811a:	e7e4      	b.n	80080e6 <__pow5mult+0x6a>
 800811c:	4638      	mov	r0, r7
 800811e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008122:	bf00      	nop
 8008124:	0800b4d8 	.word	0x0800b4d8
 8008128:	0800b305 	.word	0x0800b305
 800812c:	0800b388 	.word	0x0800b388

08008130 <__lshift>:
 8008130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008134:	460c      	mov	r4, r1
 8008136:	4607      	mov	r7, r0
 8008138:	4691      	mov	r9, r2
 800813a:	6923      	ldr	r3, [r4, #16]
 800813c:	6849      	ldr	r1, [r1, #4]
 800813e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008142:	68a3      	ldr	r3, [r4, #8]
 8008144:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008148:	f108 0601 	add.w	r6, r8, #1
 800814c:	42b3      	cmp	r3, r6
 800814e:	db0b      	blt.n	8008168 <__lshift+0x38>
 8008150:	4638      	mov	r0, r7
 8008152:	f7ff fddf 	bl	8007d14 <_Balloc>
 8008156:	4605      	mov	r5, r0
 8008158:	b948      	cbnz	r0, 800816e <__lshift+0x3e>
 800815a:	4602      	mov	r2, r0
 800815c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008160:	4b29      	ldr	r3, [pc, #164]	; (8008208 <__lshift+0xd8>)
 8008162:	482a      	ldr	r0, [pc, #168]	; (800820c <__lshift+0xdc>)
 8008164:	f000 fa58 	bl	8008618 <__assert_func>
 8008168:	3101      	adds	r1, #1
 800816a:	005b      	lsls	r3, r3, #1
 800816c:	e7ee      	b.n	800814c <__lshift+0x1c>
 800816e:	2300      	movs	r3, #0
 8008170:	f100 0114 	add.w	r1, r0, #20
 8008174:	f100 0210 	add.w	r2, r0, #16
 8008178:	4618      	mov	r0, r3
 800817a:	4553      	cmp	r3, sl
 800817c:	db37      	blt.n	80081ee <__lshift+0xbe>
 800817e:	6920      	ldr	r0, [r4, #16]
 8008180:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008184:	f104 0314 	add.w	r3, r4, #20
 8008188:	f019 091f 	ands.w	r9, r9, #31
 800818c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008190:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008194:	d02f      	beq.n	80081f6 <__lshift+0xc6>
 8008196:	468a      	mov	sl, r1
 8008198:	f04f 0c00 	mov.w	ip, #0
 800819c:	f1c9 0e20 	rsb	lr, r9, #32
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	fa02 f209 	lsl.w	r2, r2, r9
 80081a6:	ea42 020c 	orr.w	r2, r2, ip
 80081aa:	f84a 2b04 	str.w	r2, [sl], #4
 80081ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80081b2:	4298      	cmp	r0, r3
 80081b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80081b8:	d8f2      	bhi.n	80081a0 <__lshift+0x70>
 80081ba:	1b03      	subs	r3, r0, r4
 80081bc:	3b15      	subs	r3, #21
 80081be:	f023 0303 	bic.w	r3, r3, #3
 80081c2:	3304      	adds	r3, #4
 80081c4:	f104 0215 	add.w	r2, r4, #21
 80081c8:	4290      	cmp	r0, r2
 80081ca:	bf38      	it	cc
 80081cc:	2304      	movcc	r3, #4
 80081ce:	f841 c003 	str.w	ip, [r1, r3]
 80081d2:	f1bc 0f00 	cmp.w	ip, #0
 80081d6:	d001      	beq.n	80081dc <__lshift+0xac>
 80081d8:	f108 0602 	add.w	r6, r8, #2
 80081dc:	3e01      	subs	r6, #1
 80081de:	4638      	mov	r0, r7
 80081e0:	4621      	mov	r1, r4
 80081e2:	612e      	str	r6, [r5, #16]
 80081e4:	f7ff fdd6 	bl	8007d94 <_Bfree>
 80081e8:	4628      	mov	r0, r5
 80081ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80081f2:	3301      	adds	r3, #1
 80081f4:	e7c1      	b.n	800817a <__lshift+0x4a>
 80081f6:	3904      	subs	r1, #4
 80081f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80081fc:	4298      	cmp	r0, r3
 80081fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8008202:	d8f9      	bhi.n	80081f8 <__lshift+0xc8>
 8008204:	e7ea      	b.n	80081dc <__lshift+0xac>
 8008206:	bf00      	nop
 8008208:	0800b377 	.word	0x0800b377
 800820c:	0800b388 	.word	0x0800b388

08008210 <__mcmp>:
 8008210:	4603      	mov	r3, r0
 8008212:	690a      	ldr	r2, [r1, #16]
 8008214:	6900      	ldr	r0, [r0, #16]
 8008216:	b530      	push	{r4, r5, lr}
 8008218:	1a80      	subs	r0, r0, r2
 800821a:	d10d      	bne.n	8008238 <__mcmp+0x28>
 800821c:	3314      	adds	r3, #20
 800821e:	3114      	adds	r1, #20
 8008220:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008224:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008228:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800822c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008230:	4295      	cmp	r5, r2
 8008232:	d002      	beq.n	800823a <__mcmp+0x2a>
 8008234:	d304      	bcc.n	8008240 <__mcmp+0x30>
 8008236:	2001      	movs	r0, #1
 8008238:	bd30      	pop	{r4, r5, pc}
 800823a:	42a3      	cmp	r3, r4
 800823c:	d3f4      	bcc.n	8008228 <__mcmp+0x18>
 800823e:	e7fb      	b.n	8008238 <__mcmp+0x28>
 8008240:	f04f 30ff 	mov.w	r0, #4294967295
 8008244:	e7f8      	b.n	8008238 <__mcmp+0x28>
	...

08008248 <__mdiff>:
 8008248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824c:	460d      	mov	r5, r1
 800824e:	4607      	mov	r7, r0
 8008250:	4611      	mov	r1, r2
 8008252:	4628      	mov	r0, r5
 8008254:	4614      	mov	r4, r2
 8008256:	f7ff ffdb 	bl	8008210 <__mcmp>
 800825a:	1e06      	subs	r6, r0, #0
 800825c:	d111      	bne.n	8008282 <__mdiff+0x3a>
 800825e:	4631      	mov	r1, r6
 8008260:	4638      	mov	r0, r7
 8008262:	f7ff fd57 	bl	8007d14 <_Balloc>
 8008266:	4602      	mov	r2, r0
 8008268:	b928      	cbnz	r0, 8008276 <__mdiff+0x2e>
 800826a:	f240 2132 	movw	r1, #562	; 0x232
 800826e:	4b3a      	ldr	r3, [pc, #232]	; (8008358 <__mdiff+0x110>)
 8008270:	483a      	ldr	r0, [pc, #232]	; (800835c <__mdiff+0x114>)
 8008272:	f000 f9d1 	bl	8008618 <__assert_func>
 8008276:	2301      	movs	r3, #1
 8008278:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800827c:	4610      	mov	r0, r2
 800827e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008282:	bfa4      	itt	ge
 8008284:	4623      	movge	r3, r4
 8008286:	462c      	movge	r4, r5
 8008288:	4638      	mov	r0, r7
 800828a:	6861      	ldr	r1, [r4, #4]
 800828c:	bfa6      	itte	ge
 800828e:	461d      	movge	r5, r3
 8008290:	2600      	movge	r6, #0
 8008292:	2601      	movlt	r6, #1
 8008294:	f7ff fd3e 	bl	8007d14 <_Balloc>
 8008298:	4602      	mov	r2, r0
 800829a:	b918      	cbnz	r0, 80082a4 <__mdiff+0x5c>
 800829c:	f44f 7110 	mov.w	r1, #576	; 0x240
 80082a0:	4b2d      	ldr	r3, [pc, #180]	; (8008358 <__mdiff+0x110>)
 80082a2:	e7e5      	b.n	8008270 <__mdiff+0x28>
 80082a4:	f102 0814 	add.w	r8, r2, #20
 80082a8:	46c2      	mov	sl, r8
 80082aa:	f04f 0c00 	mov.w	ip, #0
 80082ae:	6927      	ldr	r7, [r4, #16]
 80082b0:	60c6      	str	r6, [r0, #12]
 80082b2:	692e      	ldr	r6, [r5, #16]
 80082b4:	f104 0014 	add.w	r0, r4, #20
 80082b8:	f105 0914 	add.w	r9, r5, #20
 80082bc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80082c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80082c4:	3410      	adds	r4, #16
 80082c6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80082ca:	f859 3b04 	ldr.w	r3, [r9], #4
 80082ce:	fa1f f18b 	uxth.w	r1, fp
 80082d2:	448c      	add	ip, r1
 80082d4:	b299      	uxth	r1, r3
 80082d6:	0c1b      	lsrs	r3, r3, #16
 80082d8:	ebac 0101 	sub.w	r1, ip, r1
 80082dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80082e0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80082e4:	b289      	uxth	r1, r1
 80082e6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80082ea:	454e      	cmp	r6, r9
 80082ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80082f0:	f84a 3b04 	str.w	r3, [sl], #4
 80082f4:	d8e7      	bhi.n	80082c6 <__mdiff+0x7e>
 80082f6:	1b73      	subs	r3, r6, r5
 80082f8:	3b15      	subs	r3, #21
 80082fa:	f023 0303 	bic.w	r3, r3, #3
 80082fe:	3515      	adds	r5, #21
 8008300:	3304      	adds	r3, #4
 8008302:	42ae      	cmp	r6, r5
 8008304:	bf38      	it	cc
 8008306:	2304      	movcc	r3, #4
 8008308:	4418      	add	r0, r3
 800830a:	4443      	add	r3, r8
 800830c:	461e      	mov	r6, r3
 800830e:	4605      	mov	r5, r0
 8008310:	4575      	cmp	r5, lr
 8008312:	d30e      	bcc.n	8008332 <__mdiff+0xea>
 8008314:	f10e 0103 	add.w	r1, lr, #3
 8008318:	1a09      	subs	r1, r1, r0
 800831a:	f021 0103 	bic.w	r1, r1, #3
 800831e:	3803      	subs	r0, #3
 8008320:	4586      	cmp	lr, r0
 8008322:	bf38      	it	cc
 8008324:	2100      	movcc	r1, #0
 8008326:	4419      	add	r1, r3
 8008328:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800832c:	b18b      	cbz	r3, 8008352 <__mdiff+0x10a>
 800832e:	6117      	str	r7, [r2, #16]
 8008330:	e7a4      	b.n	800827c <__mdiff+0x34>
 8008332:	f855 8b04 	ldr.w	r8, [r5], #4
 8008336:	fa1f f188 	uxth.w	r1, r8
 800833a:	4461      	add	r1, ip
 800833c:	140c      	asrs	r4, r1, #16
 800833e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008342:	b289      	uxth	r1, r1
 8008344:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008348:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800834c:	f846 1b04 	str.w	r1, [r6], #4
 8008350:	e7de      	b.n	8008310 <__mdiff+0xc8>
 8008352:	3f01      	subs	r7, #1
 8008354:	e7e8      	b.n	8008328 <__mdiff+0xe0>
 8008356:	bf00      	nop
 8008358:	0800b377 	.word	0x0800b377
 800835c:	0800b388 	.word	0x0800b388

08008360 <__d2b>:
 8008360:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008364:	2101      	movs	r1, #1
 8008366:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800836a:	4690      	mov	r8, r2
 800836c:	461d      	mov	r5, r3
 800836e:	f7ff fcd1 	bl	8007d14 <_Balloc>
 8008372:	4604      	mov	r4, r0
 8008374:	b930      	cbnz	r0, 8008384 <__d2b+0x24>
 8008376:	4602      	mov	r2, r0
 8008378:	f240 310a 	movw	r1, #778	; 0x30a
 800837c:	4b24      	ldr	r3, [pc, #144]	; (8008410 <__d2b+0xb0>)
 800837e:	4825      	ldr	r0, [pc, #148]	; (8008414 <__d2b+0xb4>)
 8008380:	f000 f94a 	bl	8008618 <__assert_func>
 8008384:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008388:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800838c:	bb2d      	cbnz	r5, 80083da <__d2b+0x7a>
 800838e:	9301      	str	r3, [sp, #4]
 8008390:	f1b8 0300 	subs.w	r3, r8, #0
 8008394:	d026      	beq.n	80083e4 <__d2b+0x84>
 8008396:	4668      	mov	r0, sp
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	f7ff fd83 	bl	8007ea4 <__lo0bits>
 800839e:	9900      	ldr	r1, [sp, #0]
 80083a0:	b1f0      	cbz	r0, 80083e0 <__d2b+0x80>
 80083a2:	9a01      	ldr	r2, [sp, #4]
 80083a4:	f1c0 0320 	rsb	r3, r0, #32
 80083a8:	fa02 f303 	lsl.w	r3, r2, r3
 80083ac:	430b      	orrs	r3, r1
 80083ae:	40c2      	lsrs	r2, r0
 80083b0:	6163      	str	r3, [r4, #20]
 80083b2:	9201      	str	r2, [sp, #4]
 80083b4:	9b01      	ldr	r3, [sp, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	bf14      	ite	ne
 80083ba:	2102      	movne	r1, #2
 80083bc:	2101      	moveq	r1, #1
 80083be:	61a3      	str	r3, [r4, #24]
 80083c0:	6121      	str	r1, [r4, #16]
 80083c2:	b1c5      	cbz	r5, 80083f6 <__d2b+0x96>
 80083c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80083c8:	4405      	add	r5, r0
 80083ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80083ce:	603d      	str	r5, [r7, #0]
 80083d0:	6030      	str	r0, [r6, #0]
 80083d2:	4620      	mov	r0, r4
 80083d4:	b002      	add	sp, #8
 80083d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083de:	e7d6      	b.n	800838e <__d2b+0x2e>
 80083e0:	6161      	str	r1, [r4, #20]
 80083e2:	e7e7      	b.n	80083b4 <__d2b+0x54>
 80083e4:	a801      	add	r0, sp, #4
 80083e6:	f7ff fd5d 	bl	8007ea4 <__lo0bits>
 80083ea:	2101      	movs	r1, #1
 80083ec:	9b01      	ldr	r3, [sp, #4]
 80083ee:	6121      	str	r1, [r4, #16]
 80083f0:	6163      	str	r3, [r4, #20]
 80083f2:	3020      	adds	r0, #32
 80083f4:	e7e5      	b.n	80083c2 <__d2b+0x62>
 80083f6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80083fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80083fe:	6038      	str	r0, [r7, #0]
 8008400:	6918      	ldr	r0, [r3, #16]
 8008402:	f7ff fd2f 	bl	8007e64 <__hi0bits>
 8008406:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800840a:	6031      	str	r1, [r6, #0]
 800840c:	e7e1      	b.n	80083d2 <__d2b+0x72>
 800840e:	bf00      	nop
 8008410:	0800b377 	.word	0x0800b377
 8008414:	0800b388 	.word	0x0800b388

08008418 <_calloc_r>:
 8008418:	b570      	push	{r4, r5, r6, lr}
 800841a:	fba1 5402 	umull	r5, r4, r1, r2
 800841e:	b934      	cbnz	r4, 800842e <_calloc_r+0x16>
 8008420:	4629      	mov	r1, r5
 8008422:	f000 f875 	bl	8008510 <_malloc_r>
 8008426:	4606      	mov	r6, r0
 8008428:	b928      	cbnz	r0, 8008436 <_calloc_r+0x1e>
 800842a:	4630      	mov	r0, r6
 800842c:	bd70      	pop	{r4, r5, r6, pc}
 800842e:	220c      	movs	r2, #12
 8008430:	2600      	movs	r6, #0
 8008432:	6002      	str	r2, [r0, #0]
 8008434:	e7f9      	b.n	800842a <_calloc_r+0x12>
 8008436:	462a      	mov	r2, r5
 8008438:	4621      	mov	r1, r4
 800843a:	f7fe f961 	bl	8006700 <memset>
 800843e:	e7f4      	b.n	800842a <_calloc_r+0x12>

08008440 <_free_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4605      	mov	r5, r0
 8008444:	2900      	cmp	r1, #0
 8008446:	d040      	beq.n	80084ca <_free_r+0x8a>
 8008448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800844c:	1f0c      	subs	r4, r1, #4
 800844e:	2b00      	cmp	r3, #0
 8008450:	bfb8      	it	lt
 8008452:	18e4      	addlt	r4, r4, r3
 8008454:	f000 f922 	bl	800869c <__malloc_lock>
 8008458:	4a1c      	ldr	r2, [pc, #112]	; (80084cc <_free_r+0x8c>)
 800845a:	6813      	ldr	r3, [r2, #0]
 800845c:	b933      	cbnz	r3, 800846c <_free_r+0x2c>
 800845e:	6063      	str	r3, [r4, #4]
 8008460:	6014      	str	r4, [r2, #0]
 8008462:	4628      	mov	r0, r5
 8008464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008468:	f000 b91e 	b.w	80086a8 <__malloc_unlock>
 800846c:	42a3      	cmp	r3, r4
 800846e:	d908      	bls.n	8008482 <_free_r+0x42>
 8008470:	6820      	ldr	r0, [r4, #0]
 8008472:	1821      	adds	r1, r4, r0
 8008474:	428b      	cmp	r3, r1
 8008476:	bf01      	itttt	eq
 8008478:	6819      	ldreq	r1, [r3, #0]
 800847a:	685b      	ldreq	r3, [r3, #4]
 800847c:	1809      	addeq	r1, r1, r0
 800847e:	6021      	streq	r1, [r4, #0]
 8008480:	e7ed      	b.n	800845e <_free_r+0x1e>
 8008482:	461a      	mov	r2, r3
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	b10b      	cbz	r3, 800848c <_free_r+0x4c>
 8008488:	42a3      	cmp	r3, r4
 800848a:	d9fa      	bls.n	8008482 <_free_r+0x42>
 800848c:	6811      	ldr	r1, [r2, #0]
 800848e:	1850      	adds	r0, r2, r1
 8008490:	42a0      	cmp	r0, r4
 8008492:	d10b      	bne.n	80084ac <_free_r+0x6c>
 8008494:	6820      	ldr	r0, [r4, #0]
 8008496:	4401      	add	r1, r0
 8008498:	1850      	adds	r0, r2, r1
 800849a:	4283      	cmp	r3, r0
 800849c:	6011      	str	r1, [r2, #0]
 800849e:	d1e0      	bne.n	8008462 <_free_r+0x22>
 80084a0:	6818      	ldr	r0, [r3, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	4401      	add	r1, r0
 80084a6:	6011      	str	r1, [r2, #0]
 80084a8:	6053      	str	r3, [r2, #4]
 80084aa:	e7da      	b.n	8008462 <_free_r+0x22>
 80084ac:	d902      	bls.n	80084b4 <_free_r+0x74>
 80084ae:	230c      	movs	r3, #12
 80084b0:	602b      	str	r3, [r5, #0]
 80084b2:	e7d6      	b.n	8008462 <_free_r+0x22>
 80084b4:	6820      	ldr	r0, [r4, #0]
 80084b6:	1821      	adds	r1, r4, r0
 80084b8:	428b      	cmp	r3, r1
 80084ba:	bf01      	itttt	eq
 80084bc:	6819      	ldreq	r1, [r3, #0]
 80084be:	685b      	ldreq	r3, [r3, #4]
 80084c0:	1809      	addeq	r1, r1, r0
 80084c2:	6021      	streq	r1, [r4, #0]
 80084c4:	6063      	str	r3, [r4, #4]
 80084c6:	6054      	str	r4, [r2, #4]
 80084c8:	e7cb      	b.n	8008462 <_free_r+0x22>
 80084ca:	bd38      	pop	{r3, r4, r5, pc}
 80084cc:	20000454 	.word	0x20000454

080084d0 <sbrk_aligned>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	4e0e      	ldr	r6, [pc, #56]	; (800850c <sbrk_aligned+0x3c>)
 80084d4:	460c      	mov	r4, r1
 80084d6:	6831      	ldr	r1, [r6, #0]
 80084d8:	4605      	mov	r5, r0
 80084da:	b911      	cbnz	r1, 80084e2 <sbrk_aligned+0x12>
 80084dc:	f000 f88c 	bl	80085f8 <_sbrk_r>
 80084e0:	6030      	str	r0, [r6, #0]
 80084e2:	4621      	mov	r1, r4
 80084e4:	4628      	mov	r0, r5
 80084e6:	f000 f887 	bl	80085f8 <_sbrk_r>
 80084ea:	1c43      	adds	r3, r0, #1
 80084ec:	d00a      	beq.n	8008504 <sbrk_aligned+0x34>
 80084ee:	1cc4      	adds	r4, r0, #3
 80084f0:	f024 0403 	bic.w	r4, r4, #3
 80084f4:	42a0      	cmp	r0, r4
 80084f6:	d007      	beq.n	8008508 <sbrk_aligned+0x38>
 80084f8:	1a21      	subs	r1, r4, r0
 80084fa:	4628      	mov	r0, r5
 80084fc:	f000 f87c 	bl	80085f8 <_sbrk_r>
 8008500:	3001      	adds	r0, #1
 8008502:	d101      	bne.n	8008508 <sbrk_aligned+0x38>
 8008504:	f04f 34ff 	mov.w	r4, #4294967295
 8008508:	4620      	mov	r0, r4
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	20000458 	.word	0x20000458

08008510 <_malloc_r>:
 8008510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008514:	1ccd      	adds	r5, r1, #3
 8008516:	f025 0503 	bic.w	r5, r5, #3
 800851a:	3508      	adds	r5, #8
 800851c:	2d0c      	cmp	r5, #12
 800851e:	bf38      	it	cc
 8008520:	250c      	movcc	r5, #12
 8008522:	2d00      	cmp	r5, #0
 8008524:	4607      	mov	r7, r0
 8008526:	db01      	blt.n	800852c <_malloc_r+0x1c>
 8008528:	42a9      	cmp	r1, r5
 800852a:	d905      	bls.n	8008538 <_malloc_r+0x28>
 800852c:	230c      	movs	r3, #12
 800852e:	2600      	movs	r6, #0
 8008530:	603b      	str	r3, [r7, #0]
 8008532:	4630      	mov	r0, r6
 8008534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008538:	4e2e      	ldr	r6, [pc, #184]	; (80085f4 <_malloc_r+0xe4>)
 800853a:	f000 f8af 	bl	800869c <__malloc_lock>
 800853e:	6833      	ldr	r3, [r6, #0]
 8008540:	461c      	mov	r4, r3
 8008542:	bb34      	cbnz	r4, 8008592 <_malloc_r+0x82>
 8008544:	4629      	mov	r1, r5
 8008546:	4638      	mov	r0, r7
 8008548:	f7ff ffc2 	bl	80084d0 <sbrk_aligned>
 800854c:	1c43      	adds	r3, r0, #1
 800854e:	4604      	mov	r4, r0
 8008550:	d14d      	bne.n	80085ee <_malloc_r+0xde>
 8008552:	6834      	ldr	r4, [r6, #0]
 8008554:	4626      	mov	r6, r4
 8008556:	2e00      	cmp	r6, #0
 8008558:	d140      	bne.n	80085dc <_malloc_r+0xcc>
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	4631      	mov	r1, r6
 800855e:	4638      	mov	r0, r7
 8008560:	eb04 0803 	add.w	r8, r4, r3
 8008564:	f000 f848 	bl	80085f8 <_sbrk_r>
 8008568:	4580      	cmp	r8, r0
 800856a:	d13a      	bne.n	80085e2 <_malloc_r+0xd2>
 800856c:	6821      	ldr	r1, [r4, #0]
 800856e:	3503      	adds	r5, #3
 8008570:	1a6d      	subs	r5, r5, r1
 8008572:	f025 0503 	bic.w	r5, r5, #3
 8008576:	3508      	adds	r5, #8
 8008578:	2d0c      	cmp	r5, #12
 800857a:	bf38      	it	cc
 800857c:	250c      	movcc	r5, #12
 800857e:	4638      	mov	r0, r7
 8008580:	4629      	mov	r1, r5
 8008582:	f7ff ffa5 	bl	80084d0 <sbrk_aligned>
 8008586:	3001      	adds	r0, #1
 8008588:	d02b      	beq.n	80085e2 <_malloc_r+0xd2>
 800858a:	6823      	ldr	r3, [r4, #0]
 800858c:	442b      	add	r3, r5
 800858e:	6023      	str	r3, [r4, #0]
 8008590:	e00e      	b.n	80085b0 <_malloc_r+0xa0>
 8008592:	6822      	ldr	r2, [r4, #0]
 8008594:	1b52      	subs	r2, r2, r5
 8008596:	d41e      	bmi.n	80085d6 <_malloc_r+0xc6>
 8008598:	2a0b      	cmp	r2, #11
 800859a:	d916      	bls.n	80085ca <_malloc_r+0xba>
 800859c:	1961      	adds	r1, r4, r5
 800859e:	42a3      	cmp	r3, r4
 80085a0:	6025      	str	r5, [r4, #0]
 80085a2:	bf18      	it	ne
 80085a4:	6059      	strne	r1, [r3, #4]
 80085a6:	6863      	ldr	r3, [r4, #4]
 80085a8:	bf08      	it	eq
 80085aa:	6031      	streq	r1, [r6, #0]
 80085ac:	5162      	str	r2, [r4, r5]
 80085ae:	604b      	str	r3, [r1, #4]
 80085b0:	4638      	mov	r0, r7
 80085b2:	f104 060b 	add.w	r6, r4, #11
 80085b6:	f000 f877 	bl	80086a8 <__malloc_unlock>
 80085ba:	f026 0607 	bic.w	r6, r6, #7
 80085be:	1d23      	adds	r3, r4, #4
 80085c0:	1af2      	subs	r2, r6, r3
 80085c2:	d0b6      	beq.n	8008532 <_malloc_r+0x22>
 80085c4:	1b9b      	subs	r3, r3, r6
 80085c6:	50a3      	str	r3, [r4, r2]
 80085c8:	e7b3      	b.n	8008532 <_malloc_r+0x22>
 80085ca:	6862      	ldr	r2, [r4, #4]
 80085cc:	42a3      	cmp	r3, r4
 80085ce:	bf0c      	ite	eq
 80085d0:	6032      	streq	r2, [r6, #0]
 80085d2:	605a      	strne	r2, [r3, #4]
 80085d4:	e7ec      	b.n	80085b0 <_malloc_r+0xa0>
 80085d6:	4623      	mov	r3, r4
 80085d8:	6864      	ldr	r4, [r4, #4]
 80085da:	e7b2      	b.n	8008542 <_malloc_r+0x32>
 80085dc:	4634      	mov	r4, r6
 80085de:	6876      	ldr	r6, [r6, #4]
 80085e0:	e7b9      	b.n	8008556 <_malloc_r+0x46>
 80085e2:	230c      	movs	r3, #12
 80085e4:	4638      	mov	r0, r7
 80085e6:	603b      	str	r3, [r7, #0]
 80085e8:	f000 f85e 	bl	80086a8 <__malloc_unlock>
 80085ec:	e7a1      	b.n	8008532 <_malloc_r+0x22>
 80085ee:	6025      	str	r5, [r4, #0]
 80085f0:	e7de      	b.n	80085b0 <_malloc_r+0xa0>
 80085f2:	bf00      	nop
 80085f4:	20000454 	.word	0x20000454

080085f8 <_sbrk_r>:
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	2300      	movs	r3, #0
 80085fc:	4d05      	ldr	r5, [pc, #20]	; (8008614 <_sbrk_r+0x1c>)
 80085fe:	4604      	mov	r4, r0
 8008600:	4608      	mov	r0, r1
 8008602:	602b      	str	r3, [r5, #0]
 8008604:	f7fa fe58 	bl	80032b8 <_sbrk>
 8008608:	1c43      	adds	r3, r0, #1
 800860a:	d102      	bne.n	8008612 <_sbrk_r+0x1a>
 800860c:	682b      	ldr	r3, [r5, #0]
 800860e:	b103      	cbz	r3, 8008612 <_sbrk_r+0x1a>
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	bd38      	pop	{r3, r4, r5, pc}
 8008614:	2000045c 	.word	0x2000045c

08008618 <__assert_func>:
 8008618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800861a:	4614      	mov	r4, r2
 800861c:	461a      	mov	r2, r3
 800861e:	4b09      	ldr	r3, [pc, #36]	; (8008644 <__assert_func+0x2c>)
 8008620:	4605      	mov	r5, r0
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68d8      	ldr	r0, [r3, #12]
 8008626:	b14c      	cbz	r4, 800863c <__assert_func+0x24>
 8008628:	4b07      	ldr	r3, [pc, #28]	; (8008648 <__assert_func+0x30>)
 800862a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800862e:	9100      	str	r1, [sp, #0]
 8008630:	462b      	mov	r3, r5
 8008632:	4906      	ldr	r1, [pc, #24]	; (800864c <__assert_func+0x34>)
 8008634:	f000 f80e 	bl	8008654 <fiprintf>
 8008638:	f000 fa62 	bl	8008b00 <abort>
 800863c:	4b04      	ldr	r3, [pc, #16]	; (8008650 <__assert_func+0x38>)
 800863e:	461c      	mov	r4, r3
 8008640:	e7f3      	b.n	800862a <__assert_func+0x12>
 8008642:	bf00      	nop
 8008644:	20000048 	.word	0x20000048
 8008648:	0800b4e4 	.word	0x0800b4e4
 800864c:	0800b4f1 	.word	0x0800b4f1
 8008650:	0800b51f 	.word	0x0800b51f

08008654 <fiprintf>:
 8008654:	b40e      	push	{r1, r2, r3}
 8008656:	b503      	push	{r0, r1, lr}
 8008658:	4601      	mov	r1, r0
 800865a:	ab03      	add	r3, sp, #12
 800865c:	4805      	ldr	r0, [pc, #20]	; (8008674 <fiprintf+0x20>)
 800865e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008662:	6800      	ldr	r0, [r0, #0]
 8008664:	9301      	str	r3, [sp, #4]
 8008666:	f000 f84d 	bl	8008704 <_vfiprintf_r>
 800866a:	b002      	add	sp, #8
 800866c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008670:	b003      	add	sp, #12
 8008672:	4770      	bx	lr
 8008674:	20000048 	.word	0x20000048

08008678 <__ascii_mbtowc>:
 8008678:	b082      	sub	sp, #8
 800867a:	b901      	cbnz	r1, 800867e <__ascii_mbtowc+0x6>
 800867c:	a901      	add	r1, sp, #4
 800867e:	b142      	cbz	r2, 8008692 <__ascii_mbtowc+0x1a>
 8008680:	b14b      	cbz	r3, 8008696 <__ascii_mbtowc+0x1e>
 8008682:	7813      	ldrb	r3, [r2, #0]
 8008684:	600b      	str	r3, [r1, #0]
 8008686:	7812      	ldrb	r2, [r2, #0]
 8008688:	1e10      	subs	r0, r2, #0
 800868a:	bf18      	it	ne
 800868c:	2001      	movne	r0, #1
 800868e:	b002      	add	sp, #8
 8008690:	4770      	bx	lr
 8008692:	4610      	mov	r0, r2
 8008694:	e7fb      	b.n	800868e <__ascii_mbtowc+0x16>
 8008696:	f06f 0001 	mvn.w	r0, #1
 800869a:	e7f8      	b.n	800868e <__ascii_mbtowc+0x16>

0800869c <__malloc_lock>:
 800869c:	4801      	ldr	r0, [pc, #4]	; (80086a4 <__malloc_lock+0x8>)
 800869e:	f000 bbeb 	b.w	8008e78 <__retarget_lock_acquire_recursive>
 80086a2:	bf00      	nop
 80086a4:	20000460 	.word	0x20000460

080086a8 <__malloc_unlock>:
 80086a8:	4801      	ldr	r0, [pc, #4]	; (80086b0 <__malloc_unlock+0x8>)
 80086aa:	f000 bbe6 	b.w	8008e7a <__retarget_lock_release_recursive>
 80086ae:	bf00      	nop
 80086b0:	20000460 	.word	0x20000460

080086b4 <__sfputc_r>:
 80086b4:	6893      	ldr	r3, [r2, #8]
 80086b6:	b410      	push	{r4}
 80086b8:	3b01      	subs	r3, #1
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	6093      	str	r3, [r2, #8]
 80086be:	da07      	bge.n	80086d0 <__sfputc_r+0x1c>
 80086c0:	6994      	ldr	r4, [r2, #24]
 80086c2:	42a3      	cmp	r3, r4
 80086c4:	db01      	blt.n	80086ca <__sfputc_r+0x16>
 80086c6:	290a      	cmp	r1, #10
 80086c8:	d102      	bne.n	80086d0 <__sfputc_r+0x1c>
 80086ca:	bc10      	pop	{r4}
 80086cc:	f000 b94a 	b.w	8008964 <__swbuf_r>
 80086d0:	6813      	ldr	r3, [r2, #0]
 80086d2:	1c58      	adds	r0, r3, #1
 80086d4:	6010      	str	r0, [r2, #0]
 80086d6:	7019      	strb	r1, [r3, #0]
 80086d8:	4608      	mov	r0, r1
 80086da:	bc10      	pop	{r4}
 80086dc:	4770      	bx	lr

080086de <__sfputs_r>:
 80086de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e0:	4606      	mov	r6, r0
 80086e2:	460f      	mov	r7, r1
 80086e4:	4614      	mov	r4, r2
 80086e6:	18d5      	adds	r5, r2, r3
 80086e8:	42ac      	cmp	r4, r5
 80086ea:	d101      	bne.n	80086f0 <__sfputs_r+0x12>
 80086ec:	2000      	movs	r0, #0
 80086ee:	e007      	b.n	8008700 <__sfputs_r+0x22>
 80086f0:	463a      	mov	r2, r7
 80086f2:	4630      	mov	r0, r6
 80086f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086f8:	f7ff ffdc 	bl	80086b4 <__sfputc_r>
 80086fc:	1c43      	adds	r3, r0, #1
 80086fe:	d1f3      	bne.n	80086e8 <__sfputs_r+0xa>
 8008700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008704 <_vfiprintf_r>:
 8008704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008708:	460d      	mov	r5, r1
 800870a:	4614      	mov	r4, r2
 800870c:	4698      	mov	r8, r3
 800870e:	4606      	mov	r6, r0
 8008710:	b09d      	sub	sp, #116	; 0x74
 8008712:	b118      	cbz	r0, 800871c <_vfiprintf_r+0x18>
 8008714:	6983      	ldr	r3, [r0, #24]
 8008716:	b90b      	cbnz	r3, 800871c <_vfiprintf_r+0x18>
 8008718:	f000 fb10 	bl	8008d3c <__sinit>
 800871c:	4b89      	ldr	r3, [pc, #548]	; (8008944 <_vfiprintf_r+0x240>)
 800871e:	429d      	cmp	r5, r3
 8008720:	d11b      	bne.n	800875a <_vfiprintf_r+0x56>
 8008722:	6875      	ldr	r5, [r6, #4]
 8008724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008726:	07d9      	lsls	r1, r3, #31
 8008728:	d405      	bmi.n	8008736 <_vfiprintf_r+0x32>
 800872a:	89ab      	ldrh	r3, [r5, #12]
 800872c:	059a      	lsls	r2, r3, #22
 800872e:	d402      	bmi.n	8008736 <_vfiprintf_r+0x32>
 8008730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008732:	f000 fba1 	bl	8008e78 <__retarget_lock_acquire_recursive>
 8008736:	89ab      	ldrh	r3, [r5, #12]
 8008738:	071b      	lsls	r3, r3, #28
 800873a:	d501      	bpl.n	8008740 <_vfiprintf_r+0x3c>
 800873c:	692b      	ldr	r3, [r5, #16]
 800873e:	b9eb      	cbnz	r3, 800877c <_vfiprintf_r+0x78>
 8008740:	4629      	mov	r1, r5
 8008742:	4630      	mov	r0, r6
 8008744:	f000 f96e 	bl	8008a24 <__swsetup_r>
 8008748:	b1c0      	cbz	r0, 800877c <_vfiprintf_r+0x78>
 800874a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800874c:	07dc      	lsls	r4, r3, #31
 800874e:	d50e      	bpl.n	800876e <_vfiprintf_r+0x6a>
 8008750:	f04f 30ff 	mov.w	r0, #4294967295
 8008754:	b01d      	add	sp, #116	; 0x74
 8008756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800875a:	4b7b      	ldr	r3, [pc, #492]	; (8008948 <_vfiprintf_r+0x244>)
 800875c:	429d      	cmp	r5, r3
 800875e:	d101      	bne.n	8008764 <_vfiprintf_r+0x60>
 8008760:	68b5      	ldr	r5, [r6, #8]
 8008762:	e7df      	b.n	8008724 <_vfiprintf_r+0x20>
 8008764:	4b79      	ldr	r3, [pc, #484]	; (800894c <_vfiprintf_r+0x248>)
 8008766:	429d      	cmp	r5, r3
 8008768:	bf08      	it	eq
 800876a:	68f5      	ldreq	r5, [r6, #12]
 800876c:	e7da      	b.n	8008724 <_vfiprintf_r+0x20>
 800876e:	89ab      	ldrh	r3, [r5, #12]
 8008770:	0598      	lsls	r0, r3, #22
 8008772:	d4ed      	bmi.n	8008750 <_vfiprintf_r+0x4c>
 8008774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008776:	f000 fb80 	bl	8008e7a <__retarget_lock_release_recursive>
 800877a:	e7e9      	b.n	8008750 <_vfiprintf_r+0x4c>
 800877c:	2300      	movs	r3, #0
 800877e:	9309      	str	r3, [sp, #36]	; 0x24
 8008780:	2320      	movs	r3, #32
 8008782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008786:	2330      	movs	r3, #48	; 0x30
 8008788:	f04f 0901 	mov.w	r9, #1
 800878c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008790:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008950 <_vfiprintf_r+0x24c>
 8008794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008798:	4623      	mov	r3, r4
 800879a:	469a      	mov	sl, r3
 800879c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087a0:	b10a      	cbz	r2, 80087a6 <_vfiprintf_r+0xa2>
 80087a2:	2a25      	cmp	r2, #37	; 0x25
 80087a4:	d1f9      	bne.n	800879a <_vfiprintf_r+0x96>
 80087a6:	ebba 0b04 	subs.w	fp, sl, r4
 80087aa:	d00b      	beq.n	80087c4 <_vfiprintf_r+0xc0>
 80087ac:	465b      	mov	r3, fp
 80087ae:	4622      	mov	r2, r4
 80087b0:	4629      	mov	r1, r5
 80087b2:	4630      	mov	r0, r6
 80087b4:	f7ff ff93 	bl	80086de <__sfputs_r>
 80087b8:	3001      	adds	r0, #1
 80087ba:	f000 80aa 	beq.w	8008912 <_vfiprintf_r+0x20e>
 80087be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087c0:	445a      	add	r2, fp
 80087c2:	9209      	str	r2, [sp, #36]	; 0x24
 80087c4:	f89a 3000 	ldrb.w	r3, [sl]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 80a2 	beq.w	8008912 <_vfiprintf_r+0x20e>
 80087ce:	2300      	movs	r3, #0
 80087d0:	f04f 32ff 	mov.w	r2, #4294967295
 80087d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087d8:	f10a 0a01 	add.w	sl, sl, #1
 80087dc:	9304      	str	r3, [sp, #16]
 80087de:	9307      	str	r3, [sp, #28]
 80087e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087e4:	931a      	str	r3, [sp, #104]	; 0x68
 80087e6:	4654      	mov	r4, sl
 80087e8:	2205      	movs	r2, #5
 80087ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ee:	4858      	ldr	r0, [pc, #352]	; (8008950 <_vfiprintf_r+0x24c>)
 80087f0:	f7ff fa74 	bl	8007cdc <memchr>
 80087f4:	9a04      	ldr	r2, [sp, #16]
 80087f6:	b9d8      	cbnz	r0, 8008830 <_vfiprintf_r+0x12c>
 80087f8:	06d1      	lsls	r1, r2, #27
 80087fa:	bf44      	itt	mi
 80087fc:	2320      	movmi	r3, #32
 80087fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008802:	0713      	lsls	r3, r2, #28
 8008804:	bf44      	itt	mi
 8008806:	232b      	movmi	r3, #43	; 0x2b
 8008808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800880c:	f89a 3000 	ldrb.w	r3, [sl]
 8008810:	2b2a      	cmp	r3, #42	; 0x2a
 8008812:	d015      	beq.n	8008840 <_vfiprintf_r+0x13c>
 8008814:	4654      	mov	r4, sl
 8008816:	2000      	movs	r0, #0
 8008818:	f04f 0c0a 	mov.w	ip, #10
 800881c:	9a07      	ldr	r2, [sp, #28]
 800881e:	4621      	mov	r1, r4
 8008820:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008824:	3b30      	subs	r3, #48	; 0x30
 8008826:	2b09      	cmp	r3, #9
 8008828:	d94e      	bls.n	80088c8 <_vfiprintf_r+0x1c4>
 800882a:	b1b0      	cbz	r0, 800885a <_vfiprintf_r+0x156>
 800882c:	9207      	str	r2, [sp, #28]
 800882e:	e014      	b.n	800885a <_vfiprintf_r+0x156>
 8008830:	eba0 0308 	sub.w	r3, r0, r8
 8008834:	fa09 f303 	lsl.w	r3, r9, r3
 8008838:	4313      	orrs	r3, r2
 800883a:	46a2      	mov	sl, r4
 800883c:	9304      	str	r3, [sp, #16]
 800883e:	e7d2      	b.n	80087e6 <_vfiprintf_r+0xe2>
 8008840:	9b03      	ldr	r3, [sp, #12]
 8008842:	1d19      	adds	r1, r3, #4
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	9103      	str	r1, [sp, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	bfbb      	ittet	lt
 800884c:	425b      	neglt	r3, r3
 800884e:	f042 0202 	orrlt.w	r2, r2, #2
 8008852:	9307      	strge	r3, [sp, #28]
 8008854:	9307      	strlt	r3, [sp, #28]
 8008856:	bfb8      	it	lt
 8008858:	9204      	strlt	r2, [sp, #16]
 800885a:	7823      	ldrb	r3, [r4, #0]
 800885c:	2b2e      	cmp	r3, #46	; 0x2e
 800885e:	d10c      	bne.n	800887a <_vfiprintf_r+0x176>
 8008860:	7863      	ldrb	r3, [r4, #1]
 8008862:	2b2a      	cmp	r3, #42	; 0x2a
 8008864:	d135      	bne.n	80088d2 <_vfiprintf_r+0x1ce>
 8008866:	9b03      	ldr	r3, [sp, #12]
 8008868:	3402      	adds	r4, #2
 800886a:	1d1a      	adds	r2, r3, #4
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	9203      	str	r2, [sp, #12]
 8008870:	2b00      	cmp	r3, #0
 8008872:	bfb8      	it	lt
 8008874:	f04f 33ff 	movlt.w	r3, #4294967295
 8008878:	9305      	str	r3, [sp, #20]
 800887a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008954 <_vfiprintf_r+0x250>
 800887e:	2203      	movs	r2, #3
 8008880:	4650      	mov	r0, sl
 8008882:	7821      	ldrb	r1, [r4, #0]
 8008884:	f7ff fa2a 	bl	8007cdc <memchr>
 8008888:	b140      	cbz	r0, 800889c <_vfiprintf_r+0x198>
 800888a:	2340      	movs	r3, #64	; 0x40
 800888c:	eba0 000a 	sub.w	r0, r0, sl
 8008890:	fa03 f000 	lsl.w	r0, r3, r0
 8008894:	9b04      	ldr	r3, [sp, #16]
 8008896:	3401      	adds	r4, #1
 8008898:	4303      	orrs	r3, r0
 800889a:	9304      	str	r3, [sp, #16]
 800889c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a0:	2206      	movs	r2, #6
 80088a2:	482d      	ldr	r0, [pc, #180]	; (8008958 <_vfiprintf_r+0x254>)
 80088a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088a8:	f7ff fa18 	bl	8007cdc <memchr>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	d03f      	beq.n	8008930 <_vfiprintf_r+0x22c>
 80088b0:	4b2a      	ldr	r3, [pc, #168]	; (800895c <_vfiprintf_r+0x258>)
 80088b2:	bb1b      	cbnz	r3, 80088fc <_vfiprintf_r+0x1f8>
 80088b4:	9b03      	ldr	r3, [sp, #12]
 80088b6:	3307      	adds	r3, #7
 80088b8:	f023 0307 	bic.w	r3, r3, #7
 80088bc:	3308      	adds	r3, #8
 80088be:	9303      	str	r3, [sp, #12]
 80088c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c2:	443b      	add	r3, r7
 80088c4:	9309      	str	r3, [sp, #36]	; 0x24
 80088c6:	e767      	b.n	8008798 <_vfiprintf_r+0x94>
 80088c8:	460c      	mov	r4, r1
 80088ca:	2001      	movs	r0, #1
 80088cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80088d0:	e7a5      	b.n	800881e <_vfiprintf_r+0x11a>
 80088d2:	2300      	movs	r3, #0
 80088d4:	f04f 0c0a 	mov.w	ip, #10
 80088d8:	4619      	mov	r1, r3
 80088da:	3401      	adds	r4, #1
 80088dc:	9305      	str	r3, [sp, #20]
 80088de:	4620      	mov	r0, r4
 80088e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088e4:	3a30      	subs	r2, #48	; 0x30
 80088e6:	2a09      	cmp	r2, #9
 80088e8:	d903      	bls.n	80088f2 <_vfiprintf_r+0x1ee>
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d0c5      	beq.n	800887a <_vfiprintf_r+0x176>
 80088ee:	9105      	str	r1, [sp, #20]
 80088f0:	e7c3      	b.n	800887a <_vfiprintf_r+0x176>
 80088f2:	4604      	mov	r4, r0
 80088f4:	2301      	movs	r3, #1
 80088f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80088fa:	e7f0      	b.n	80088de <_vfiprintf_r+0x1da>
 80088fc:	ab03      	add	r3, sp, #12
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	462a      	mov	r2, r5
 8008902:	4630      	mov	r0, r6
 8008904:	4b16      	ldr	r3, [pc, #88]	; (8008960 <_vfiprintf_r+0x25c>)
 8008906:	a904      	add	r1, sp, #16
 8008908:	f7fd ffa0 	bl	800684c <_printf_float>
 800890c:	4607      	mov	r7, r0
 800890e:	1c78      	adds	r0, r7, #1
 8008910:	d1d6      	bne.n	80088c0 <_vfiprintf_r+0x1bc>
 8008912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008914:	07d9      	lsls	r1, r3, #31
 8008916:	d405      	bmi.n	8008924 <_vfiprintf_r+0x220>
 8008918:	89ab      	ldrh	r3, [r5, #12]
 800891a:	059a      	lsls	r2, r3, #22
 800891c:	d402      	bmi.n	8008924 <_vfiprintf_r+0x220>
 800891e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008920:	f000 faab 	bl	8008e7a <__retarget_lock_release_recursive>
 8008924:	89ab      	ldrh	r3, [r5, #12]
 8008926:	065b      	lsls	r3, r3, #25
 8008928:	f53f af12 	bmi.w	8008750 <_vfiprintf_r+0x4c>
 800892c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800892e:	e711      	b.n	8008754 <_vfiprintf_r+0x50>
 8008930:	ab03      	add	r3, sp, #12
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	462a      	mov	r2, r5
 8008936:	4630      	mov	r0, r6
 8008938:	4b09      	ldr	r3, [pc, #36]	; (8008960 <_vfiprintf_r+0x25c>)
 800893a:	a904      	add	r1, sp, #16
 800893c:	f7fe fa22 	bl	8006d84 <_printf_i>
 8008940:	e7e4      	b.n	800890c <_vfiprintf_r+0x208>
 8008942:	bf00      	nop
 8008944:	0800b65c 	.word	0x0800b65c
 8008948:	0800b67c 	.word	0x0800b67c
 800894c:	0800b63c 	.word	0x0800b63c
 8008950:	0800b52a 	.word	0x0800b52a
 8008954:	0800b530 	.word	0x0800b530
 8008958:	0800b534 	.word	0x0800b534
 800895c:	0800684d 	.word	0x0800684d
 8008960:	080086df 	.word	0x080086df

08008964 <__swbuf_r>:
 8008964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008966:	460e      	mov	r6, r1
 8008968:	4614      	mov	r4, r2
 800896a:	4605      	mov	r5, r0
 800896c:	b118      	cbz	r0, 8008976 <__swbuf_r+0x12>
 800896e:	6983      	ldr	r3, [r0, #24]
 8008970:	b90b      	cbnz	r3, 8008976 <__swbuf_r+0x12>
 8008972:	f000 f9e3 	bl	8008d3c <__sinit>
 8008976:	4b21      	ldr	r3, [pc, #132]	; (80089fc <__swbuf_r+0x98>)
 8008978:	429c      	cmp	r4, r3
 800897a:	d12b      	bne.n	80089d4 <__swbuf_r+0x70>
 800897c:	686c      	ldr	r4, [r5, #4]
 800897e:	69a3      	ldr	r3, [r4, #24]
 8008980:	60a3      	str	r3, [r4, #8]
 8008982:	89a3      	ldrh	r3, [r4, #12]
 8008984:	071a      	lsls	r2, r3, #28
 8008986:	d52f      	bpl.n	80089e8 <__swbuf_r+0x84>
 8008988:	6923      	ldr	r3, [r4, #16]
 800898a:	b36b      	cbz	r3, 80089e8 <__swbuf_r+0x84>
 800898c:	6923      	ldr	r3, [r4, #16]
 800898e:	6820      	ldr	r0, [r4, #0]
 8008990:	b2f6      	uxtb	r6, r6
 8008992:	1ac0      	subs	r0, r0, r3
 8008994:	6963      	ldr	r3, [r4, #20]
 8008996:	4637      	mov	r7, r6
 8008998:	4283      	cmp	r3, r0
 800899a:	dc04      	bgt.n	80089a6 <__swbuf_r+0x42>
 800899c:	4621      	mov	r1, r4
 800899e:	4628      	mov	r0, r5
 80089a0:	f000 f938 	bl	8008c14 <_fflush_r>
 80089a4:	bb30      	cbnz	r0, 80089f4 <__swbuf_r+0x90>
 80089a6:	68a3      	ldr	r3, [r4, #8]
 80089a8:	3001      	adds	r0, #1
 80089aa:	3b01      	subs	r3, #1
 80089ac:	60a3      	str	r3, [r4, #8]
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	1c5a      	adds	r2, r3, #1
 80089b2:	6022      	str	r2, [r4, #0]
 80089b4:	701e      	strb	r6, [r3, #0]
 80089b6:	6963      	ldr	r3, [r4, #20]
 80089b8:	4283      	cmp	r3, r0
 80089ba:	d004      	beq.n	80089c6 <__swbuf_r+0x62>
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	07db      	lsls	r3, r3, #31
 80089c0:	d506      	bpl.n	80089d0 <__swbuf_r+0x6c>
 80089c2:	2e0a      	cmp	r6, #10
 80089c4:	d104      	bne.n	80089d0 <__swbuf_r+0x6c>
 80089c6:	4621      	mov	r1, r4
 80089c8:	4628      	mov	r0, r5
 80089ca:	f000 f923 	bl	8008c14 <_fflush_r>
 80089ce:	b988      	cbnz	r0, 80089f4 <__swbuf_r+0x90>
 80089d0:	4638      	mov	r0, r7
 80089d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089d4:	4b0a      	ldr	r3, [pc, #40]	; (8008a00 <__swbuf_r+0x9c>)
 80089d6:	429c      	cmp	r4, r3
 80089d8:	d101      	bne.n	80089de <__swbuf_r+0x7a>
 80089da:	68ac      	ldr	r4, [r5, #8]
 80089dc:	e7cf      	b.n	800897e <__swbuf_r+0x1a>
 80089de:	4b09      	ldr	r3, [pc, #36]	; (8008a04 <__swbuf_r+0xa0>)
 80089e0:	429c      	cmp	r4, r3
 80089e2:	bf08      	it	eq
 80089e4:	68ec      	ldreq	r4, [r5, #12]
 80089e6:	e7ca      	b.n	800897e <__swbuf_r+0x1a>
 80089e8:	4621      	mov	r1, r4
 80089ea:	4628      	mov	r0, r5
 80089ec:	f000 f81a 	bl	8008a24 <__swsetup_r>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d0cb      	beq.n	800898c <__swbuf_r+0x28>
 80089f4:	f04f 37ff 	mov.w	r7, #4294967295
 80089f8:	e7ea      	b.n	80089d0 <__swbuf_r+0x6c>
 80089fa:	bf00      	nop
 80089fc:	0800b65c 	.word	0x0800b65c
 8008a00:	0800b67c 	.word	0x0800b67c
 8008a04:	0800b63c 	.word	0x0800b63c

08008a08 <__ascii_wctomb>:
 8008a08:	4603      	mov	r3, r0
 8008a0a:	4608      	mov	r0, r1
 8008a0c:	b141      	cbz	r1, 8008a20 <__ascii_wctomb+0x18>
 8008a0e:	2aff      	cmp	r2, #255	; 0xff
 8008a10:	d904      	bls.n	8008a1c <__ascii_wctomb+0x14>
 8008a12:	228a      	movs	r2, #138	; 0x8a
 8008a14:	f04f 30ff 	mov.w	r0, #4294967295
 8008a18:	601a      	str	r2, [r3, #0]
 8008a1a:	4770      	bx	lr
 8008a1c:	2001      	movs	r0, #1
 8008a1e:	700a      	strb	r2, [r1, #0]
 8008a20:	4770      	bx	lr
	...

08008a24 <__swsetup_r>:
 8008a24:	4b32      	ldr	r3, [pc, #200]	; (8008af0 <__swsetup_r+0xcc>)
 8008a26:	b570      	push	{r4, r5, r6, lr}
 8008a28:	681d      	ldr	r5, [r3, #0]
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	460c      	mov	r4, r1
 8008a2e:	b125      	cbz	r5, 8008a3a <__swsetup_r+0x16>
 8008a30:	69ab      	ldr	r3, [r5, #24]
 8008a32:	b913      	cbnz	r3, 8008a3a <__swsetup_r+0x16>
 8008a34:	4628      	mov	r0, r5
 8008a36:	f000 f981 	bl	8008d3c <__sinit>
 8008a3a:	4b2e      	ldr	r3, [pc, #184]	; (8008af4 <__swsetup_r+0xd0>)
 8008a3c:	429c      	cmp	r4, r3
 8008a3e:	d10f      	bne.n	8008a60 <__swsetup_r+0x3c>
 8008a40:	686c      	ldr	r4, [r5, #4]
 8008a42:	89a3      	ldrh	r3, [r4, #12]
 8008a44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a48:	0719      	lsls	r1, r3, #28
 8008a4a:	d42c      	bmi.n	8008aa6 <__swsetup_r+0x82>
 8008a4c:	06dd      	lsls	r5, r3, #27
 8008a4e:	d411      	bmi.n	8008a74 <__swsetup_r+0x50>
 8008a50:	2309      	movs	r3, #9
 8008a52:	6033      	str	r3, [r6, #0]
 8008a54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a58:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5c:	81a3      	strh	r3, [r4, #12]
 8008a5e:	e03e      	b.n	8008ade <__swsetup_r+0xba>
 8008a60:	4b25      	ldr	r3, [pc, #148]	; (8008af8 <__swsetup_r+0xd4>)
 8008a62:	429c      	cmp	r4, r3
 8008a64:	d101      	bne.n	8008a6a <__swsetup_r+0x46>
 8008a66:	68ac      	ldr	r4, [r5, #8]
 8008a68:	e7eb      	b.n	8008a42 <__swsetup_r+0x1e>
 8008a6a:	4b24      	ldr	r3, [pc, #144]	; (8008afc <__swsetup_r+0xd8>)
 8008a6c:	429c      	cmp	r4, r3
 8008a6e:	bf08      	it	eq
 8008a70:	68ec      	ldreq	r4, [r5, #12]
 8008a72:	e7e6      	b.n	8008a42 <__swsetup_r+0x1e>
 8008a74:	0758      	lsls	r0, r3, #29
 8008a76:	d512      	bpl.n	8008a9e <__swsetup_r+0x7a>
 8008a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a7a:	b141      	cbz	r1, 8008a8e <__swsetup_r+0x6a>
 8008a7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a80:	4299      	cmp	r1, r3
 8008a82:	d002      	beq.n	8008a8a <__swsetup_r+0x66>
 8008a84:	4630      	mov	r0, r6
 8008a86:	f7ff fcdb 	bl	8008440 <_free_r>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	6363      	str	r3, [r4, #52]	; 0x34
 8008a8e:	89a3      	ldrh	r3, [r4, #12]
 8008a90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a94:	81a3      	strh	r3, [r4, #12]
 8008a96:	2300      	movs	r3, #0
 8008a98:	6063      	str	r3, [r4, #4]
 8008a9a:	6923      	ldr	r3, [r4, #16]
 8008a9c:	6023      	str	r3, [r4, #0]
 8008a9e:	89a3      	ldrh	r3, [r4, #12]
 8008aa0:	f043 0308 	orr.w	r3, r3, #8
 8008aa4:	81a3      	strh	r3, [r4, #12]
 8008aa6:	6923      	ldr	r3, [r4, #16]
 8008aa8:	b94b      	cbnz	r3, 8008abe <__swsetup_r+0x9a>
 8008aaa:	89a3      	ldrh	r3, [r4, #12]
 8008aac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ab4:	d003      	beq.n	8008abe <__swsetup_r+0x9a>
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f000 fa05 	bl	8008ec8 <__smakebuf_r>
 8008abe:	89a0      	ldrh	r0, [r4, #12]
 8008ac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ac4:	f010 0301 	ands.w	r3, r0, #1
 8008ac8:	d00a      	beq.n	8008ae0 <__swsetup_r+0xbc>
 8008aca:	2300      	movs	r3, #0
 8008acc:	60a3      	str	r3, [r4, #8]
 8008ace:	6963      	ldr	r3, [r4, #20]
 8008ad0:	425b      	negs	r3, r3
 8008ad2:	61a3      	str	r3, [r4, #24]
 8008ad4:	6923      	ldr	r3, [r4, #16]
 8008ad6:	b943      	cbnz	r3, 8008aea <__swsetup_r+0xc6>
 8008ad8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008adc:	d1ba      	bne.n	8008a54 <__swsetup_r+0x30>
 8008ade:	bd70      	pop	{r4, r5, r6, pc}
 8008ae0:	0781      	lsls	r1, r0, #30
 8008ae2:	bf58      	it	pl
 8008ae4:	6963      	ldrpl	r3, [r4, #20]
 8008ae6:	60a3      	str	r3, [r4, #8]
 8008ae8:	e7f4      	b.n	8008ad4 <__swsetup_r+0xb0>
 8008aea:	2000      	movs	r0, #0
 8008aec:	e7f7      	b.n	8008ade <__swsetup_r+0xba>
 8008aee:	bf00      	nop
 8008af0:	20000048 	.word	0x20000048
 8008af4:	0800b65c 	.word	0x0800b65c
 8008af8:	0800b67c 	.word	0x0800b67c
 8008afc:	0800b63c 	.word	0x0800b63c

08008b00 <abort>:
 8008b00:	2006      	movs	r0, #6
 8008b02:	b508      	push	{r3, lr}
 8008b04:	f000 fa48 	bl	8008f98 <raise>
 8008b08:	2001      	movs	r0, #1
 8008b0a:	f7fa fb62 	bl	80031d2 <_exit>
	...

08008b10 <__sflush_r>:
 8008b10:	898a      	ldrh	r2, [r1, #12]
 8008b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b14:	4605      	mov	r5, r0
 8008b16:	0710      	lsls	r0, r2, #28
 8008b18:	460c      	mov	r4, r1
 8008b1a:	d457      	bmi.n	8008bcc <__sflush_r+0xbc>
 8008b1c:	684b      	ldr	r3, [r1, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	dc04      	bgt.n	8008b2c <__sflush_r+0x1c>
 8008b22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	dc01      	bgt.n	8008b2c <__sflush_r+0x1c>
 8008b28:	2000      	movs	r0, #0
 8008b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b2e:	2e00      	cmp	r6, #0
 8008b30:	d0fa      	beq.n	8008b28 <__sflush_r+0x18>
 8008b32:	2300      	movs	r3, #0
 8008b34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b38:	682f      	ldr	r7, [r5, #0]
 8008b3a:	602b      	str	r3, [r5, #0]
 8008b3c:	d032      	beq.n	8008ba4 <__sflush_r+0x94>
 8008b3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b40:	89a3      	ldrh	r3, [r4, #12]
 8008b42:	075a      	lsls	r2, r3, #29
 8008b44:	d505      	bpl.n	8008b52 <__sflush_r+0x42>
 8008b46:	6863      	ldr	r3, [r4, #4]
 8008b48:	1ac0      	subs	r0, r0, r3
 8008b4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b4c:	b10b      	cbz	r3, 8008b52 <__sflush_r+0x42>
 8008b4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b50:	1ac0      	subs	r0, r0, r3
 8008b52:	2300      	movs	r3, #0
 8008b54:	4602      	mov	r2, r0
 8008b56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b58:	4628      	mov	r0, r5
 8008b5a:	6a21      	ldr	r1, [r4, #32]
 8008b5c:	47b0      	blx	r6
 8008b5e:	1c43      	adds	r3, r0, #1
 8008b60:	89a3      	ldrh	r3, [r4, #12]
 8008b62:	d106      	bne.n	8008b72 <__sflush_r+0x62>
 8008b64:	6829      	ldr	r1, [r5, #0]
 8008b66:	291d      	cmp	r1, #29
 8008b68:	d82c      	bhi.n	8008bc4 <__sflush_r+0xb4>
 8008b6a:	4a29      	ldr	r2, [pc, #164]	; (8008c10 <__sflush_r+0x100>)
 8008b6c:	40ca      	lsrs	r2, r1
 8008b6e:	07d6      	lsls	r6, r2, #31
 8008b70:	d528      	bpl.n	8008bc4 <__sflush_r+0xb4>
 8008b72:	2200      	movs	r2, #0
 8008b74:	6062      	str	r2, [r4, #4]
 8008b76:	6922      	ldr	r2, [r4, #16]
 8008b78:	04d9      	lsls	r1, r3, #19
 8008b7a:	6022      	str	r2, [r4, #0]
 8008b7c:	d504      	bpl.n	8008b88 <__sflush_r+0x78>
 8008b7e:	1c42      	adds	r2, r0, #1
 8008b80:	d101      	bne.n	8008b86 <__sflush_r+0x76>
 8008b82:	682b      	ldr	r3, [r5, #0]
 8008b84:	b903      	cbnz	r3, 8008b88 <__sflush_r+0x78>
 8008b86:	6560      	str	r0, [r4, #84]	; 0x54
 8008b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b8a:	602f      	str	r7, [r5, #0]
 8008b8c:	2900      	cmp	r1, #0
 8008b8e:	d0cb      	beq.n	8008b28 <__sflush_r+0x18>
 8008b90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b94:	4299      	cmp	r1, r3
 8008b96:	d002      	beq.n	8008b9e <__sflush_r+0x8e>
 8008b98:	4628      	mov	r0, r5
 8008b9a:	f7ff fc51 	bl	8008440 <_free_r>
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	6360      	str	r0, [r4, #52]	; 0x34
 8008ba2:	e7c2      	b.n	8008b2a <__sflush_r+0x1a>
 8008ba4:	6a21      	ldr	r1, [r4, #32]
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	4628      	mov	r0, r5
 8008baa:	47b0      	blx	r6
 8008bac:	1c41      	adds	r1, r0, #1
 8008bae:	d1c7      	bne.n	8008b40 <__sflush_r+0x30>
 8008bb0:	682b      	ldr	r3, [r5, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d0c4      	beq.n	8008b40 <__sflush_r+0x30>
 8008bb6:	2b1d      	cmp	r3, #29
 8008bb8:	d001      	beq.n	8008bbe <__sflush_r+0xae>
 8008bba:	2b16      	cmp	r3, #22
 8008bbc:	d101      	bne.n	8008bc2 <__sflush_r+0xb2>
 8008bbe:	602f      	str	r7, [r5, #0]
 8008bc0:	e7b2      	b.n	8008b28 <__sflush_r+0x18>
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bc8:	81a3      	strh	r3, [r4, #12]
 8008bca:	e7ae      	b.n	8008b2a <__sflush_r+0x1a>
 8008bcc:	690f      	ldr	r7, [r1, #16]
 8008bce:	2f00      	cmp	r7, #0
 8008bd0:	d0aa      	beq.n	8008b28 <__sflush_r+0x18>
 8008bd2:	0793      	lsls	r3, r2, #30
 8008bd4:	bf18      	it	ne
 8008bd6:	2300      	movne	r3, #0
 8008bd8:	680e      	ldr	r6, [r1, #0]
 8008bda:	bf08      	it	eq
 8008bdc:	694b      	ldreq	r3, [r1, #20]
 8008bde:	1bf6      	subs	r6, r6, r7
 8008be0:	600f      	str	r7, [r1, #0]
 8008be2:	608b      	str	r3, [r1, #8]
 8008be4:	2e00      	cmp	r6, #0
 8008be6:	dd9f      	ble.n	8008b28 <__sflush_r+0x18>
 8008be8:	4633      	mov	r3, r6
 8008bea:	463a      	mov	r2, r7
 8008bec:	4628      	mov	r0, r5
 8008bee:	6a21      	ldr	r1, [r4, #32]
 8008bf0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008bf4:	47e0      	blx	ip
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	dc06      	bgt.n	8008c08 <__sflush_r+0xf8>
 8008bfa:	89a3      	ldrh	r3, [r4, #12]
 8008bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c04:	81a3      	strh	r3, [r4, #12]
 8008c06:	e790      	b.n	8008b2a <__sflush_r+0x1a>
 8008c08:	4407      	add	r7, r0
 8008c0a:	1a36      	subs	r6, r6, r0
 8008c0c:	e7ea      	b.n	8008be4 <__sflush_r+0xd4>
 8008c0e:	bf00      	nop
 8008c10:	20400001 	.word	0x20400001

08008c14 <_fflush_r>:
 8008c14:	b538      	push	{r3, r4, r5, lr}
 8008c16:	690b      	ldr	r3, [r1, #16]
 8008c18:	4605      	mov	r5, r0
 8008c1a:	460c      	mov	r4, r1
 8008c1c:	b913      	cbnz	r3, 8008c24 <_fflush_r+0x10>
 8008c1e:	2500      	movs	r5, #0
 8008c20:	4628      	mov	r0, r5
 8008c22:	bd38      	pop	{r3, r4, r5, pc}
 8008c24:	b118      	cbz	r0, 8008c2e <_fflush_r+0x1a>
 8008c26:	6983      	ldr	r3, [r0, #24]
 8008c28:	b90b      	cbnz	r3, 8008c2e <_fflush_r+0x1a>
 8008c2a:	f000 f887 	bl	8008d3c <__sinit>
 8008c2e:	4b14      	ldr	r3, [pc, #80]	; (8008c80 <_fflush_r+0x6c>)
 8008c30:	429c      	cmp	r4, r3
 8008c32:	d11b      	bne.n	8008c6c <_fflush_r+0x58>
 8008c34:	686c      	ldr	r4, [r5, #4]
 8008c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d0ef      	beq.n	8008c1e <_fflush_r+0xa>
 8008c3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c40:	07d0      	lsls	r0, r2, #31
 8008c42:	d404      	bmi.n	8008c4e <_fflush_r+0x3a>
 8008c44:	0599      	lsls	r1, r3, #22
 8008c46:	d402      	bmi.n	8008c4e <_fflush_r+0x3a>
 8008c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c4a:	f000 f915 	bl	8008e78 <__retarget_lock_acquire_recursive>
 8008c4e:	4628      	mov	r0, r5
 8008c50:	4621      	mov	r1, r4
 8008c52:	f7ff ff5d 	bl	8008b10 <__sflush_r>
 8008c56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c58:	4605      	mov	r5, r0
 8008c5a:	07da      	lsls	r2, r3, #31
 8008c5c:	d4e0      	bmi.n	8008c20 <_fflush_r+0xc>
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	059b      	lsls	r3, r3, #22
 8008c62:	d4dd      	bmi.n	8008c20 <_fflush_r+0xc>
 8008c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c66:	f000 f908 	bl	8008e7a <__retarget_lock_release_recursive>
 8008c6a:	e7d9      	b.n	8008c20 <_fflush_r+0xc>
 8008c6c:	4b05      	ldr	r3, [pc, #20]	; (8008c84 <_fflush_r+0x70>)
 8008c6e:	429c      	cmp	r4, r3
 8008c70:	d101      	bne.n	8008c76 <_fflush_r+0x62>
 8008c72:	68ac      	ldr	r4, [r5, #8]
 8008c74:	e7df      	b.n	8008c36 <_fflush_r+0x22>
 8008c76:	4b04      	ldr	r3, [pc, #16]	; (8008c88 <_fflush_r+0x74>)
 8008c78:	429c      	cmp	r4, r3
 8008c7a:	bf08      	it	eq
 8008c7c:	68ec      	ldreq	r4, [r5, #12]
 8008c7e:	e7da      	b.n	8008c36 <_fflush_r+0x22>
 8008c80:	0800b65c 	.word	0x0800b65c
 8008c84:	0800b67c 	.word	0x0800b67c
 8008c88:	0800b63c 	.word	0x0800b63c

08008c8c <std>:
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	b510      	push	{r4, lr}
 8008c90:	4604      	mov	r4, r0
 8008c92:	e9c0 3300 	strd	r3, r3, [r0]
 8008c96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c9a:	6083      	str	r3, [r0, #8]
 8008c9c:	8181      	strh	r1, [r0, #12]
 8008c9e:	6643      	str	r3, [r0, #100]	; 0x64
 8008ca0:	81c2      	strh	r2, [r0, #14]
 8008ca2:	6183      	str	r3, [r0, #24]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	2208      	movs	r2, #8
 8008ca8:	305c      	adds	r0, #92	; 0x5c
 8008caa:	f7fd fd29 	bl	8006700 <memset>
 8008cae:	4b05      	ldr	r3, [pc, #20]	; (8008cc4 <std+0x38>)
 8008cb0:	6224      	str	r4, [r4, #32]
 8008cb2:	6263      	str	r3, [r4, #36]	; 0x24
 8008cb4:	4b04      	ldr	r3, [pc, #16]	; (8008cc8 <std+0x3c>)
 8008cb6:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cb8:	4b04      	ldr	r3, [pc, #16]	; (8008ccc <std+0x40>)
 8008cba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cbc:	4b04      	ldr	r3, [pc, #16]	; (8008cd0 <std+0x44>)
 8008cbe:	6323      	str	r3, [r4, #48]	; 0x30
 8008cc0:	bd10      	pop	{r4, pc}
 8008cc2:	bf00      	nop
 8008cc4:	08008fd1 	.word	0x08008fd1
 8008cc8:	08008ff3 	.word	0x08008ff3
 8008ccc:	0800902b 	.word	0x0800902b
 8008cd0:	0800904f 	.word	0x0800904f

08008cd4 <_cleanup_r>:
 8008cd4:	4901      	ldr	r1, [pc, #4]	; (8008cdc <_cleanup_r+0x8>)
 8008cd6:	f000 b8af 	b.w	8008e38 <_fwalk_reent>
 8008cda:	bf00      	nop
 8008cdc:	08008c15 	.word	0x08008c15

08008ce0 <__sfmoreglue>:
 8008ce0:	2268      	movs	r2, #104	; 0x68
 8008ce2:	b570      	push	{r4, r5, r6, lr}
 8008ce4:	1e4d      	subs	r5, r1, #1
 8008ce6:	4355      	muls	r5, r2
 8008ce8:	460e      	mov	r6, r1
 8008cea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008cee:	f7ff fc0f 	bl	8008510 <_malloc_r>
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	b140      	cbz	r0, 8008d08 <__sfmoreglue+0x28>
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	e9c0 1600 	strd	r1, r6, [r0]
 8008cfc:	300c      	adds	r0, #12
 8008cfe:	60a0      	str	r0, [r4, #8]
 8008d00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d04:	f7fd fcfc 	bl	8006700 <memset>
 8008d08:	4620      	mov	r0, r4
 8008d0a:	bd70      	pop	{r4, r5, r6, pc}

08008d0c <__sfp_lock_acquire>:
 8008d0c:	4801      	ldr	r0, [pc, #4]	; (8008d14 <__sfp_lock_acquire+0x8>)
 8008d0e:	f000 b8b3 	b.w	8008e78 <__retarget_lock_acquire_recursive>
 8008d12:	bf00      	nop
 8008d14:	20000461 	.word	0x20000461

08008d18 <__sfp_lock_release>:
 8008d18:	4801      	ldr	r0, [pc, #4]	; (8008d20 <__sfp_lock_release+0x8>)
 8008d1a:	f000 b8ae 	b.w	8008e7a <__retarget_lock_release_recursive>
 8008d1e:	bf00      	nop
 8008d20:	20000461 	.word	0x20000461

08008d24 <__sinit_lock_acquire>:
 8008d24:	4801      	ldr	r0, [pc, #4]	; (8008d2c <__sinit_lock_acquire+0x8>)
 8008d26:	f000 b8a7 	b.w	8008e78 <__retarget_lock_acquire_recursive>
 8008d2a:	bf00      	nop
 8008d2c:	20000462 	.word	0x20000462

08008d30 <__sinit_lock_release>:
 8008d30:	4801      	ldr	r0, [pc, #4]	; (8008d38 <__sinit_lock_release+0x8>)
 8008d32:	f000 b8a2 	b.w	8008e7a <__retarget_lock_release_recursive>
 8008d36:	bf00      	nop
 8008d38:	20000462 	.word	0x20000462

08008d3c <__sinit>:
 8008d3c:	b510      	push	{r4, lr}
 8008d3e:	4604      	mov	r4, r0
 8008d40:	f7ff fff0 	bl	8008d24 <__sinit_lock_acquire>
 8008d44:	69a3      	ldr	r3, [r4, #24]
 8008d46:	b11b      	cbz	r3, 8008d50 <__sinit+0x14>
 8008d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d4c:	f7ff bff0 	b.w	8008d30 <__sinit_lock_release>
 8008d50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d54:	6523      	str	r3, [r4, #80]	; 0x50
 8008d56:	4b13      	ldr	r3, [pc, #76]	; (8008da4 <__sinit+0x68>)
 8008d58:	4a13      	ldr	r2, [pc, #76]	; (8008da8 <__sinit+0x6c>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d5e:	42a3      	cmp	r3, r4
 8008d60:	bf08      	it	eq
 8008d62:	2301      	moveq	r3, #1
 8008d64:	4620      	mov	r0, r4
 8008d66:	bf08      	it	eq
 8008d68:	61a3      	streq	r3, [r4, #24]
 8008d6a:	f000 f81f 	bl	8008dac <__sfp>
 8008d6e:	6060      	str	r0, [r4, #4]
 8008d70:	4620      	mov	r0, r4
 8008d72:	f000 f81b 	bl	8008dac <__sfp>
 8008d76:	60a0      	str	r0, [r4, #8]
 8008d78:	4620      	mov	r0, r4
 8008d7a:	f000 f817 	bl	8008dac <__sfp>
 8008d7e:	2200      	movs	r2, #0
 8008d80:	2104      	movs	r1, #4
 8008d82:	60e0      	str	r0, [r4, #12]
 8008d84:	6860      	ldr	r0, [r4, #4]
 8008d86:	f7ff ff81 	bl	8008c8c <std>
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	2109      	movs	r1, #9
 8008d8e:	68a0      	ldr	r0, [r4, #8]
 8008d90:	f7ff ff7c 	bl	8008c8c <std>
 8008d94:	2202      	movs	r2, #2
 8008d96:	2112      	movs	r1, #18
 8008d98:	68e0      	ldr	r0, [r4, #12]
 8008d9a:	f7ff ff77 	bl	8008c8c <std>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	61a3      	str	r3, [r4, #24]
 8008da2:	e7d1      	b.n	8008d48 <__sinit+0xc>
 8008da4:	0800b2c0 	.word	0x0800b2c0
 8008da8:	08008cd5 	.word	0x08008cd5

08008dac <__sfp>:
 8008dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dae:	4607      	mov	r7, r0
 8008db0:	f7ff ffac 	bl	8008d0c <__sfp_lock_acquire>
 8008db4:	4b1e      	ldr	r3, [pc, #120]	; (8008e30 <__sfp+0x84>)
 8008db6:	681e      	ldr	r6, [r3, #0]
 8008db8:	69b3      	ldr	r3, [r6, #24]
 8008dba:	b913      	cbnz	r3, 8008dc2 <__sfp+0x16>
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	f7ff ffbd 	bl	8008d3c <__sinit>
 8008dc2:	3648      	adds	r6, #72	; 0x48
 8008dc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	d503      	bpl.n	8008dd4 <__sfp+0x28>
 8008dcc:	6833      	ldr	r3, [r6, #0]
 8008dce:	b30b      	cbz	r3, 8008e14 <__sfp+0x68>
 8008dd0:	6836      	ldr	r6, [r6, #0]
 8008dd2:	e7f7      	b.n	8008dc4 <__sfp+0x18>
 8008dd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008dd8:	b9d5      	cbnz	r5, 8008e10 <__sfp+0x64>
 8008dda:	4b16      	ldr	r3, [pc, #88]	; (8008e34 <__sfp+0x88>)
 8008ddc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008de0:	60e3      	str	r3, [r4, #12]
 8008de2:	6665      	str	r5, [r4, #100]	; 0x64
 8008de4:	f000 f847 	bl	8008e76 <__retarget_lock_init_recursive>
 8008de8:	f7ff ff96 	bl	8008d18 <__sfp_lock_release>
 8008dec:	2208      	movs	r2, #8
 8008dee:	4629      	mov	r1, r5
 8008df0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008df4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008df8:	6025      	str	r5, [r4, #0]
 8008dfa:	61a5      	str	r5, [r4, #24]
 8008dfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e00:	f7fd fc7e 	bl	8006700 <memset>
 8008e04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e10:	3468      	adds	r4, #104	; 0x68
 8008e12:	e7d9      	b.n	8008dc8 <__sfp+0x1c>
 8008e14:	2104      	movs	r1, #4
 8008e16:	4638      	mov	r0, r7
 8008e18:	f7ff ff62 	bl	8008ce0 <__sfmoreglue>
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	6030      	str	r0, [r6, #0]
 8008e20:	2800      	cmp	r0, #0
 8008e22:	d1d5      	bne.n	8008dd0 <__sfp+0x24>
 8008e24:	f7ff ff78 	bl	8008d18 <__sfp_lock_release>
 8008e28:	230c      	movs	r3, #12
 8008e2a:	603b      	str	r3, [r7, #0]
 8008e2c:	e7ee      	b.n	8008e0c <__sfp+0x60>
 8008e2e:	bf00      	nop
 8008e30:	0800b2c0 	.word	0x0800b2c0
 8008e34:	ffff0001 	.word	0xffff0001

08008e38 <_fwalk_reent>:
 8008e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	4688      	mov	r8, r1
 8008e40:	2700      	movs	r7, #0
 8008e42:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e4a:	f1b9 0901 	subs.w	r9, r9, #1
 8008e4e:	d505      	bpl.n	8008e5c <_fwalk_reent+0x24>
 8008e50:	6824      	ldr	r4, [r4, #0]
 8008e52:	2c00      	cmp	r4, #0
 8008e54:	d1f7      	bne.n	8008e46 <_fwalk_reent+0xe>
 8008e56:	4638      	mov	r0, r7
 8008e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e5c:	89ab      	ldrh	r3, [r5, #12]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d907      	bls.n	8008e72 <_fwalk_reent+0x3a>
 8008e62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e66:	3301      	adds	r3, #1
 8008e68:	d003      	beq.n	8008e72 <_fwalk_reent+0x3a>
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	47c0      	blx	r8
 8008e70:	4307      	orrs	r7, r0
 8008e72:	3568      	adds	r5, #104	; 0x68
 8008e74:	e7e9      	b.n	8008e4a <_fwalk_reent+0x12>

08008e76 <__retarget_lock_init_recursive>:
 8008e76:	4770      	bx	lr

08008e78 <__retarget_lock_acquire_recursive>:
 8008e78:	4770      	bx	lr

08008e7a <__retarget_lock_release_recursive>:
 8008e7a:	4770      	bx	lr

08008e7c <__swhatbuf_r>:
 8008e7c:	b570      	push	{r4, r5, r6, lr}
 8008e7e:	460e      	mov	r6, r1
 8008e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e84:	4614      	mov	r4, r2
 8008e86:	2900      	cmp	r1, #0
 8008e88:	461d      	mov	r5, r3
 8008e8a:	b096      	sub	sp, #88	; 0x58
 8008e8c:	da08      	bge.n	8008ea0 <__swhatbuf_r+0x24>
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008e94:	602a      	str	r2, [r5, #0]
 8008e96:	061a      	lsls	r2, r3, #24
 8008e98:	d410      	bmi.n	8008ebc <__swhatbuf_r+0x40>
 8008e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e9e:	e00e      	b.n	8008ebe <__swhatbuf_r+0x42>
 8008ea0:	466a      	mov	r2, sp
 8008ea2:	f000 f8fb 	bl	800909c <_fstat_r>
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	dbf1      	blt.n	8008e8e <__swhatbuf_r+0x12>
 8008eaa:	9a01      	ldr	r2, [sp, #4]
 8008eac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008eb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008eb4:	425a      	negs	r2, r3
 8008eb6:	415a      	adcs	r2, r3
 8008eb8:	602a      	str	r2, [r5, #0]
 8008eba:	e7ee      	b.n	8008e9a <__swhatbuf_r+0x1e>
 8008ebc:	2340      	movs	r3, #64	; 0x40
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	b016      	add	sp, #88	; 0x58
 8008ec4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ec8 <__smakebuf_r>:
 8008ec8:	898b      	ldrh	r3, [r1, #12]
 8008eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ecc:	079d      	lsls	r5, r3, #30
 8008ece:	4606      	mov	r6, r0
 8008ed0:	460c      	mov	r4, r1
 8008ed2:	d507      	bpl.n	8008ee4 <__smakebuf_r+0x1c>
 8008ed4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ed8:	6023      	str	r3, [r4, #0]
 8008eda:	6123      	str	r3, [r4, #16]
 8008edc:	2301      	movs	r3, #1
 8008ede:	6163      	str	r3, [r4, #20]
 8008ee0:	b002      	add	sp, #8
 8008ee2:	bd70      	pop	{r4, r5, r6, pc}
 8008ee4:	466a      	mov	r2, sp
 8008ee6:	ab01      	add	r3, sp, #4
 8008ee8:	f7ff ffc8 	bl	8008e7c <__swhatbuf_r>
 8008eec:	9900      	ldr	r1, [sp, #0]
 8008eee:	4605      	mov	r5, r0
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	f7ff fb0d 	bl	8008510 <_malloc_r>
 8008ef6:	b948      	cbnz	r0, 8008f0c <__smakebuf_r+0x44>
 8008ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008efc:	059a      	lsls	r2, r3, #22
 8008efe:	d4ef      	bmi.n	8008ee0 <__smakebuf_r+0x18>
 8008f00:	f023 0303 	bic.w	r3, r3, #3
 8008f04:	f043 0302 	orr.w	r3, r3, #2
 8008f08:	81a3      	strh	r3, [r4, #12]
 8008f0a:	e7e3      	b.n	8008ed4 <__smakebuf_r+0xc>
 8008f0c:	4b0d      	ldr	r3, [pc, #52]	; (8008f44 <__smakebuf_r+0x7c>)
 8008f0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f10:	89a3      	ldrh	r3, [r4, #12]
 8008f12:	6020      	str	r0, [r4, #0]
 8008f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f18:	81a3      	strh	r3, [r4, #12]
 8008f1a:	9b00      	ldr	r3, [sp, #0]
 8008f1c:	6120      	str	r0, [r4, #16]
 8008f1e:	6163      	str	r3, [r4, #20]
 8008f20:	9b01      	ldr	r3, [sp, #4]
 8008f22:	b15b      	cbz	r3, 8008f3c <__smakebuf_r+0x74>
 8008f24:	4630      	mov	r0, r6
 8008f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f2a:	f000 f8c9 	bl	80090c0 <_isatty_r>
 8008f2e:	b128      	cbz	r0, 8008f3c <__smakebuf_r+0x74>
 8008f30:	89a3      	ldrh	r3, [r4, #12]
 8008f32:	f023 0303 	bic.w	r3, r3, #3
 8008f36:	f043 0301 	orr.w	r3, r3, #1
 8008f3a:	81a3      	strh	r3, [r4, #12]
 8008f3c:	89a0      	ldrh	r0, [r4, #12]
 8008f3e:	4305      	orrs	r5, r0
 8008f40:	81a5      	strh	r5, [r4, #12]
 8008f42:	e7cd      	b.n	8008ee0 <__smakebuf_r+0x18>
 8008f44:	08008cd5 	.word	0x08008cd5

08008f48 <_raise_r>:
 8008f48:	291f      	cmp	r1, #31
 8008f4a:	b538      	push	{r3, r4, r5, lr}
 8008f4c:	4604      	mov	r4, r0
 8008f4e:	460d      	mov	r5, r1
 8008f50:	d904      	bls.n	8008f5c <_raise_r+0x14>
 8008f52:	2316      	movs	r3, #22
 8008f54:	6003      	str	r3, [r0, #0]
 8008f56:	f04f 30ff 	mov.w	r0, #4294967295
 8008f5a:	bd38      	pop	{r3, r4, r5, pc}
 8008f5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f5e:	b112      	cbz	r2, 8008f66 <_raise_r+0x1e>
 8008f60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f64:	b94b      	cbnz	r3, 8008f7a <_raise_r+0x32>
 8008f66:	4620      	mov	r0, r4
 8008f68:	f000 f830 	bl	8008fcc <_getpid_r>
 8008f6c:	462a      	mov	r2, r5
 8008f6e:	4601      	mov	r1, r0
 8008f70:	4620      	mov	r0, r4
 8008f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f76:	f000 b817 	b.w	8008fa8 <_kill_r>
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d00a      	beq.n	8008f94 <_raise_r+0x4c>
 8008f7e:	1c59      	adds	r1, r3, #1
 8008f80:	d103      	bne.n	8008f8a <_raise_r+0x42>
 8008f82:	2316      	movs	r3, #22
 8008f84:	6003      	str	r3, [r0, #0]
 8008f86:	2001      	movs	r0, #1
 8008f88:	e7e7      	b.n	8008f5a <_raise_r+0x12>
 8008f8a:	2400      	movs	r4, #0
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f92:	4798      	blx	r3
 8008f94:	2000      	movs	r0, #0
 8008f96:	e7e0      	b.n	8008f5a <_raise_r+0x12>

08008f98 <raise>:
 8008f98:	4b02      	ldr	r3, [pc, #8]	; (8008fa4 <raise+0xc>)
 8008f9a:	4601      	mov	r1, r0
 8008f9c:	6818      	ldr	r0, [r3, #0]
 8008f9e:	f7ff bfd3 	b.w	8008f48 <_raise_r>
 8008fa2:	bf00      	nop
 8008fa4:	20000048 	.word	0x20000048

08008fa8 <_kill_r>:
 8008fa8:	b538      	push	{r3, r4, r5, lr}
 8008faa:	2300      	movs	r3, #0
 8008fac:	4d06      	ldr	r5, [pc, #24]	; (8008fc8 <_kill_r+0x20>)
 8008fae:	4604      	mov	r4, r0
 8008fb0:	4608      	mov	r0, r1
 8008fb2:	4611      	mov	r1, r2
 8008fb4:	602b      	str	r3, [r5, #0]
 8008fb6:	f7fa f8fc 	bl	80031b2 <_kill>
 8008fba:	1c43      	adds	r3, r0, #1
 8008fbc:	d102      	bne.n	8008fc4 <_kill_r+0x1c>
 8008fbe:	682b      	ldr	r3, [r5, #0]
 8008fc0:	b103      	cbz	r3, 8008fc4 <_kill_r+0x1c>
 8008fc2:	6023      	str	r3, [r4, #0]
 8008fc4:	bd38      	pop	{r3, r4, r5, pc}
 8008fc6:	bf00      	nop
 8008fc8:	2000045c 	.word	0x2000045c

08008fcc <_getpid_r>:
 8008fcc:	f7fa b8ea 	b.w	80031a4 <_getpid>

08008fd0 <__sread>:
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd8:	f000 f894 	bl	8009104 <_read_r>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	bfab      	itete	ge
 8008fe0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fe2:	89a3      	ldrhlt	r3, [r4, #12]
 8008fe4:	181b      	addge	r3, r3, r0
 8008fe6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fea:	bfac      	ite	ge
 8008fec:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fee:	81a3      	strhlt	r3, [r4, #12]
 8008ff0:	bd10      	pop	{r4, pc}

08008ff2 <__swrite>:
 8008ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff6:	461f      	mov	r7, r3
 8008ff8:	898b      	ldrh	r3, [r1, #12]
 8008ffa:	4605      	mov	r5, r0
 8008ffc:	05db      	lsls	r3, r3, #23
 8008ffe:	460c      	mov	r4, r1
 8009000:	4616      	mov	r6, r2
 8009002:	d505      	bpl.n	8009010 <__swrite+0x1e>
 8009004:	2302      	movs	r3, #2
 8009006:	2200      	movs	r2, #0
 8009008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800900c:	f000 f868 	bl	80090e0 <_lseek_r>
 8009010:	89a3      	ldrh	r3, [r4, #12]
 8009012:	4632      	mov	r2, r6
 8009014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009018:	81a3      	strh	r3, [r4, #12]
 800901a:	4628      	mov	r0, r5
 800901c:	463b      	mov	r3, r7
 800901e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009026:	f000 b817 	b.w	8009058 <_write_r>

0800902a <__sseek>:
 800902a:	b510      	push	{r4, lr}
 800902c:	460c      	mov	r4, r1
 800902e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009032:	f000 f855 	bl	80090e0 <_lseek_r>
 8009036:	1c43      	adds	r3, r0, #1
 8009038:	89a3      	ldrh	r3, [r4, #12]
 800903a:	bf15      	itete	ne
 800903c:	6560      	strne	r0, [r4, #84]	; 0x54
 800903e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009042:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009046:	81a3      	strheq	r3, [r4, #12]
 8009048:	bf18      	it	ne
 800904a:	81a3      	strhne	r3, [r4, #12]
 800904c:	bd10      	pop	{r4, pc}

0800904e <__sclose>:
 800904e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009052:	f000 b813 	b.w	800907c <_close_r>
	...

08009058 <_write_r>:
 8009058:	b538      	push	{r3, r4, r5, lr}
 800905a:	4604      	mov	r4, r0
 800905c:	4608      	mov	r0, r1
 800905e:	4611      	mov	r1, r2
 8009060:	2200      	movs	r2, #0
 8009062:	4d05      	ldr	r5, [pc, #20]	; (8009078 <_write_r+0x20>)
 8009064:	602a      	str	r2, [r5, #0]
 8009066:	461a      	mov	r2, r3
 8009068:	f7fa f8da 	bl	8003220 <_write>
 800906c:	1c43      	adds	r3, r0, #1
 800906e:	d102      	bne.n	8009076 <_write_r+0x1e>
 8009070:	682b      	ldr	r3, [r5, #0]
 8009072:	b103      	cbz	r3, 8009076 <_write_r+0x1e>
 8009074:	6023      	str	r3, [r4, #0]
 8009076:	bd38      	pop	{r3, r4, r5, pc}
 8009078:	2000045c 	.word	0x2000045c

0800907c <_close_r>:
 800907c:	b538      	push	{r3, r4, r5, lr}
 800907e:	2300      	movs	r3, #0
 8009080:	4d05      	ldr	r5, [pc, #20]	; (8009098 <_close_r+0x1c>)
 8009082:	4604      	mov	r4, r0
 8009084:	4608      	mov	r0, r1
 8009086:	602b      	str	r3, [r5, #0]
 8009088:	f7fa f8e6 	bl	8003258 <_close>
 800908c:	1c43      	adds	r3, r0, #1
 800908e:	d102      	bne.n	8009096 <_close_r+0x1a>
 8009090:	682b      	ldr	r3, [r5, #0]
 8009092:	b103      	cbz	r3, 8009096 <_close_r+0x1a>
 8009094:	6023      	str	r3, [r4, #0]
 8009096:	bd38      	pop	{r3, r4, r5, pc}
 8009098:	2000045c 	.word	0x2000045c

0800909c <_fstat_r>:
 800909c:	b538      	push	{r3, r4, r5, lr}
 800909e:	2300      	movs	r3, #0
 80090a0:	4d06      	ldr	r5, [pc, #24]	; (80090bc <_fstat_r+0x20>)
 80090a2:	4604      	mov	r4, r0
 80090a4:	4608      	mov	r0, r1
 80090a6:	4611      	mov	r1, r2
 80090a8:	602b      	str	r3, [r5, #0]
 80090aa:	f7fa f8e0 	bl	800326e <_fstat>
 80090ae:	1c43      	adds	r3, r0, #1
 80090b0:	d102      	bne.n	80090b8 <_fstat_r+0x1c>
 80090b2:	682b      	ldr	r3, [r5, #0]
 80090b4:	b103      	cbz	r3, 80090b8 <_fstat_r+0x1c>
 80090b6:	6023      	str	r3, [r4, #0]
 80090b8:	bd38      	pop	{r3, r4, r5, pc}
 80090ba:	bf00      	nop
 80090bc:	2000045c 	.word	0x2000045c

080090c0 <_isatty_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	2300      	movs	r3, #0
 80090c4:	4d05      	ldr	r5, [pc, #20]	; (80090dc <_isatty_r+0x1c>)
 80090c6:	4604      	mov	r4, r0
 80090c8:	4608      	mov	r0, r1
 80090ca:	602b      	str	r3, [r5, #0]
 80090cc:	f7fa f8de 	bl	800328c <_isatty>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	d102      	bne.n	80090da <_isatty_r+0x1a>
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	b103      	cbz	r3, 80090da <_isatty_r+0x1a>
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	2000045c 	.word	0x2000045c

080090e0 <_lseek_r>:
 80090e0:	b538      	push	{r3, r4, r5, lr}
 80090e2:	4604      	mov	r4, r0
 80090e4:	4608      	mov	r0, r1
 80090e6:	4611      	mov	r1, r2
 80090e8:	2200      	movs	r2, #0
 80090ea:	4d05      	ldr	r5, [pc, #20]	; (8009100 <_lseek_r+0x20>)
 80090ec:	602a      	str	r2, [r5, #0]
 80090ee:	461a      	mov	r2, r3
 80090f0:	f7fa f8d6 	bl	80032a0 <_lseek>
 80090f4:	1c43      	adds	r3, r0, #1
 80090f6:	d102      	bne.n	80090fe <_lseek_r+0x1e>
 80090f8:	682b      	ldr	r3, [r5, #0]
 80090fa:	b103      	cbz	r3, 80090fe <_lseek_r+0x1e>
 80090fc:	6023      	str	r3, [r4, #0]
 80090fe:	bd38      	pop	{r3, r4, r5, pc}
 8009100:	2000045c 	.word	0x2000045c

08009104 <_read_r>:
 8009104:	b538      	push	{r3, r4, r5, lr}
 8009106:	4604      	mov	r4, r0
 8009108:	4608      	mov	r0, r1
 800910a:	4611      	mov	r1, r2
 800910c:	2200      	movs	r2, #0
 800910e:	4d05      	ldr	r5, [pc, #20]	; (8009124 <_read_r+0x20>)
 8009110:	602a      	str	r2, [r5, #0]
 8009112:	461a      	mov	r2, r3
 8009114:	f7fa f867 	bl	80031e6 <_read>
 8009118:	1c43      	adds	r3, r0, #1
 800911a:	d102      	bne.n	8009122 <_read_r+0x1e>
 800911c:	682b      	ldr	r3, [r5, #0]
 800911e:	b103      	cbz	r3, 8009122 <_read_r+0x1e>
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	bd38      	pop	{r3, r4, r5, pc}
 8009124:	2000045c 	.word	0x2000045c

08009128 <sin>:
 8009128:	b530      	push	{r4, r5, lr}
 800912a:	4a20      	ldr	r2, [pc, #128]	; (80091ac <sin+0x84>)
 800912c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009130:	4293      	cmp	r3, r2
 8009132:	b087      	sub	sp, #28
 8009134:	dc06      	bgt.n	8009144 <sin+0x1c>
 8009136:	2300      	movs	r3, #0
 8009138:	2200      	movs	r2, #0
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	2300      	movs	r3, #0
 800913e:	f001 feab 	bl	800ae98 <__kernel_sin>
 8009142:	e006      	b.n	8009152 <sin+0x2a>
 8009144:	4a1a      	ldr	r2, [pc, #104]	; (80091b0 <sin+0x88>)
 8009146:	4293      	cmp	r3, r2
 8009148:	dd05      	ble.n	8009156 <sin+0x2e>
 800914a:	4602      	mov	r2, r0
 800914c:	460b      	mov	r3, r1
 800914e:	f7f7 f80b 	bl	8000168 <__aeabi_dsub>
 8009152:	b007      	add	sp, #28
 8009154:	bd30      	pop	{r4, r5, pc}
 8009156:	aa02      	add	r2, sp, #8
 8009158:	f000 fff6 	bl	800a148 <__ieee754_rem_pio2>
 800915c:	f000 0003 	and.w	r0, r0, #3
 8009160:	2801      	cmp	r0, #1
 8009162:	d009      	beq.n	8009178 <sin+0x50>
 8009164:	2802      	cmp	r0, #2
 8009166:	d00e      	beq.n	8009186 <sin+0x5e>
 8009168:	b9c0      	cbnz	r0, 800919c <sin+0x74>
 800916a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800916e:	2301      	movs	r3, #1
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009176:	e7e2      	b.n	800913e <sin+0x16>
 8009178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800917c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009180:	f001 fa8a 	bl	800a698 <__kernel_cos>
 8009184:	e7e5      	b.n	8009152 <sin+0x2a>
 8009186:	2301      	movs	r3, #1
 8009188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009192:	f001 fe81 	bl	800ae98 <__kernel_sin>
 8009196:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800919a:	e7da      	b.n	8009152 <sin+0x2a>
 800919c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091a4:	f001 fa78 	bl	800a698 <__kernel_cos>
 80091a8:	e7f5      	b.n	8009196 <sin+0x6e>
 80091aa:	bf00      	nop
 80091ac:	3fe921fb 	.word	0x3fe921fb
 80091b0:	7fefffff 	.word	0x7fefffff

080091b4 <asin>:
 80091b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b6:	4604      	mov	r4, r0
 80091b8:	460d      	mov	r5, r1
 80091ba:	f000 f8b1 	bl	8009320 <__ieee754_asin>
 80091be:	4622      	mov	r2, r4
 80091c0:	4606      	mov	r6, r0
 80091c2:	460f      	mov	r7, r1
 80091c4:	462b      	mov	r3, r5
 80091c6:	4620      	mov	r0, r4
 80091c8:	4629      	mov	r1, r5
 80091ca:	f7f7 fc1f 	bl	8000a0c <__aeabi_dcmpun>
 80091ce:	b988      	cbnz	r0, 80091f4 <asin+0x40>
 80091d0:	4620      	mov	r0, r4
 80091d2:	4629      	mov	r1, r5
 80091d4:	f001 ff42 	bl	800b05c <fabs>
 80091d8:	2200      	movs	r2, #0
 80091da:	4b08      	ldr	r3, [pc, #32]	; (80091fc <asin+0x48>)
 80091dc:	f7f7 fc0c 	bl	80009f8 <__aeabi_dcmpgt>
 80091e0:	b140      	cbz	r0, 80091f4 <asin+0x40>
 80091e2:	f7fd fa63 	bl	80066ac <__errno>
 80091e6:	2321      	movs	r3, #33	; 0x21
 80091e8:	6003      	str	r3, [r0, #0]
 80091ea:	4805      	ldr	r0, [pc, #20]	; (8009200 <asin+0x4c>)
 80091ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80091f0:	f001 bfbe 	b.w	800b170 <nan>
 80091f4:	4630      	mov	r0, r6
 80091f6:	4639      	mov	r1, r7
 80091f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091fa:	bf00      	nop
 80091fc:	3ff00000 	.word	0x3ff00000
 8009200:	0800b51f 	.word	0x0800b51f

08009204 <pow>:
 8009204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009208:	4614      	mov	r4, r2
 800920a:	461d      	mov	r5, r3
 800920c:	4680      	mov	r8, r0
 800920e:	4689      	mov	r9, r1
 8009210:	f000 fa82 	bl	8009718 <__ieee754_pow>
 8009214:	4622      	mov	r2, r4
 8009216:	4606      	mov	r6, r0
 8009218:	460f      	mov	r7, r1
 800921a:	462b      	mov	r3, r5
 800921c:	4620      	mov	r0, r4
 800921e:	4629      	mov	r1, r5
 8009220:	f7f7 fbf4 	bl	8000a0c <__aeabi_dcmpun>
 8009224:	bbc8      	cbnz	r0, 800929a <pow+0x96>
 8009226:	2200      	movs	r2, #0
 8009228:	2300      	movs	r3, #0
 800922a:	4640      	mov	r0, r8
 800922c:	4649      	mov	r1, r9
 800922e:	f7f7 fbbb 	bl	80009a8 <__aeabi_dcmpeq>
 8009232:	b1b8      	cbz	r0, 8009264 <pow+0x60>
 8009234:	2200      	movs	r2, #0
 8009236:	2300      	movs	r3, #0
 8009238:	4620      	mov	r0, r4
 800923a:	4629      	mov	r1, r5
 800923c:	f7f7 fbb4 	bl	80009a8 <__aeabi_dcmpeq>
 8009240:	2800      	cmp	r0, #0
 8009242:	d141      	bne.n	80092c8 <pow+0xc4>
 8009244:	4620      	mov	r0, r4
 8009246:	4629      	mov	r1, r5
 8009248:	f001 ff0b 	bl	800b062 <finite>
 800924c:	b328      	cbz	r0, 800929a <pow+0x96>
 800924e:	2200      	movs	r2, #0
 8009250:	2300      	movs	r3, #0
 8009252:	4620      	mov	r0, r4
 8009254:	4629      	mov	r1, r5
 8009256:	f7f7 fbb1 	bl	80009bc <__aeabi_dcmplt>
 800925a:	b1f0      	cbz	r0, 800929a <pow+0x96>
 800925c:	f7fd fa26 	bl	80066ac <__errno>
 8009260:	2322      	movs	r3, #34	; 0x22
 8009262:	e019      	b.n	8009298 <pow+0x94>
 8009264:	4630      	mov	r0, r6
 8009266:	4639      	mov	r1, r7
 8009268:	f001 fefb 	bl	800b062 <finite>
 800926c:	b9c8      	cbnz	r0, 80092a2 <pow+0x9e>
 800926e:	4640      	mov	r0, r8
 8009270:	4649      	mov	r1, r9
 8009272:	f001 fef6 	bl	800b062 <finite>
 8009276:	b1a0      	cbz	r0, 80092a2 <pow+0x9e>
 8009278:	4620      	mov	r0, r4
 800927a:	4629      	mov	r1, r5
 800927c:	f001 fef1 	bl	800b062 <finite>
 8009280:	b178      	cbz	r0, 80092a2 <pow+0x9e>
 8009282:	4632      	mov	r2, r6
 8009284:	463b      	mov	r3, r7
 8009286:	4630      	mov	r0, r6
 8009288:	4639      	mov	r1, r7
 800928a:	f7f7 fbbf 	bl	8000a0c <__aeabi_dcmpun>
 800928e:	2800      	cmp	r0, #0
 8009290:	d0e4      	beq.n	800925c <pow+0x58>
 8009292:	f7fd fa0b 	bl	80066ac <__errno>
 8009296:	2321      	movs	r3, #33	; 0x21
 8009298:	6003      	str	r3, [r0, #0]
 800929a:	4630      	mov	r0, r6
 800929c:	4639      	mov	r1, r7
 800929e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092a2:	2200      	movs	r2, #0
 80092a4:	2300      	movs	r3, #0
 80092a6:	4630      	mov	r0, r6
 80092a8:	4639      	mov	r1, r7
 80092aa:	f7f7 fb7d 	bl	80009a8 <__aeabi_dcmpeq>
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d0f3      	beq.n	800929a <pow+0x96>
 80092b2:	4640      	mov	r0, r8
 80092b4:	4649      	mov	r1, r9
 80092b6:	f001 fed4 	bl	800b062 <finite>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d0ed      	beq.n	800929a <pow+0x96>
 80092be:	4620      	mov	r0, r4
 80092c0:	4629      	mov	r1, r5
 80092c2:	f001 fece 	bl	800b062 <finite>
 80092c6:	e7c8      	b.n	800925a <pow+0x56>
 80092c8:	2600      	movs	r6, #0
 80092ca:	4f01      	ldr	r7, [pc, #4]	; (80092d0 <pow+0xcc>)
 80092cc:	e7e5      	b.n	800929a <pow+0x96>
 80092ce:	bf00      	nop
 80092d0:	3ff00000 	.word	0x3ff00000

080092d4 <sqrt>:
 80092d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d6:	4606      	mov	r6, r0
 80092d8:	460f      	mov	r7, r1
 80092da:	f001 f92d 	bl	800a538 <__ieee754_sqrt>
 80092de:	4632      	mov	r2, r6
 80092e0:	4604      	mov	r4, r0
 80092e2:	460d      	mov	r5, r1
 80092e4:	463b      	mov	r3, r7
 80092e6:	4630      	mov	r0, r6
 80092e8:	4639      	mov	r1, r7
 80092ea:	f7f7 fb8f 	bl	8000a0c <__aeabi_dcmpun>
 80092ee:	b990      	cbnz	r0, 8009316 <sqrt+0x42>
 80092f0:	2200      	movs	r2, #0
 80092f2:	2300      	movs	r3, #0
 80092f4:	4630      	mov	r0, r6
 80092f6:	4639      	mov	r1, r7
 80092f8:	f7f7 fb60 	bl	80009bc <__aeabi_dcmplt>
 80092fc:	b158      	cbz	r0, 8009316 <sqrt+0x42>
 80092fe:	f7fd f9d5 	bl	80066ac <__errno>
 8009302:	2321      	movs	r3, #33	; 0x21
 8009304:	2200      	movs	r2, #0
 8009306:	6003      	str	r3, [r0, #0]
 8009308:	2300      	movs	r3, #0
 800930a:	4610      	mov	r0, r2
 800930c:	4619      	mov	r1, r3
 800930e:	f7f7 fa0d 	bl	800072c <__aeabi_ddiv>
 8009312:	4604      	mov	r4, r0
 8009314:	460d      	mov	r5, r1
 8009316:	4620      	mov	r0, r4
 8009318:	4629      	mov	r1, r5
 800931a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800931c:	0000      	movs	r0, r0
	...

08009320 <__ieee754_asin>:
 8009320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009324:	4bc4      	ldr	r3, [pc, #784]	; (8009638 <__ieee754_asin+0x318>)
 8009326:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800932a:	b087      	sub	sp, #28
 800932c:	429e      	cmp	r6, r3
 800932e:	4602      	mov	r2, r0
 8009330:	4604      	mov	r4, r0
 8009332:	460d      	mov	r5, r1
 8009334:	9105      	str	r1, [sp, #20]
 8009336:	dd29      	ble.n	800938c <__ieee754_asin+0x6c>
 8009338:	4603      	mov	r3, r0
 800933a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 800933e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8009342:	4333      	orrs	r3, r6
 8009344:	d114      	bne.n	8009370 <__ieee754_asin+0x50>
 8009346:	a3a2      	add	r3, pc, #648	; (adr r3, 80095d0 <__ieee754_asin+0x2b0>)
 8009348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934c:	f7f7 f8c4 	bl	80004d8 <__aeabi_dmul>
 8009350:	a3a1      	add	r3, pc, #644	; (adr r3, 80095d8 <__ieee754_asin+0x2b8>)
 8009352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009356:	4606      	mov	r6, r0
 8009358:	460f      	mov	r7, r1
 800935a:	4620      	mov	r0, r4
 800935c:	4629      	mov	r1, r5
 800935e:	f7f7 f8bb 	bl	80004d8 <__aeabi_dmul>
 8009362:	4602      	mov	r2, r0
 8009364:	460b      	mov	r3, r1
 8009366:	4630      	mov	r0, r6
 8009368:	4639      	mov	r1, r7
 800936a:	f7f6 feff 	bl	800016c <__adddf3>
 800936e:	e006      	b.n	800937e <__ieee754_asin+0x5e>
 8009370:	460b      	mov	r3, r1
 8009372:	f7f6 fef9 	bl	8000168 <__aeabi_dsub>
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	f7f7 f9d7 	bl	800072c <__aeabi_ddiv>
 800937e:	4604      	mov	r4, r0
 8009380:	460d      	mov	r5, r1
 8009382:	4620      	mov	r0, r4
 8009384:	4629      	mov	r1, r5
 8009386:	b007      	add	sp, #28
 8009388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800938c:	4bab      	ldr	r3, [pc, #684]	; (800963c <__ieee754_asin+0x31c>)
 800938e:	429e      	cmp	r6, r3
 8009390:	dc0e      	bgt.n	80093b0 <__ieee754_asin+0x90>
 8009392:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009396:	f280 80ab 	bge.w	80094f0 <__ieee754_asin+0x1d0>
 800939a:	a391      	add	r3, pc, #580	; (adr r3, 80095e0 <__ieee754_asin+0x2c0>)
 800939c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a0:	f7f6 fee4 	bl	800016c <__adddf3>
 80093a4:	2200      	movs	r2, #0
 80093a6:	4ba6      	ldr	r3, [pc, #664]	; (8009640 <__ieee754_asin+0x320>)
 80093a8:	f7f7 fb26 	bl	80009f8 <__aeabi_dcmpgt>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d1e8      	bne.n	8009382 <__ieee754_asin+0x62>
 80093b0:	4620      	mov	r0, r4
 80093b2:	4629      	mov	r1, r5
 80093b4:	f001 fe52 	bl	800b05c <fabs>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	2000      	movs	r0, #0
 80093be:	49a0      	ldr	r1, [pc, #640]	; (8009640 <__ieee754_asin+0x320>)
 80093c0:	f7f6 fed2 	bl	8000168 <__aeabi_dsub>
 80093c4:	2200      	movs	r2, #0
 80093c6:	4b9f      	ldr	r3, [pc, #636]	; (8009644 <__ieee754_asin+0x324>)
 80093c8:	f7f7 f886 	bl	80004d8 <__aeabi_dmul>
 80093cc:	a386      	add	r3, pc, #536	; (adr r3, 80095e8 <__ieee754_asin+0x2c8>)
 80093ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d2:	4604      	mov	r4, r0
 80093d4:	460d      	mov	r5, r1
 80093d6:	f7f7 f87f 	bl	80004d8 <__aeabi_dmul>
 80093da:	a385      	add	r3, pc, #532	; (adr r3, 80095f0 <__ieee754_asin+0x2d0>)
 80093dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e0:	f7f6 fec4 	bl	800016c <__adddf3>
 80093e4:	4622      	mov	r2, r4
 80093e6:	462b      	mov	r3, r5
 80093e8:	f7f7 f876 	bl	80004d8 <__aeabi_dmul>
 80093ec:	a382      	add	r3, pc, #520	; (adr r3, 80095f8 <__ieee754_asin+0x2d8>)
 80093ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f2:	f7f6 feb9 	bl	8000168 <__aeabi_dsub>
 80093f6:	4622      	mov	r2, r4
 80093f8:	462b      	mov	r3, r5
 80093fa:	f7f7 f86d 	bl	80004d8 <__aeabi_dmul>
 80093fe:	a380      	add	r3, pc, #512	; (adr r3, 8009600 <__ieee754_asin+0x2e0>)
 8009400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009404:	f7f6 feb2 	bl	800016c <__adddf3>
 8009408:	4622      	mov	r2, r4
 800940a:	462b      	mov	r3, r5
 800940c:	f7f7 f864 	bl	80004d8 <__aeabi_dmul>
 8009410:	a37d      	add	r3, pc, #500	; (adr r3, 8009608 <__ieee754_asin+0x2e8>)
 8009412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009416:	f7f6 fea7 	bl	8000168 <__aeabi_dsub>
 800941a:	4622      	mov	r2, r4
 800941c:	462b      	mov	r3, r5
 800941e:	f7f7 f85b 	bl	80004d8 <__aeabi_dmul>
 8009422:	a37b      	add	r3, pc, #492	; (adr r3, 8009610 <__ieee754_asin+0x2f0>)
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	f7f6 fea0 	bl	800016c <__adddf3>
 800942c:	4622      	mov	r2, r4
 800942e:	462b      	mov	r3, r5
 8009430:	f7f7 f852 	bl	80004d8 <__aeabi_dmul>
 8009434:	a378      	add	r3, pc, #480	; (adr r3, 8009618 <__ieee754_asin+0x2f8>)
 8009436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943a:	e9cd 0100 	strd	r0, r1, [sp]
 800943e:	4620      	mov	r0, r4
 8009440:	4629      	mov	r1, r5
 8009442:	f7f7 f849 	bl	80004d8 <__aeabi_dmul>
 8009446:	a376      	add	r3, pc, #472	; (adr r3, 8009620 <__ieee754_asin+0x300>)
 8009448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944c:	f7f6 fe8c 	bl	8000168 <__aeabi_dsub>
 8009450:	4622      	mov	r2, r4
 8009452:	462b      	mov	r3, r5
 8009454:	f7f7 f840 	bl	80004d8 <__aeabi_dmul>
 8009458:	a373      	add	r3, pc, #460	; (adr r3, 8009628 <__ieee754_asin+0x308>)
 800945a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945e:	f7f6 fe85 	bl	800016c <__adddf3>
 8009462:	4622      	mov	r2, r4
 8009464:	462b      	mov	r3, r5
 8009466:	f7f7 f837 	bl	80004d8 <__aeabi_dmul>
 800946a:	a371      	add	r3, pc, #452	; (adr r3, 8009630 <__ieee754_asin+0x310>)
 800946c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009470:	f7f6 fe7a 	bl	8000168 <__aeabi_dsub>
 8009474:	4622      	mov	r2, r4
 8009476:	462b      	mov	r3, r5
 8009478:	f7f7 f82e 	bl	80004d8 <__aeabi_dmul>
 800947c:	4b70      	ldr	r3, [pc, #448]	; (8009640 <__ieee754_asin+0x320>)
 800947e:	2200      	movs	r2, #0
 8009480:	f7f6 fe74 	bl	800016c <__adddf3>
 8009484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009488:	4620      	mov	r0, r4
 800948a:	4629      	mov	r1, r5
 800948c:	f001 f854 	bl	800a538 <__ieee754_sqrt>
 8009490:	4b6d      	ldr	r3, [pc, #436]	; (8009648 <__ieee754_asin+0x328>)
 8009492:	4682      	mov	sl, r0
 8009494:	429e      	cmp	r6, r3
 8009496:	468b      	mov	fp, r1
 8009498:	f340 80d8 	ble.w	800964c <__ieee754_asin+0x32c>
 800949c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094a4:	f7f7 f942 	bl	800072c <__aeabi_ddiv>
 80094a8:	4652      	mov	r2, sl
 80094aa:	465b      	mov	r3, fp
 80094ac:	f7f7 f814 	bl	80004d8 <__aeabi_dmul>
 80094b0:	4652      	mov	r2, sl
 80094b2:	465b      	mov	r3, fp
 80094b4:	f7f6 fe5a 	bl	800016c <__adddf3>
 80094b8:	4602      	mov	r2, r0
 80094ba:	460b      	mov	r3, r1
 80094bc:	f7f6 fe56 	bl	800016c <__adddf3>
 80094c0:	a345      	add	r3, pc, #276	; (adr r3, 80095d8 <__ieee754_asin+0x2b8>)
 80094c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c6:	f7f6 fe4f 	bl	8000168 <__aeabi_dsub>
 80094ca:	4602      	mov	r2, r0
 80094cc:	460b      	mov	r3, r1
 80094ce:	a140      	add	r1, pc, #256	; (adr r1, 80095d0 <__ieee754_asin+0x2b0>)
 80094d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094d4:	f7f6 fe48 	bl	8000168 <__aeabi_dsub>
 80094d8:	9b05      	ldr	r3, [sp, #20]
 80094da:	4604      	mov	r4, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	bfdc      	itt	le
 80094e0:	4602      	movle	r2, r0
 80094e2:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80094e6:	460d      	mov	r5, r1
 80094e8:	bfdc      	itt	le
 80094ea:	4614      	movle	r4, r2
 80094ec:	461d      	movle	r5, r3
 80094ee:	e748      	b.n	8009382 <__ieee754_asin+0x62>
 80094f0:	460b      	mov	r3, r1
 80094f2:	f7f6 fff1 	bl	80004d8 <__aeabi_dmul>
 80094f6:	a33c      	add	r3, pc, #240	; (adr r3, 80095e8 <__ieee754_asin+0x2c8>)
 80094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fc:	4606      	mov	r6, r0
 80094fe:	460f      	mov	r7, r1
 8009500:	f7f6 ffea 	bl	80004d8 <__aeabi_dmul>
 8009504:	a33a      	add	r3, pc, #232	; (adr r3, 80095f0 <__ieee754_asin+0x2d0>)
 8009506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950a:	f7f6 fe2f 	bl	800016c <__adddf3>
 800950e:	4632      	mov	r2, r6
 8009510:	463b      	mov	r3, r7
 8009512:	f7f6 ffe1 	bl	80004d8 <__aeabi_dmul>
 8009516:	a338      	add	r3, pc, #224	; (adr r3, 80095f8 <__ieee754_asin+0x2d8>)
 8009518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951c:	f7f6 fe24 	bl	8000168 <__aeabi_dsub>
 8009520:	4632      	mov	r2, r6
 8009522:	463b      	mov	r3, r7
 8009524:	f7f6 ffd8 	bl	80004d8 <__aeabi_dmul>
 8009528:	a335      	add	r3, pc, #212	; (adr r3, 8009600 <__ieee754_asin+0x2e0>)
 800952a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952e:	f7f6 fe1d 	bl	800016c <__adddf3>
 8009532:	4632      	mov	r2, r6
 8009534:	463b      	mov	r3, r7
 8009536:	f7f6 ffcf 	bl	80004d8 <__aeabi_dmul>
 800953a:	a333      	add	r3, pc, #204	; (adr r3, 8009608 <__ieee754_asin+0x2e8>)
 800953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009540:	f7f6 fe12 	bl	8000168 <__aeabi_dsub>
 8009544:	4632      	mov	r2, r6
 8009546:	463b      	mov	r3, r7
 8009548:	f7f6 ffc6 	bl	80004d8 <__aeabi_dmul>
 800954c:	a330      	add	r3, pc, #192	; (adr r3, 8009610 <__ieee754_asin+0x2f0>)
 800954e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009552:	f7f6 fe0b 	bl	800016c <__adddf3>
 8009556:	4632      	mov	r2, r6
 8009558:	463b      	mov	r3, r7
 800955a:	f7f6 ffbd 	bl	80004d8 <__aeabi_dmul>
 800955e:	a32e      	add	r3, pc, #184	; (adr r3, 8009618 <__ieee754_asin+0x2f8>)
 8009560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009564:	4680      	mov	r8, r0
 8009566:	4689      	mov	r9, r1
 8009568:	4630      	mov	r0, r6
 800956a:	4639      	mov	r1, r7
 800956c:	f7f6 ffb4 	bl	80004d8 <__aeabi_dmul>
 8009570:	a32b      	add	r3, pc, #172	; (adr r3, 8009620 <__ieee754_asin+0x300>)
 8009572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009576:	f7f6 fdf7 	bl	8000168 <__aeabi_dsub>
 800957a:	4632      	mov	r2, r6
 800957c:	463b      	mov	r3, r7
 800957e:	f7f6 ffab 	bl	80004d8 <__aeabi_dmul>
 8009582:	a329      	add	r3, pc, #164	; (adr r3, 8009628 <__ieee754_asin+0x308>)
 8009584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009588:	f7f6 fdf0 	bl	800016c <__adddf3>
 800958c:	4632      	mov	r2, r6
 800958e:	463b      	mov	r3, r7
 8009590:	f7f6 ffa2 	bl	80004d8 <__aeabi_dmul>
 8009594:	a326      	add	r3, pc, #152	; (adr r3, 8009630 <__ieee754_asin+0x310>)
 8009596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959a:	f7f6 fde5 	bl	8000168 <__aeabi_dsub>
 800959e:	4632      	mov	r2, r6
 80095a0:	463b      	mov	r3, r7
 80095a2:	f7f6 ff99 	bl	80004d8 <__aeabi_dmul>
 80095a6:	2200      	movs	r2, #0
 80095a8:	4b25      	ldr	r3, [pc, #148]	; (8009640 <__ieee754_asin+0x320>)
 80095aa:	f7f6 fddf 	bl	800016c <__adddf3>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	4640      	mov	r0, r8
 80095b4:	4649      	mov	r1, r9
 80095b6:	f7f7 f8b9 	bl	800072c <__aeabi_ddiv>
 80095ba:	4622      	mov	r2, r4
 80095bc:	462b      	mov	r3, r5
 80095be:	f7f6 ff8b 	bl	80004d8 <__aeabi_dmul>
 80095c2:	4602      	mov	r2, r0
 80095c4:	460b      	mov	r3, r1
 80095c6:	4620      	mov	r0, r4
 80095c8:	4629      	mov	r1, r5
 80095ca:	e6ce      	b.n	800936a <__ieee754_asin+0x4a>
 80095cc:	f3af 8000 	nop.w
 80095d0:	54442d18 	.word	0x54442d18
 80095d4:	3ff921fb 	.word	0x3ff921fb
 80095d8:	33145c07 	.word	0x33145c07
 80095dc:	3c91a626 	.word	0x3c91a626
 80095e0:	8800759c 	.word	0x8800759c
 80095e4:	7e37e43c 	.word	0x7e37e43c
 80095e8:	0dfdf709 	.word	0x0dfdf709
 80095ec:	3f023de1 	.word	0x3f023de1
 80095f0:	7501b288 	.word	0x7501b288
 80095f4:	3f49efe0 	.word	0x3f49efe0
 80095f8:	b5688f3b 	.word	0xb5688f3b
 80095fc:	3fa48228 	.word	0x3fa48228
 8009600:	0e884455 	.word	0x0e884455
 8009604:	3fc9c155 	.word	0x3fc9c155
 8009608:	03eb6f7d 	.word	0x03eb6f7d
 800960c:	3fd4d612 	.word	0x3fd4d612
 8009610:	55555555 	.word	0x55555555
 8009614:	3fc55555 	.word	0x3fc55555
 8009618:	b12e9282 	.word	0xb12e9282
 800961c:	3fb3b8c5 	.word	0x3fb3b8c5
 8009620:	1b8d0159 	.word	0x1b8d0159
 8009624:	3fe6066c 	.word	0x3fe6066c
 8009628:	9c598ac8 	.word	0x9c598ac8
 800962c:	40002ae5 	.word	0x40002ae5
 8009630:	1c8a2d4b 	.word	0x1c8a2d4b
 8009634:	40033a27 	.word	0x40033a27
 8009638:	3fefffff 	.word	0x3fefffff
 800963c:	3fdfffff 	.word	0x3fdfffff
 8009640:	3ff00000 	.word	0x3ff00000
 8009644:	3fe00000 	.word	0x3fe00000
 8009648:	3fef3332 	.word	0x3fef3332
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	f7f6 fd8c 	bl	800016c <__adddf3>
 8009654:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009658:	4606      	mov	r6, r0
 800965a:	460f      	mov	r7, r1
 800965c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009660:	f7f7 f864 	bl	800072c <__aeabi_ddiv>
 8009664:	4602      	mov	r2, r0
 8009666:	460b      	mov	r3, r1
 8009668:	4630      	mov	r0, r6
 800966a:	4639      	mov	r1, r7
 800966c:	f7f6 ff34 	bl	80004d8 <__aeabi_dmul>
 8009670:	f04f 0800 	mov.w	r8, #0
 8009674:	4606      	mov	r6, r0
 8009676:	460f      	mov	r7, r1
 8009678:	4642      	mov	r2, r8
 800967a:	465b      	mov	r3, fp
 800967c:	4640      	mov	r0, r8
 800967e:	4659      	mov	r1, fp
 8009680:	f7f6 ff2a 	bl	80004d8 <__aeabi_dmul>
 8009684:	4602      	mov	r2, r0
 8009686:	460b      	mov	r3, r1
 8009688:	4620      	mov	r0, r4
 800968a:	4629      	mov	r1, r5
 800968c:	f7f6 fd6c 	bl	8000168 <__aeabi_dsub>
 8009690:	4642      	mov	r2, r8
 8009692:	4604      	mov	r4, r0
 8009694:	460d      	mov	r5, r1
 8009696:	465b      	mov	r3, fp
 8009698:	4650      	mov	r0, sl
 800969a:	4659      	mov	r1, fp
 800969c:	f7f6 fd66 	bl	800016c <__adddf3>
 80096a0:	4602      	mov	r2, r0
 80096a2:	460b      	mov	r3, r1
 80096a4:	4620      	mov	r0, r4
 80096a6:	4629      	mov	r1, r5
 80096a8:	f7f7 f840 	bl	800072c <__aeabi_ddiv>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	f7f6 fd5c 	bl	800016c <__adddf3>
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	a113      	add	r1, pc, #76	; (adr r1, 8009708 <__ieee754_asin+0x3e8>)
 80096ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096be:	f7f6 fd53 	bl	8000168 <__aeabi_dsub>
 80096c2:	4602      	mov	r2, r0
 80096c4:	460b      	mov	r3, r1
 80096c6:	4630      	mov	r0, r6
 80096c8:	4639      	mov	r1, r7
 80096ca:	f7f6 fd4d 	bl	8000168 <__aeabi_dsub>
 80096ce:	4642      	mov	r2, r8
 80096d0:	4604      	mov	r4, r0
 80096d2:	460d      	mov	r5, r1
 80096d4:	465b      	mov	r3, fp
 80096d6:	4640      	mov	r0, r8
 80096d8:	4659      	mov	r1, fp
 80096da:	f7f6 fd47 	bl	800016c <__adddf3>
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	a10b      	add	r1, pc, #44	; (adr r1, 8009710 <__ieee754_asin+0x3f0>)
 80096e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096e8:	f7f6 fd3e 	bl	8000168 <__aeabi_dsub>
 80096ec:	4602      	mov	r2, r0
 80096ee:	460b      	mov	r3, r1
 80096f0:	4620      	mov	r0, r4
 80096f2:	4629      	mov	r1, r5
 80096f4:	f7f6 fd38 	bl	8000168 <__aeabi_dsub>
 80096f8:	4602      	mov	r2, r0
 80096fa:	460b      	mov	r3, r1
 80096fc:	a104      	add	r1, pc, #16	; (adr r1, 8009710 <__ieee754_asin+0x3f0>)
 80096fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009702:	e6e7      	b.n	80094d4 <__ieee754_asin+0x1b4>
 8009704:	f3af 8000 	nop.w
 8009708:	33145c07 	.word	0x33145c07
 800970c:	3c91a626 	.word	0x3c91a626
 8009710:	54442d18 	.word	0x54442d18
 8009714:	3fe921fb 	.word	0x3fe921fb

08009718 <__ieee754_pow>:
 8009718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971c:	b093      	sub	sp, #76	; 0x4c
 800971e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009722:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8009726:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800972a:	4689      	mov	r9, r1
 800972c:	ea56 0102 	orrs.w	r1, r6, r2
 8009730:	4680      	mov	r8, r0
 8009732:	d111      	bne.n	8009758 <__ieee754_pow+0x40>
 8009734:	1803      	adds	r3, r0, r0
 8009736:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800973a:	4152      	adcs	r2, r2
 800973c:	4299      	cmp	r1, r3
 800973e:	4b82      	ldr	r3, [pc, #520]	; (8009948 <__ieee754_pow+0x230>)
 8009740:	4193      	sbcs	r3, r2
 8009742:	f080 84b9 	bcs.w	800a0b8 <__ieee754_pow+0x9a0>
 8009746:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800974a:	4640      	mov	r0, r8
 800974c:	4649      	mov	r1, r9
 800974e:	f7f6 fd0d 	bl	800016c <__adddf3>
 8009752:	4683      	mov	fp, r0
 8009754:	468c      	mov	ip, r1
 8009756:	e06f      	b.n	8009838 <__ieee754_pow+0x120>
 8009758:	4b7c      	ldr	r3, [pc, #496]	; (800994c <__ieee754_pow+0x234>)
 800975a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800975e:	429c      	cmp	r4, r3
 8009760:	464d      	mov	r5, r9
 8009762:	4682      	mov	sl, r0
 8009764:	dc06      	bgt.n	8009774 <__ieee754_pow+0x5c>
 8009766:	d101      	bne.n	800976c <__ieee754_pow+0x54>
 8009768:	2800      	cmp	r0, #0
 800976a:	d1ec      	bne.n	8009746 <__ieee754_pow+0x2e>
 800976c:	429e      	cmp	r6, r3
 800976e:	dc01      	bgt.n	8009774 <__ieee754_pow+0x5c>
 8009770:	d10f      	bne.n	8009792 <__ieee754_pow+0x7a>
 8009772:	b172      	cbz	r2, 8009792 <__ieee754_pow+0x7a>
 8009774:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009778:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800977c:	ea55 050a 	orrs.w	r5, r5, sl
 8009780:	d1e1      	bne.n	8009746 <__ieee754_pow+0x2e>
 8009782:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009786:	18db      	adds	r3, r3, r3
 8009788:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800978c:	4152      	adcs	r2, r2
 800978e:	429d      	cmp	r5, r3
 8009790:	e7d5      	b.n	800973e <__ieee754_pow+0x26>
 8009792:	2d00      	cmp	r5, #0
 8009794:	da39      	bge.n	800980a <__ieee754_pow+0xf2>
 8009796:	4b6e      	ldr	r3, [pc, #440]	; (8009950 <__ieee754_pow+0x238>)
 8009798:	429e      	cmp	r6, r3
 800979a:	dc52      	bgt.n	8009842 <__ieee754_pow+0x12a>
 800979c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80097a0:	429e      	cmp	r6, r3
 80097a2:	f340 849c 	ble.w	800a0de <__ieee754_pow+0x9c6>
 80097a6:	1533      	asrs	r3, r6, #20
 80097a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80097ac:	2b14      	cmp	r3, #20
 80097ae:	dd0f      	ble.n	80097d0 <__ieee754_pow+0xb8>
 80097b0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80097b4:	fa22 f103 	lsr.w	r1, r2, r3
 80097b8:	fa01 f303 	lsl.w	r3, r1, r3
 80097bc:	4293      	cmp	r3, r2
 80097be:	f040 848e 	bne.w	800a0de <__ieee754_pow+0x9c6>
 80097c2:	f001 0101 	and.w	r1, r1, #1
 80097c6:	f1c1 0302 	rsb	r3, r1, #2
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	b182      	cbz	r2, 80097f0 <__ieee754_pow+0xd8>
 80097ce:	e05d      	b.n	800988c <__ieee754_pow+0x174>
 80097d0:	2a00      	cmp	r2, #0
 80097d2:	d159      	bne.n	8009888 <__ieee754_pow+0x170>
 80097d4:	f1c3 0314 	rsb	r3, r3, #20
 80097d8:	fa46 f103 	asr.w	r1, r6, r3
 80097dc:	fa01 f303 	lsl.w	r3, r1, r3
 80097e0:	42b3      	cmp	r3, r6
 80097e2:	f040 8479 	bne.w	800a0d8 <__ieee754_pow+0x9c0>
 80097e6:	f001 0101 	and.w	r1, r1, #1
 80097ea:	f1c1 0302 	rsb	r3, r1, #2
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	4b58      	ldr	r3, [pc, #352]	; (8009954 <__ieee754_pow+0x23c>)
 80097f2:	429e      	cmp	r6, r3
 80097f4:	d132      	bne.n	800985c <__ieee754_pow+0x144>
 80097f6:	2f00      	cmp	r7, #0
 80097f8:	f280 846a 	bge.w	800a0d0 <__ieee754_pow+0x9b8>
 80097fc:	4642      	mov	r2, r8
 80097fe:	464b      	mov	r3, r9
 8009800:	2000      	movs	r0, #0
 8009802:	4954      	ldr	r1, [pc, #336]	; (8009954 <__ieee754_pow+0x23c>)
 8009804:	f7f6 ff92 	bl	800072c <__aeabi_ddiv>
 8009808:	e7a3      	b.n	8009752 <__ieee754_pow+0x3a>
 800980a:	2300      	movs	r3, #0
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	2a00      	cmp	r2, #0
 8009810:	d13c      	bne.n	800988c <__ieee754_pow+0x174>
 8009812:	4b4e      	ldr	r3, [pc, #312]	; (800994c <__ieee754_pow+0x234>)
 8009814:	429e      	cmp	r6, r3
 8009816:	d1eb      	bne.n	80097f0 <__ieee754_pow+0xd8>
 8009818:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800981c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009820:	ea53 030a 	orrs.w	r3, r3, sl
 8009824:	f000 8448 	beq.w	800a0b8 <__ieee754_pow+0x9a0>
 8009828:	4b4b      	ldr	r3, [pc, #300]	; (8009958 <__ieee754_pow+0x240>)
 800982a:	429c      	cmp	r4, r3
 800982c:	dd0b      	ble.n	8009846 <__ieee754_pow+0x12e>
 800982e:	2f00      	cmp	r7, #0
 8009830:	f2c0 8448 	blt.w	800a0c4 <__ieee754_pow+0x9ac>
 8009834:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009838:	4658      	mov	r0, fp
 800983a:	4661      	mov	r1, ip
 800983c:	b013      	add	sp, #76	; 0x4c
 800983e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009842:	2302      	movs	r3, #2
 8009844:	e7e2      	b.n	800980c <__ieee754_pow+0xf4>
 8009846:	2f00      	cmp	r7, #0
 8009848:	f04f 0b00 	mov.w	fp, #0
 800984c:	f04f 0c00 	mov.w	ip, #0
 8009850:	daf2      	bge.n	8009838 <__ieee754_pow+0x120>
 8009852:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009856:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800985a:	e7ed      	b.n	8009838 <__ieee754_pow+0x120>
 800985c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009860:	d106      	bne.n	8009870 <__ieee754_pow+0x158>
 8009862:	4642      	mov	r2, r8
 8009864:	464b      	mov	r3, r9
 8009866:	4640      	mov	r0, r8
 8009868:	4649      	mov	r1, r9
 800986a:	f7f6 fe35 	bl	80004d8 <__aeabi_dmul>
 800986e:	e770      	b.n	8009752 <__ieee754_pow+0x3a>
 8009870:	4b3a      	ldr	r3, [pc, #232]	; (800995c <__ieee754_pow+0x244>)
 8009872:	429f      	cmp	r7, r3
 8009874:	d10a      	bne.n	800988c <__ieee754_pow+0x174>
 8009876:	2d00      	cmp	r5, #0
 8009878:	db08      	blt.n	800988c <__ieee754_pow+0x174>
 800987a:	4640      	mov	r0, r8
 800987c:	4649      	mov	r1, r9
 800987e:	b013      	add	sp, #76	; 0x4c
 8009880:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009884:	f000 be58 	b.w	800a538 <__ieee754_sqrt>
 8009888:	2300      	movs	r3, #0
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	4640      	mov	r0, r8
 800988e:	4649      	mov	r1, r9
 8009890:	f001 fbe4 	bl	800b05c <fabs>
 8009894:	4683      	mov	fp, r0
 8009896:	468c      	mov	ip, r1
 8009898:	f1ba 0f00 	cmp.w	sl, #0
 800989c:	d128      	bne.n	80098f0 <__ieee754_pow+0x1d8>
 800989e:	b124      	cbz	r4, 80098aa <__ieee754_pow+0x192>
 80098a0:	4b2c      	ldr	r3, [pc, #176]	; (8009954 <__ieee754_pow+0x23c>)
 80098a2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d122      	bne.n	80098f0 <__ieee754_pow+0x1d8>
 80098aa:	2f00      	cmp	r7, #0
 80098ac:	da07      	bge.n	80098be <__ieee754_pow+0x1a6>
 80098ae:	465a      	mov	r2, fp
 80098b0:	4663      	mov	r3, ip
 80098b2:	2000      	movs	r0, #0
 80098b4:	4927      	ldr	r1, [pc, #156]	; (8009954 <__ieee754_pow+0x23c>)
 80098b6:	f7f6 ff39 	bl	800072c <__aeabi_ddiv>
 80098ba:	4683      	mov	fp, r0
 80098bc:	468c      	mov	ip, r1
 80098be:	2d00      	cmp	r5, #0
 80098c0:	daba      	bge.n	8009838 <__ieee754_pow+0x120>
 80098c2:	9b00      	ldr	r3, [sp, #0]
 80098c4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80098c8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80098cc:	4323      	orrs	r3, r4
 80098ce:	d108      	bne.n	80098e2 <__ieee754_pow+0x1ca>
 80098d0:	465a      	mov	r2, fp
 80098d2:	4663      	mov	r3, ip
 80098d4:	4658      	mov	r0, fp
 80098d6:	4661      	mov	r1, ip
 80098d8:	f7f6 fc46 	bl	8000168 <__aeabi_dsub>
 80098dc:	4602      	mov	r2, r0
 80098de:	460b      	mov	r3, r1
 80098e0:	e790      	b.n	8009804 <__ieee754_pow+0xec>
 80098e2:	9b00      	ldr	r3, [sp, #0]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d1a7      	bne.n	8009838 <__ieee754_pow+0x120>
 80098e8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80098ec:	469c      	mov	ip, r3
 80098ee:	e7a3      	b.n	8009838 <__ieee754_pow+0x120>
 80098f0:	0feb      	lsrs	r3, r5, #31
 80098f2:	3b01      	subs	r3, #1
 80098f4:	930c      	str	r3, [sp, #48]	; 0x30
 80098f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098f8:	9b00      	ldr	r3, [sp, #0]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	d104      	bne.n	8009908 <__ieee754_pow+0x1f0>
 80098fe:	4642      	mov	r2, r8
 8009900:	464b      	mov	r3, r9
 8009902:	4640      	mov	r0, r8
 8009904:	4649      	mov	r1, r9
 8009906:	e7e7      	b.n	80098d8 <__ieee754_pow+0x1c0>
 8009908:	4b15      	ldr	r3, [pc, #84]	; (8009960 <__ieee754_pow+0x248>)
 800990a:	429e      	cmp	r6, r3
 800990c:	f340 80f6 	ble.w	8009afc <__ieee754_pow+0x3e4>
 8009910:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009914:	429e      	cmp	r6, r3
 8009916:	4b10      	ldr	r3, [pc, #64]	; (8009958 <__ieee754_pow+0x240>)
 8009918:	dd09      	ble.n	800992e <__ieee754_pow+0x216>
 800991a:	429c      	cmp	r4, r3
 800991c:	dc0c      	bgt.n	8009938 <__ieee754_pow+0x220>
 800991e:	2f00      	cmp	r7, #0
 8009920:	da0c      	bge.n	800993c <__ieee754_pow+0x224>
 8009922:	2000      	movs	r0, #0
 8009924:	b013      	add	sp, #76	; 0x4c
 8009926:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992a:	f001 bb92 	b.w	800b052 <__math_oflow>
 800992e:	429c      	cmp	r4, r3
 8009930:	dbf5      	blt.n	800991e <__ieee754_pow+0x206>
 8009932:	4b08      	ldr	r3, [pc, #32]	; (8009954 <__ieee754_pow+0x23c>)
 8009934:	429c      	cmp	r4, r3
 8009936:	dd15      	ble.n	8009964 <__ieee754_pow+0x24c>
 8009938:	2f00      	cmp	r7, #0
 800993a:	dcf2      	bgt.n	8009922 <__ieee754_pow+0x20a>
 800993c:	2000      	movs	r0, #0
 800993e:	b013      	add	sp, #76	; 0x4c
 8009940:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009944:	f001 bb80 	b.w	800b048 <__math_uflow>
 8009948:	fff00000 	.word	0xfff00000
 800994c:	7ff00000 	.word	0x7ff00000
 8009950:	433fffff 	.word	0x433fffff
 8009954:	3ff00000 	.word	0x3ff00000
 8009958:	3fefffff 	.word	0x3fefffff
 800995c:	3fe00000 	.word	0x3fe00000
 8009960:	41e00000 	.word	0x41e00000
 8009964:	4661      	mov	r1, ip
 8009966:	2200      	movs	r2, #0
 8009968:	4658      	mov	r0, fp
 800996a:	4b5f      	ldr	r3, [pc, #380]	; (8009ae8 <__ieee754_pow+0x3d0>)
 800996c:	f7f6 fbfc 	bl	8000168 <__aeabi_dsub>
 8009970:	a355      	add	r3, pc, #340	; (adr r3, 8009ac8 <__ieee754_pow+0x3b0>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	4604      	mov	r4, r0
 8009978:	460d      	mov	r5, r1
 800997a:	f7f6 fdad 	bl	80004d8 <__aeabi_dmul>
 800997e:	a354      	add	r3, pc, #336	; (adr r3, 8009ad0 <__ieee754_pow+0x3b8>)
 8009980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009984:	4606      	mov	r6, r0
 8009986:	460f      	mov	r7, r1
 8009988:	4620      	mov	r0, r4
 800998a:	4629      	mov	r1, r5
 800998c:	f7f6 fda4 	bl	80004d8 <__aeabi_dmul>
 8009990:	2200      	movs	r2, #0
 8009992:	4682      	mov	sl, r0
 8009994:	468b      	mov	fp, r1
 8009996:	4620      	mov	r0, r4
 8009998:	4629      	mov	r1, r5
 800999a:	4b54      	ldr	r3, [pc, #336]	; (8009aec <__ieee754_pow+0x3d4>)
 800999c:	f7f6 fd9c 	bl	80004d8 <__aeabi_dmul>
 80099a0:	4602      	mov	r2, r0
 80099a2:	460b      	mov	r3, r1
 80099a4:	a14c      	add	r1, pc, #304	; (adr r1, 8009ad8 <__ieee754_pow+0x3c0>)
 80099a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099aa:	f7f6 fbdd 	bl	8000168 <__aeabi_dsub>
 80099ae:	4622      	mov	r2, r4
 80099b0:	462b      	mov	r3, r5
 80099b2:	f7f6 fd91 	bl	80004d8 <__aeabi_dmul>
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	2000      	movs	r0, #0
 80099bc:	494c      	ldr	r1, [pc, #304]	; (8009af0 <__ieee754_pow+0x3d8>)
 80099be:	f7f6 fbd3 	bl	8000168 <__aeabi_dsub>
 80099c2:	4622      	mov	r2, r4
 80099c4:	462b      	mov	r3, r5
 80099c6:	4680      	mov	r8, r0
 80099c8:	4689      	mov	r9, r1
 80099ca:	4620      	mov	r0, r4
 80099cc:	4629      	mov	r1, r5
 80099ce:	f7f6 fd83 	bl	80004d8 <__aeabi_dmul>
 80099d2:	4602      	mov	r2, r0
 80099d4:	460b      	mov	r3, r1
 80099d6:	4640      	mov	r0, r8
 80099d8:	4649      	mov	r1, r9
 80099da:	f7f6 fd7d 	bl	80004d8 <__aeabi_dmul>
 80099de:	a340      	add	r3, pc, #256	; (adr r3, 8009ae0 <__ieee754_pow+0x3c8>)
 80099e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e4:	f7f6 fd78 	bl	80004d8 <__aeabi_dmul>
 80099e8:	4602      	mov	r2, r0
 80099ea:	460b      	mov	r3, r1
 80099ec:	4650      	mov	r0, sl
 80099ee:	4659      	mov	r1, fp
 80099f0:	f7f6 fbba 	bl	8000168 <__aeabi_dsub>
 80099f4:	f04f 0a00 	mov.w	sl, #0
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	4604      	mov	r4, r0
 80099fe:	460d      	mov	r5, r1
 8009a00:	4630      	mov	r0, r6
 8009a02:	4639      	mov	r1, r7
 8009a04:	f7f6 fbb2 	bl	800016c <__adddf3>
 8009a08:	4632      	mov	r2, r6
 8009a0a:	463b      	mov	r3, r7
 8009a0c:	4650      	mov	r0, sl
 8009a0e:	468b      	mov	fp, r1
 8009a10:	f7f6 fbaa 	bl	8000168 <__aeabi_dsub>
 8009a14:	4602      	mov	r2, r0
 8009a16:	460b      	mov	r3, r1
 8009a18:	4620      	mov	r0, r4
 8009a1a:	4629      	mov	r1, r5
 8009a1c:	f7f6 fba4 	bl	8000168 <__aeabi_dsub>
 8009a20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009a24:	9b00      	ldr	r3, [sp, #0]
 8009a26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	f04f 0600 	mov.w	r6, #0
 8009a30:	f04f 0200 	mov.w	r2, #0
 8009a34:	bf0c      	ite	eq
 8009a36:	4b2f      	ldreq	r3, [pc, #188]	; (8009af4 <__ieee754_pow+0x3dc>)
 8009a38:	4b2b      	ldrne	r3, [pc, #172]	; (8009ae8 <__ieee754_pow+0x3d0>)
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	460d      	mov	r5, r1
 8009a3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a42:	e9cd 2300 	strd	r2, r3, [sp]
 8009a46:	4632      	mov	r2, r6
 8009a48:	463b      	mov	r3, r7
 8009a4a:	f7f6 fb8d 	bl	8000168 <__aeabi_dsub>
 8009a4e:	4652      	mov	r2, sl
 8009a50:	465b      	mov	r3, fp
 8009a52:	f7f6 fd41 	bl	80004d8 <__aeabi_dmul>
 8009a56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a5a:	4680      	mov	r8, r0
 8009a5c:	4689      	mov	r9, r1
 8009a5e:	4620      	mov	r0, r4
 8009a60:	4629      	mov	r1, r5
 8009a62:	f7f6 fd39 	bl	80004d8 <__aeabi_dmul>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4640      	mov	r0, r8
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	f7f6 fb7d 	bl	800016c <__adddf3>
 8009a72:	4632      	mov	r2, r6
 8009a74:	463b      	mov	r3, r7
 8009a76:	4680      	mov	r8, r0
 8009a78:	4689      	mov	r9, r1
 8009a7a:	4650      	mov	r0, sl
 8009a7c:	4659      	mov	r1, fp
 8009a7e:	f7f6 fd2b 	bl	80004d8 <__aeabi_dmul>
 8009a82:	4604      	mov	r4, r0
 8009a84:	460d      	mov	r5, r1
 8009a86:	460b      	mov	r3, r1
 8009a88:	4602      	mov	r2, r0
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009a92:	f7f6 fb6b 	bl	800016c <__adddf3>
 8009a96:	4b18      	ldr	r3, [pc, #96]	; (8009af8 <__ieee754_pow+0x3e0>)
 8009a98:	4682      	mov	sl, r0
 8009a9a:	4299      	cmp	r1, r3
 8009a9c:	460f      	mov	r7, r1
 8009a9e:	460e      	mov	r6, r1
 8009aa0:	f340 82e5 	ble.w	800a06e <__ieee754_pow+0x956>
 8009aa4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009aa8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009aac:	4303      	orrs	r3, r0
 8009aae:	f000 81df 	beq.w	8009e70 <__ieee754_pow+0x758>
 8009ab2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	2300      	movs	r3, #0
 8009aba:	f7f6 ff7f 	bl	80009bc <__aeabi_dcmplt>
 8009abe:	3800      	subs	r0, #0
 8009ac0:	bf18      	it	ne
 8009ac2:	2001      	movne	r0, #1
 8009ac4:	e72e      	b.n	8009924 <__ieee754_pow+0x20c>
 8009ac6:	bf00      	nop
 8009ac8:	60000000 	.word	0x60000000
 8009acc:	3ff71547 	.word	0x3ff71547
 8009ad0:	f85ddf44 	.word	0xf85ddf44
 8009ad4:	3e54ae0b 	.word	0x3e54ae0b
 8009ad8:	55555555 	.word	0x55555555
 8009adc:	3fd55555 	.word	0x3fd55555
 8009ae0:	652b82fe 	.word	0x652b82fe
 8009ae4:	3ff71547 	.word	0x3ff71547
 8009ae8:	3ff00000 	.word	0x3ff00000
 8009aec:	3fd00000 	.word	0x3fd00000
 8009af0:	3fe00000 	.word	0x3fe00000
 8009af4:	bff00000 	.word	0xbff00000
 8009af8:	408fffff 	.word	0x408fffff
 8009afc:	4bd2      	ldr	r3, [pc, #840]	; (8009e48 <__ieee754_pow+0x730>)
 8009afe:	2200      	movs	r2, #0
 8009b00:	402b      	ands	r3, r5
 8009b02:	b943      	cbnz	r3, 8009b16 <__ieee754_pow+0x3fe>
 8009b04:	4658      	mov	r0, fp
 8009b06:	4661      	mov	r1, ip
 8009b08:	4bd0      	ldr	r3, [pc, #832]	; (8009e4c <__ieee754_pow+0x734>)
 8009b0a:	f7f6 fce5 	bl	80004d8 <__aeabi_dmul>
 8009b0e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009b12:	4683      	mov	fp, r0
 8009b14:	460c      	mov	r4, r1
 8009b16:	1523      	asrs	r3, r4, #20
 8009b18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009b1c:	4413      	add	r3, r2
 8009b1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b20:	4bcb      	ldr	r3, [pc, #812]	; (8009e50 <__ieee754_pow+0x738>)
 8009b22:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009b26:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009b2a:	429c      	cmp	r4, r3
 8009b2c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009b30:	dd08      	ble.n	8009b44 <__ieee754_pow+0x42c>
 8009b32:	4bc8      	ldr	r3, [pc, #800]	; (8009e54 <__ieee754_pow+0x73c>)
 8009b34:	429c      	cmp	r4, r3
 8009b36:	f340 8199 	ble.w	8009e6c <__ieee754_pow+0x754>
 8009b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b3c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009b40:	3301      	adds	r3, #1
 8009b42:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b44:	2600      	movs	r6, #0
 8009b46:	00f3      	lsls	r3, r6, #3
 8009b48:	930d      	str	r3, [sp, #52]	; 0x34
 8009b4a:	4bc3      	ldr	r3, [pc, #780]	; (8009e58 <__ieee754_pow+0x740>)
 8009b4c:	4658      	mov	r0, fp
 8009b4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b56:	4629      	mov	r1, r5
 8009b58:	461a      	mov	r2, r3
 8009b5a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009b5e:	4623      	mov	r3, r4
 8009b60:	f7f6 fb02 	bl	8000168 <__aeabi_dsub>
 8009b64:	46da      	mov	sl, fp
 8009b66:	462b      	mov	r3, r5
 8009b68:	4652      	mov	r2, sl
 8009b6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009b6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b72:	f7f6 fafb 	bl	800016c <__adddf3>
 8009b76:	4602      	mov	r2, r0
 8009b78:	460b      	mov	r3, r1
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	49b7      	ldr	r1, [pc, #732]	; (8009e5c <__ieee754_pow+0x744>)
 8009b7e:	f7f6 fdd5 	bl	800072c <__aeabi_ddiv>
 8009b82:	4602      	mov	r2, r0
 8009b84:	460b      	mov	r3, r1
 8009b86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b8a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009b8e:	f7f6 fca3 	bl	80004d8 <__aeabi_dmul>
 8009b92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009b96:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009b9a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	46ab      	mov	fp, r5
 8009ba4:	106d      	asrs	r5, r5, #1
 8009ba6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009baa:	9304      	str	r3, [sp, #16]
 8009bac:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009bb0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009bb4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009bb8:	4640      	mov	r0, r8
 8009bba:	4649      	mov	r1, r9
 8009bbc:	4614      	mov	r4, r2
 8009bbe:	461d      	mov	r5, r3
 8009bc0:	f7f6 fc8a 	bl	80004d8 <__aeabi_dmul>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009bcc:	f7f6 facc 	bl	8000168 <__aeabi_dsub>
 8009bd0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	460f      	mov	r7, r1
 8009bd8:	4620      	mov	r0, r4
 8009bda:	4629      	mov	r1, r5
 8009bdc:	f7f6 fac4 	bl	8000168 <__aeabi_dsub>
 8009be0:	4602      	mov	r2, r0
 8009be2:	460b      	mov	r3, r1
 8009be4:	4650      	mov	r0, sl
 8009be6:	4659      	mov	r1, fp
 8009be8:	f7f6 fabe 	bl	8000168 <__aeabi_dsub>
 8009bec:	4642      	mov	r2, r8
 8009bee:	464b      	mov	r3, r9
 8009bf0:	f7f6 fc72 	bl	80004d8 <__aeabi_dmul>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	4639      	mov	r1, r7
 8009bfc:	f7f6 fab4 	bl	8000168 <__aeabi_dsub>
 8009c00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009c04:	f7f6 fc68 	bl	80004d8 <__aeabi_dmul>
 8009c08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c0c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c10:	4610      	mov	r0, r2
 8009c12:	4619      	mov	r1, r3
 8009c14:	f7f6 fc60 	bl	80004d8 <__aeabi_dmul>
 8009c18:	a379      	add	r3, pc, #484	; (adr r3, 8009e00 <__ieee754_pow+0x6e8>)
 8009c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1e:	4604      	mov	r4, r0
 8009c20:	460d      	mov	r5, r1
 8009c22:	f7f6 fc59 	bl	80004d8 <__aeabi_dmul>
 8009c26:	a378      	add	r3, pc, #480	; (adr r3, 8009e08 <__ieee754_pow+0x6f0>)
 8009c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2c:	f7f6 fa9e 	bl	800016c <__adddf3>
 8009c30:	4622      	mov	r2, r4
 8009c32:	462b      	mov	r3, r5
 8009c34:	f7f6 fc50 	bl	80004d8 <__aeabi_dmul>
 8009c38:	a375      	add	r3, pc, #468	; (adr r3, 8009e10 <__ieee754_pow+0x6f8>)
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	f7f6 fa95 	bl	800016c <__adddf3>
 8009c42:	4622      	mov	r2, r4
 8009c44:	462b      	mov	r3, r5
 8009c46:	f7f6 fc47 	bl	80004d8 <__aeabi_dmul>
 8009c4a:	a373      	add	r3, pc, #460	; (adr r3, 8009e18 <__ieee754_pow+0x700>)
 8009c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c50:	f7f6 fa8c 	bl	800016c <__adddf3>
 8009c54:	4622      	mov	r2, r4
 8009c56:	462b      	mov	r3, r5
 8009c58:	f7f6 fc3e 	bl	80004d8 <__aeabi_dmul>
 8009c5c:	a370      	add	r3, pc, #448	; (adr r3, 8009e20 <__ieee754_pow+0x708>)
 8009c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c62:	f7f6 fa83 	bl	800016c <__adddf3>
 8009c66:	4622      	mov	r2, r4
 8009c68:	462b      	mov	r3, r5
 8009c6a:	f7f6 fc35 	bl	80004d8 <__aeabi_dmul>
 8009c6e:	a36e      	add	r3, pc, #440	; (adr r3, 8009e28 <__ieee754_pow+0x710>)
 8009c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c74:	f7f6 fa7a 	bl	800016c <__adddf3>
 8009c78:	4622      	mov	r2, r4
 8009c7a:	4606      	mov	r6, r0
 8009c7c:	460f      	mov	r7, r1
 8009c7e:	462b      	mov	r3, r5
 8009c80:	4620      	mov	r0, r4
 8009c82:	4629      	mov	r1, r5
 8009c84:	f7f6 fc28 	bl	80004d8 <__aeabi_dmul>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	4639      	mov	r1, r7
 8009c90:	f7f6 fc22 	bl	80004d8 <__aeabi_dmul>
 8009c94:	4604      	mov	r4, r0
 8009c96:	460d      	mov	r5, r1
 8009c98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c9c:	4642      	mov	r2, r8
 8009c9e:	464b      	mov	r3, r9
 8009ca0:	f7f6 fa64 	bl	800016c <__adddf3>
 8009ca4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009ca8:	f7f6 fc16 	bl	80004d8 <__aeabi_dmul>
 8009cac:	4622      	mov	r2, r4
 8009cae:	462b      	mov	r3, r5
 8009cb0:	f7f6 fa5c 	bl	800016c <__adddf3>
 8009cb4:	4642      	mov	r2, r8
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	460f      	mov	r7, r1
 8009cba:	464b      	mov	r3, r9
 8009cbc:	4640      	mov	r0, r8
 8009cbe:	4649      	mov	r1, r9
 8009cc0:	f7f6 fc0a 	bl	80004d8 <__aeabi_dmul>
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	4b66      	ldr	r3, [pc, #408]	; (8009e60 <__ieee754_pow+0x748>)
 8009cc8:	4682      	mov	sl, r0
 8009cca:	468b      	mov	fp, r1
 8009ccc:	f7f6 fa4e 	bl	800016c <__adddf3>
 8009cd0:	4632      	mov	r2, r6
 8009cd2:	463b      	mov	r3, r7
 8009cd4:	f7f6 fa4a 	bl	800016c <__adddf3>
 8009cd8:	2400      	movs	r4, #0
 8009cda:	460d      	mov	r5, r1
 8009cdc:	4622      	mov	r2, r4
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4640      	mov	r0, r8
 8009ce2:	4649      	mov	r1, r9
 8009ce4:	f7f6 fbf8 	bl	80004d8 <__aeabi_dmul>
 8009ce8:	2200      	movs	r2, #0
 8009cea:	4680      	mov	r8, r0
 8009cec:	4689      	mov	r9, r1
 8009cee:	4620      	mov	r0, r4
 8009cf0:	4629      	mov	r1, r5
 8009cf2:	4b5b      	ldr	r3, [pc, #364]	; (8009e60 <__ieee754_pow+0x748>)
 8009cf4:	f7f6 fa38 	bl	8000168 <__aeabi_dsub>
 8009cf8:	4652      	mov	r2, sl
 8009cfa:	465b      	mov	r3, fp
 8009cfc:	f7f6 fa34 	bl	8000168 <__aeabi_dsub>
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	4630      	mov	r0, r6
 8009d06:	4639      	mov	r1, r7
 8009d08:	f7f6 fa2e 	bl	8000168 <__aeabi_dsub>
 8009d0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d10:	f7f6 fbe2 	bl	80004d8 <__aeabi_dmul>
 8009d14:	4622      	mov	r2, r4
 8009d16:	4606      	mov	r6, r0
 8009d18:	460f      	mov	r7, r1
 8009d1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d1e:	462b      	mov	r3, r5
 8009d20:	f7f6 fbda 	bl	80004d8 <__aeabi_dmul>
 8009d24:	4602      	mov	r2, r0
 8009d26:	460b      	mov	r3, r1
 8009d28:	4630      	mov	r0, r6
 8009d2a:	4639      	mov	r1, r7
 8009d2c:	f7f6 fa1e 	bl	800016c <__adddf3>
 8009d30:	2400      	movs	r4, #0
 8009d32:	4606      	mov	r6, r0
 8009d34:	460f      	mov	r7, r1
 8009d36:	4602      	mov	r2, r0
 8009d38:	460b      	mov	r3, r1
 8009d3a:	4640      	mov	r0, r8
 8009d3c:	4649      	mov	r1, r9
 8009d3e:	f7f6 fa15 	bl	800016c <__adddf3>
 8009d42:	a33b      	add	r3, pc, #236	; (adr r3, 8009e30 <__ieee754_pow+0x718>)
 8009d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d48:	4620      	mov	r0, r4
 8009d4a:	460d      	mov	r5, r1
 8009d4c:	f7f6 fbc4 	bl	80004d8 <__aeabi_dmul>
 8009d50:	4642      	mov	r2, r8
 8009d52:	464b      	mov	r3, r9
 8009d54:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d58:	4620      	mov	r0, r4
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	f7f6 fa04 	bl	8000168 <__aeabi_dsub>
 8009d60:	4602      	mov	r2, r0
 8009d62:	460b      	mov	r3, r1
 8009d64:	4630      	mov	r0, r6
 8009d66:	4639      	mov	r1, r7
 8009d68:	f7f6 f9fe 	bl	8000168 <__aeabi_dsub>
 8009d6c:	a332      	add	r3, pc, #200	; (adr r3, 8009e38 <__ieee754_pow+0x720>)
 8009d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d72:	f7f6 fbb1 	bl	80004d8 <__aeabi_dmul>
 8009d76:	a332      	add	r3, pc, #200	; (adr r3, 8009e40 <__ieee754_pow+0x728>)
 8009d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7c:	4606      	mov	r6, r0
 8009d7e:	460f      	mov	r7, r1
 8009d80:	4620      	mov	r0, r4
 8009d82:	4629      	mov	r1, r5
 8009d84:	f7f6 fba8 	bl	80004d8 <__aeabi_dmul>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	4639      	mov	r1, r7
 8009d90:	f7f6 f9ec 	bl	800016c <__adddf3>
 8009d94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d96:	4b33      	ldr	r3, [pc, #204]	; (8009e64 <__ieee754_pow+0x74c>)
 8009d98:	f04f 0a00 	mov.w	sl, #0
 8009d9c:	4413      	add	r3, r2
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	f7f6 f9e3 	bl	800016c <__adddf3>
 8009da6:	4680      	mov	r8, r0
 8009da8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009daa:	4689      	mov	r9, r1
 8009dac:	f7f6 fb2a 	bl	8000404 <__aeabi_i2d>
 8009db0:	4604      	mov	r4, r0
 8009db2:	460d      	mov	r5, r1
 8009db4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009db6:	4b2c      	ldr	r3, [pc, #176]	; (8009e68 <__ieee754_pow+0x750>)
 8009db8:	4413      	add	r3, r2
 8009dba:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009dbe:	4642      	mov	r2, r8
 8009dc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dc4:	464b      	mov	r3, r9
 8009dc6:	f7f6 f9d1 	bl	800016c <__adddf3>
 8009dca:	4632      	mov	r2, r6
 8009dcc:	463b      	mov	r3, r7
 8009dce:	f7f6 f9cd 	bl	800016c <__adddf3>
 8009dd2:	4622      	mov	r2, r4
 8009dd4:	462b      	mov	r3, r5
 8009dd6:	f7f6 f9c9 	bl	800016c <__adddf3>
 8009dda:	4622      	mov	r2, r4
 8009ddc:	462b      	mov	r3, r5
 8009dde:	4650      	mov	r0, sl
 8009de0:	468b      	mov	fp, r1
 8009de2:	f7f6 f9c1 	bl	8000168 <__aeabi_dsub>
 8009de6:	4632      	mov	r2, r6
 8009de8:	463b      	mov	r3, r7
 8009dea:	f7f6 f9bd 	bl	8000168 <__aeabi_dsub>
 8009dee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009df2:	f7f6 f9b9 	bl	8000168 <__aeabi_dsub>
 8009df6:	4602      	mov	r2, r0
 8009df8:	460b      	mov	r3, r1
 8009dfa:	4640      	mov	r0, r8
 8009dfc:	4649      	mov	r1, r9
 8009dfe:	e60d      	b.n	8009a1c <__ieee754_pow+0x304>
 8009e00:	4a454eef 	.word	0x4a454eef
 8009e04:	3fca7e28 	.word	0x3fca7e28
 8009e08:	93c9db65 	.word	0x93c9db65
 8009e0c:	3fcd864a 	.word	0x3fcd864a
 8009e10:	a91d4101 	.word	0xa91d4101
 8009e14:	3fd17460 	.word	0x3fd17460
 8009e18:	518f264d 	.word	0x518f264d
 8009e1c:	3fd55555 	.word	0x3fd55555
 8009e20:	db6fabff 	.word	0xdb6fabff
 8009e24:	3fdb6db6 	.word	0x3fdb6db6
 8009e28:	33333303 	.word	0x33333303
 8009e2c:	3fe33333 	.word	0x3fe33333
 8009e30:	e0000000 	.word	0xe0000000
 8009e34:	3feec709 	.word	0x3feec709
 8009e38:	dc3a03fd 	.word	0xdc3a03fd
 8009e3c:	3feec709 	.word	0x3feec709
 8009e40:	145b01f5 	.word	0x145b01f5
 8009e44:	be3e2fe0 	.word	0xbe3e2fe0
 8009e48:	7ff00000 	.word	0x7ff00000
 8009e4c:	43400000 	.word	0x43400000
 8009e50:	0003988e 	.word	0x0003988e
 8009e54:	000bb679 	.word	0x000bb679
 8009e58:	0800b6a0 	.word	0x0800b6a0
 8009e5c:	3ff00000 	.word	0x3ff00000
 8009e60:	40080000 	.word	0x40080000
 8009e64:	0800b6c0 	.word	0x0800b6c0
 8009e68:	0800b6b0 	.word	0x0800b6b0
 8009e6c:	2601      	movs	r6, #1
 8009e6e:	e66a      	b.n	8009b46 <__ieee754_pow+0x42e>
 8009e70:	a39d      	add	r3, pc, #628	; (adr r3, 800a0e8 <__ieee754_pow+0x9d0>)
 8009e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e76:	4640      	mov	r0, r8
 8009e78:	4649      	mov	r1, r9
 8009e7a:	f7f6 f977 	bl	800016c <__adddf3>
 8009e7e:	4622      	mov	r2, r4
 8009e80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e84:	462b      	mov	r3, r5
 8009e86:	4650      	mov	r0, sl
 8009e88:	4639      	mov	r1, r7
 8009e8a:	f7f6 f96d 	bl	8000168 <__aeabi_dsub>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	460b      	mov	r3, r1
 8009e92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e96:	f7f6 fdaf 	bl	80009f8 <__aeabi_dcmpgt>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	f47f ae09 	bne.w	8009ab2 <__ieee754_pow+0x39a>
 8009ea0:	4aa3      	ldr	r2, [pc, #652]	; (800a130 <__ieee754_pow+0xa18>)
 8009ea2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	f340 8101 	ble.w	800a0ae <__ieee754_pow+0x996>
 8009eac:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	151b      	asrs	r3, r3, #20
 8009eb4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009eb8:	fa4a f303 	asr.w	r3, sl, r3
 8009ebc:	4433      	add	r3, r6
 8009ebe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009ec2:	4f9c      	ldr	r7, [pc, #624]	; (800a134 <__ieee754_pow+0xa1c>)
 8009ec4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009ec8:	4117      	asrs	r7, r2
 8009eca:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009ece:	ea23 0107 	bic.w	r1, r3, r7
 8009ed2:	f1c2 0214 	rsb	r2, r2, #20
 8009ed6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009eda:	460b      	mov	r3, r1
 8009edc:	fa4a fa02 	asr.w	sl, sl, r2
 8009ee0:	2e00      	cmp	r6, #0
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	bfb8      	it	lt
 8009eea:	f1ca 0a00 	rsblt	sl, sl, #0
 8009eee:	f7f6 f93b 	bl	8000168 <__aeabi_dsub>
 8009ef2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009efa:	2400      	movs	r4, #0
 8009efc:	4642      	mov	r2, r8
 8009efe:	464b      	mov	r3, r9
 8009f00:	f7f6 f934 	bl	800016c <__adddf3>
 8009f04:	a37a      	add	r3, pc, #488	; (adr r3, 800a0f0 <__ieee754_pow+0x9d8>)
 8009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	460d      	mov	r5, r1
 8009f0e:	f7f6 fae3 	bl	80004d8 <__aeabi_dmul>
 8009f12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f16:	4606      	mov	r6, r0
 8009f18:	460f      	mov	r7, r1
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	4629      	mov	r1, r5
 8009f1e:	f7f6 f923 	bl	8000168 <__aeabi_dsub>
 8009f22:	4602      	mov	r2, r0
 8009f24:	460b      	mov	r3, r1
 8009f26:	4640      	mov	r0, r8
 8009f28:	4649      	mov	r1, r9
 8009f2a:	f7f6 f91d 	bl	8000168 <__aeabi_dsub>
 8009f2e:	a372      	add	r3, pc, #456	; (adr r3, 800a0f8 <__ieee754_pow+0x9e0>)
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	f7f6 fad0 	bl	80004d8 <__aeabi_dmul>
 8009f38:	a371      	add	r3, pc, #452	; (adr r3, 800a100 <__ieee754_pow+0x9e8>)
 8009f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3e:	4680      	mov	r8, r0
 8009f40:	4689      	mov	r9, r1
 8009f42:	4620      	mov	r0, r4
 8009f44:	4629      	mov	r1, r5
 8009f46:	f7f6 fac7 	bl	80004d8 <__aeabi_dmul>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	4640      	mov	r0, r8
 8009f50:	4649      	mov	r1, r9
 8009f52:	f7f6 f90b 	bl	800016c <__adddf3>
 8009f56:	4604      	mov	r4, r0
 8009f58:	460d      	mov	r5, r1
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	4630      	mov	r0, r6
 8009f60:	4639      	mov	r1, r7
 8009f62:	f7f6 f903 	bl	800016c <__adddf3>
 8009f66:	4632      	mov	r2, r6
 8009f68:	463b      	mov	r3, r7
 8009f6a:	4680      	mov	r8, r0
 8009f6c:	4689      	mov	r9, r1
 8009f6e:	f7f6 f8fb 	bl	8000168 <__aeabi_dsub>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4620      	mov	r0, r4
 8009f78:	4629      	mov	r1, r5
 8009f7a:	f7f6 f8f5 	bl	8000168 <__aeabi_dsub>
 8009f7e:	4642      	mov	r2, r8
 8009f80:	4606      	mov	r6, r0
 8009f82:	460f      	mov	r7, r1
 8009f84:	464b      	mov	r3, r9
 8009f86:	4640      	mov	r0, r8
 8009f88:	4649      	mov	r1, r9
 8009f8a:	f7f6 faa5 	bl	80004d8 <__aeabi_dmul>
 8009f8e:	a35e      	add	r3, pc, #376	; (adr r3, 800a108 <__ieee754_pow+0x9f0>)
 8009f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f94:	4604      	mov	r4, r0
 8009f96:	460d      	mov	r5, r1
 8009f98:	f7f6 fa9e 	bl	80004d8 <__aeabi_dmul>
 8009f9c:	a35c      	add	r3, pc, #368	; (adr r3, 800a110 <__ieee754_pow+0x9f8>)
 8009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa2:	f7f6 f8e1 	bl	8000168 <__aeabi_dsub>
 8009fa6:	4622      	mov	r2, r4
 8009fa8:	462b      	mov	r3, r5
 8009faa:	f7f6 fa95 	bl	80004d8 <__aeabi_dmul>
 8009fae:	a35a      	add	r3, pc, #360	; (adr r3, 800a118 <__ieee754_pow+0xa00>)
 8009fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb4:	f7f6 f8da 	bl	800016c <__adddf3>
 8009fb8:	4622      	mov	r2, r4
 8009fba:	462b      	mov	r3, r5
 8009fbc:	f7f6 fa8c 	bl	80004d8 <__aeabi_dmul>
 8009fc0:	a357      	add	r3, pc, #348	; (adr r3, 800a120 <__ieee754_pow+0xa08>)
 8009fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc6:	f7f6 f8cf 	bl	8000168 <__aeabi_dsub>
 8009fca:	4622      	mov	r2, r4
 8009fcc:	462b      	mov	r3, r5
 8009fce:	f7f6 fa83 	bl	80004d8 <__aeabi_dmul>
 8009fd2:	a355      	add	r3, pc, #340	; (adr r3, 800a128 <__ieee754_pow+0xa10>)
 8009fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd8:	f7f6 f8c8 	bl	800016c <__adddf3>
 8009fdc:	4622      	mov	r2, r4
 8009fde:	462b      	mov	r3, r5
 8009fe0:	f7f6 fa7a 	bl	80004d8 <__aeabi_dmul>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	4640      	mov	r0, r8
 8009fea:	4649      	mov	r1, r9
 8009fec:	f7f6 f8bc 	bl	8000168 <__aeabi_dsub>
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	460d      	mov	r5, r1
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	4640      	mov	r0, r8
 8009ffa:	4649      	mov	r1, r9
 8009ffc:	f7f6 fa6c 	bl	80004d8 <__aeabi_dmul>
 800a000:	2200      	movs	r2, #0
 800a002:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a00a:	4620      	mov	r0, r4
 800a00c:	4629      	mov	r1, r5
 800a00e:	f7f6 f8ab 	bl	8000168 <__aeabi_dsub>
 800a012:	4602      	mov	r2, r0
 800a014:	460b      	mov	r3, r1
 800a016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a01a:	f7f6 fb87 	bl	800072c <__aeabi_ddiv>
 800a01e:	4632      	mov	r2, r6
 800a020:	4604      	mov	r4, r0
 800a022:	460d      	mov	r5, r1
 800a024:	463b      	mov	r3, r7
 800a026:	4640      	mov	r0, r8
 800a028:	4649      	mov	r1, r9
 800a02a:	f7f6 fa55 	bl	80004d8 <__aeabi_dmul>
 800a02e:	4632      	mov	r2, r6
 800a030:	463b      	mov	r3, r7
 800a032:	f7f6 f89b 	bl	800016c <__adddf3>
 800a036:	4602      	mov	r2, r0
 800a038:	460b      	mov	r3, r1
 800a03a:	4620      	mov	r0, r4
 800a03c:	4629      	mov	r1, r5
 800a03e:	f7f6 f893 	bl	8000168 <__aeabi_dsub>
 800a042:	4642      	mov	r2, r8
 800a044:	464b      	mov	r3, r9
 800a046:	f7f6 f88f 	bl	8000168 <__aeabi_dsub>
 800a04a:	4602      	mov	r2, r0
 800a04c:	460b      	mov	r3, r1
 800a04e:	2000      	movs	r0, #0
 800a050:	4939      	ldr	r1, [pc, #228]	; (800a138 <__ieee754_pow+0xa20>)
 800a052:	f7f6 f889 	bl	8000168 <__aeabi_dsub>
 800a056:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a05a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a05e:	da29      	bge.n	800a0b4 <__ieee754_pow+0x99c>
 800a060:	4652      	mov	r2, sl
 800a062:	f001 f88d 	bl	800b180 <scalbn>
 800a066:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a06a:	f7ff bbfe 	b.w	800986a <__ieee754_pow+0x152>
 800a06e:	4b33      	ldr	r3, [pc, #204]	; (800a13c <__ieee754_pow+0xa24>)
 800a070:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a074:	429f      	cmp	r7, r3
 800a076:	f77f af13 	ble.w	8009ea0 <__ieee754_pow+0x788>
 800a07a:	4b31      	ldr	r3, [pc, #196]	; (800a140 <__ieee754_pow+0xa28>)
 800a07c:	440b      	add	r3, r1
 800a07e:	4303      	orrs	r3, r0
 800a080:	d009      	beq.n	800a096 <__ieee754_pow+0x97e>
 800a082:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a086:	2200      	movs	r2, #0
 800a088:	2300      	movs	r3, #0
 800a08a:	f7f6 fc97 	bl	80009bc <__aeabi_dcmplt>
 800a08e:	3800      	subs	r0, #0
 800a090:	bf18      	it	ne
 800a092:	2001      	movne	r0, #1
 800a094:	e453      	b.n	800993e <__ieee754_pow+0x226>
 800a096:	4622      	mov	r2, r4
 800a098:	462b      	mov	r3, r5
 800a09a:	f7f6 f865 	bl	8000168 <__aeabi_dsub>
 800a09e:	4642      	mov	r2, r8
 800a0a0:	464b      	mov	r3, r9
 800a0a2:	f7f6 fc9f 	bl	80009e4 <__aeabi_dcmpge>
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	f43f aefa 	beq.w	8009ea0 <__ieee754_pow+0x788>
 800a0ac:	e7e9      	b.n	800a082 <__ieee754_pow+0x96a>
 800a0ae:	f04f 0a00 	mov.w	sl, #0
 800a0b2:	e720      	b.n	8009ef6 <__ieee754_pow+0x7de>
 800a0b4:	4621      	mov	r1, r4
 800a0b6:	e7d6      	b.n	800a066 <__ieee754_pow+0x94e>
 800a0b8:	f04f 0b00 	mov.w	fp, #0
 800a0bc:	f8df c078 	ldr.w	ip, [pc, #120]	; 800a138 <__ieee754_pow+0xa20>
 800a0c0:	f7ff bbba 	b.w	8009838 <__ieee754_pow+0x120>
 800a0c4:	f04f 0b00 	mov.w	fp, #0
 800a0c8:	f04f 0c00 	mov.w	ip, #0
 800a0cc:	f7ff bbb4 	b.w	8009838 <__ieee754_pow+0x120>
 800a0d0:	4640      	mov	r0, r8
 800a0d2:	4649      	mov	r1, r9
 800a0d4:	f7ff bb3d 	b.w	8009752 <__ieee754_pow+0x3a>
 800a0d8:	9200      	str	r2, [sp, #0]
 800a0da:	f7ff bb89 	b.w	80097f0 <__ieee754_pow+0xd8>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	f7ff bb73 	b.w	80097ca <__ieee754_pow+0xb2>
 800a0e4:	f3af 8000 	nop.w
 800a0e8:	652b82fe 	.word	0x652b82fe
 800a0ec:	3c971547 	.word	0x3c971547
 800a0f0:	00000000 	.word	0x00000000
 800a0f4:	3fe62e43 	.word	0x3fe62e43
 800a0f8:	fefa39ef 	.word	0xfefa39ef
 800a0fc:	3fe62e42 	.word	0x3fe62e42
 800a100:	0ca86c39 	.word	0x0ca86c39
 800a104:	be205c61 	.word	0xbe205c61
 800a108:	72bea4d0 	.word	0x72bea4d0
 800a10c:	3e663769 	.word	0x3e663769
 800a110:	c5d26bf1 	.word	0xc5d26bf1
 800a114:	3ebbbd41 	.word	0x3ebbbd41
 800a118:	af25de2c 	.word	0xaf25de2c
 800a11c:	3f11566a 	.word	0x3f11566a
 800a120:	16bebd93 	.word	0x16bebd93
 800a124:	3f66c16c 	.word	0x3f66c16c
 800a128:	5555553e 	.word	0x5555553e
 800a12c:	3fc55555 	.word	0x3fc55555
 800a130:	3fe00000 	.word	0x3fe00000
 800a134:	000fffff 	.word	0x000fffff
 800a138:	3ff00000 	.word	0x3ff00000
 800a13c:	4090cbff 	.word	0x4090cbff
 800a140:	3f6f3400 	.word	0x3f6f3400
 800a144:	00000000 	.word	0x00000000

0800a148 <__ieee754_rem_pio2>:
 800a148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14c:	4614      	mov	r4, r2
 800a14e:	4ac4      	ldr	r2, [pc, #784]	; (800a460 <__ieee754_rem_pio2+0x318>)
 800a150:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800a154:	b08d      	sub	sp, #52	; 0x34
 800a156:	4592      	cmp	sl, r2
 800a158:	9104      	str	r1, [sp, #16]
 800a15a:	dc07      	bgt.n	800a16c <__ieee754_rem_pio2+0x24>
 800a15c:	2200      	movs	r2, #0
 800a15e:	2300      	movs	r3, #0
 800a160:	e9c4 0100 	strd	r0, r1, [r4]
 800a164:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a168:	2500      	movs	r5, #0
 800a16a:	e024      	b.n	800a1b6 <__ieee754_rem_pio2+0x6e>
 800a16c:	4abd      	ldr	r2, [pc, #756]	; (800a464 <__ieee754_rem_pio2+0x31c>)
 800a16e:	4592      	cmp	sl, r2
 800a170:	dc72      	bgt.n	800a258 <__ieee754_rem_pio2+0x110>
 800a172:	9b04      	ldr	r3, [sp, #16]
 800a174:	4dbc      	ldr	r5, [pc, #752]	; (800a468 <__ieee754_rem_pio2+0x320>)
 800a176:	2b00      	cmp	r3, #0
 800a178:	a3ab      	add	r3, pc, #684	; (adr r3, 800a428 <__ieee754_rem_pio2+0x2e0>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	dd36      	ble.n	800a1ee <__ieee754_rem_pio2+0xa6>
 800a180:	f7f5 fff2 	bl	8000168 <__aeabi_dsub>
 800a184:	45aa      	cmp	sl, r5
 800a186:	4606      	mov	r6, r0
 800a188:	460f      	mov	r7, r1
 800a18a:	d018      	beq.n	800a1be <__ieee754_rem_pio2+0x76>
 800a18c:	a3a8      	add	r3, pc, #672	; (adr r3, 800a430 <__ieee754_rem_pio2+0x2e8>)
 800a18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a192:	f7f5 ffe9 	bl	8000168 <__aeabi_dsub>
 800a196:	4602      	mov	r2, r0
 800a198:	460b      	mov	r3, r1
 800a19a:	4630      	mov	r0, r6
 800a19c:	e9c4 2300 	strd	r2, r3, [r4]
 800a1a0:	4639      	mov	r1, r7
 800a1a2:	f7f5 ffe1 	bl	8000168 <__aeabi_dsub>
 800a1a6:	a3a2      	add	r3, pc, #648	; (adr r3, 800a430 <__ieee754_rem_pio2+0x2e8>)
 800a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ac:	f7f5 ffdc 	bl	8000168 <__aeabi_dsub>
 800a1b0:	2501      	movs	r5, #1
 800a1b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	b00d      	add	sp, #52	; 0x34
 800a1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1be:	a39e      	add	r3, pc, #632	; (adr r3, 800a438 <__ieee754_rem_pio2+0x2f0>)
 800a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c4:	f7f5 ffd0 	bl	8000168 <__aeabi_dsub>
 800a1c8:	a39d      	add	r3, pc, #628	; (adr r3, 800a440 <__ieee754_rem_pio2+0x2f8>)
 800a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ce:	4606      	mov	r6, r0
 800a1d0:	460f      	mov	r7, r1
 800a1d2:	f7f5 ffc9 	bl	8000168 <__aeabi_dsub>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	460b      	mov	r3, r1
 800a1da:	4630      	mov	r0, r6
 800a1dc:	e9c4 2300 	strd	r2, r3, [r4]
 800a1e0:	4639      	mov	r1, r7
 800a1e2:	f7f5 ffc1 	bl	8000168 <__aeabi_dsub>
 800a1e6:	a396      	add	r3, pc, #600	; (adr r3, 800a440 <__ieee754_rem_pio2+0x2f8>)
 800a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ec:	e7de      	b.n	800a1ac <__ieee754_rem_pio2+0x64>
 800a1ee:	f7f5 ffbd 	bl	800016c <__adddf3>
 800a1f2:	45aa      	cmp	sl, r5
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	460f      	mov	r7, r1
 800a1f8:	d016      	beq.n	800a228 <__ieee754_rem_pio2+0xe0>
 800a1fa:	a38d      	add	r3, pc, #564	; (adr r3, 800a430 <__ieee754_rem_pio2+0x2e8>)
 800a1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a200:	f7f5 ffb4 	bl	800016c <__adddf3>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	4630      	mov	r0, r6
 800a20a:	e9c4 2300 	strd	r2, r3, [r4]
 800a20e:	4639      	mov	r1, r7
 800a210:	f7f5 ffaa 	bl	8000168 <__aeabi_dsub>
 800a214:	a386      	add	r3, pc, #536	; (adr r3, 800a430 <__ieee754_rem_pio2+0x2e8>)
 800a216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21a:	f7f5 ffa7 	bl	800016c <__adddf3>
 800a21e:	f04f 35ff 	mov.w	r5, #4294967295
 800a222:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a226:	e7c6      	b.n	800a1b6 <__ieee754_rem_pio2+0x6e>
 800a228:	a383      	add	r3, pc, #524	; (adr r3, 800a438 <__ieee754_rem_pio2+0x2f0>)
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	f7f5 ff9d 	bl	800016c <__adddf3>
 800a232:	a383      	add	r3, pc, #524	; (adr r3, 800a440 <__ieee754_rem_pio2+0x2f8>)
 800a234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a238:	4606      	mov	r6, r0
 800a23a:	460f      	mov	r7, r1
 800a23c:	f7f5 ff96 	bl	800016c <__adddf3>
 800a240:	4602      	mov	r2, r0
 800a242:	460b      	mov	r3, r1
 800a244:	4630      	mov	r0, r6
 800a246:	e9c4 2300 	strd	r2, r3, [r4]
 800a24a:	4639      	mov	r1, r7
 800a24c:	f7f5 ff8c 	bl	8000168 <__aeabi_dsub>
 800a250:	a37b      	add	r3, pc, #492	; (adr r3, 800a440 <__ieee754_rem_pio2+0x2f8>)
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	e7e0      	b.n	800a21a <__ieee754_rem_pio2+0xd2>
 800a258:	4a84      	ldr	r2, [pc, #528]	; (800a46c <__ieee754_rem_pio2+0x324>)
 800a25a:	4592      	cmp	sl, r2
 800a25c:	f300 80d5 	bgt.w	800a40a <__ieee754_rem_pio2+0x2c2>
 800a260:	f000 fefc 	bl	800b05c <fabs>
 800a264:	a378      	add	r3, pc, #480	; (adr r3, 800a448 <__ieee754_rem_pio2+0x300>)
 800a266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26a:	4606      	mov	r6, r0
 800a26c:	460f      	mov	r7, r1
 800a26e:	f7f6 f933 	bl	80004d8 <__aeabi_dmul>
 800a272:	2200      	movs	r2, #0
 800a274:	4b7e      	ldr	r3, [pc, #504]	; (800a470 <__ieee754_rem_pio2+0x328>)
 800a276:	f7f5 ff79 	bl	800016c <__adddf3>
 800a27a:	f7f6 fbdd 	bl	8000a38 <__aeabi_d2iz>
 800a27e:	4605      	mov	r5, r0
 800a280:	f7f6 f8c0 	bl	8000404 <__aeabi_i2d>
 800a284:	4602      	mov	r2, r0
 800a286:	460b      	mov	r3, r1
 800a288:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a28c:	a366      	add	r3, pc, #408	; (adr r3, 800a428 <__ieee754_rem_pio2+0x2e0>)
 800a28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a292:	f7f6 f921 	bl	80004d8 <__aeabi_dmul>
 800a296:	4602      	mov	r2, r0
 800a298:	460b      	mov	r3, r1
 800a29a:	4630      	mov	r0, r6
 800a29c:	4639      	mov	r1, r7
 800a29e:	f7f5 ff63 	bl	8000168 <__aeabi_dsub>
 800a2a2:	a363      	add	r3, pc, #396	; (adr r3, 800a430 <__ieee754_rem_pio2+0x2e8>)
 800a2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a8:	4680      	mov	r8, r0
 800a2aa:	4689      	mov	r9, r1
 800a2ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2b0:	f7f6 f912 	bl	80004d8 <__aeabi_dmul>
 800a2b4:	2d1f      	cmp	r5, #31
 800a2b6:	4606      	mov	r6, r0
 800a2b8:	460f      	mov	r7, r1
 800a2ba:	dc0e      	bgt.n	800a2da <__ieee754_rem_pio2+0x192>
 800a2bc:	4b6d      	ldr	r3, [pc, #436]	; (800a474 <__ieee754_rem_pio2+0x32c>)
 800a2be:	1e6a      	subs	r2, r5, #1
 800a2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2c4:	4553      	cmp	r3, sl
 800a2c6:	d008      	beq.n	800a2da <__ieee754_rem_pio2+0x192>
 800a2c8:	4632      	mov	r2, r6
 800a2ca:	463b      	mov	r3, r7
 800a2cc:	4640      	mov	r0, r8
 800a2ce:	4649      	mov	r1, r9
 800a2d0:	f7f5 ff4a 	bl	8000168 <__aeabi_dsub>
 800a2d4:	e9c4 0100 	strd	r0, r1, [r4]
 800a2d8:	e013      	b.n	800a302 <__ieee754_rem_pio2+0x1ba>
 800a2da:	463b      	mov	r3, r7
 800a2dc:	4632      	mov	r2, r6
 800a2de:	4640      	mov	r0, r8
 800a2e0:	4649      	mov	r1, r9
 800a2e2:	f7f5 ff41 	bl	8000168 <__aeabi_dsub>
 800a2e6:	ea4f 532a 	mov.w	r3, sl, asr #20
 800a2ea:	9305      	str	r3, [sp, #20]
 800a2ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a2f0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800a2f4:	f1ba 0f10 	cmp.w	sl, #16
 800a2f8:	dc1f      	bgt.n	800a33a <__ieee754_rem_pio2+0x1f2>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	e9c4 2300 	strd	r2, r3, [r4]
 800a302:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800a306:	4640      	mov	r0, r8
 800a308:	4653      	mov	r3, sl
 800a30a:	4649      	mov	r1, r9
 800a30c:	f7f5 ff2c 	bl	8000168 <__aeabi_dsub>
 800a310:	4632      	mov	r2, r6
 800a312:	463b      	mov	r3, r7
 800a314:	f7f5 ff28 	bl	8000168 <__aeabi_dsub>
 800a318:	460b      	mov	r3, r1
 800a31a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a31e:	9904      	ldr	r1, [sp, #16]
 800a320:	4602      	mov	r2, r0
 800a322:	2900      	cmp	r1, #0
 800a324:	f6bf af47 	bge.w	800a1b6 <__ieee754_rem_pio2+0x6e>
 800a328:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800a32c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a330:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a334:	60e3      	str	r3, [r4, #12]
 800a336:	426d      	negs	r5, r5
 800a338:	e73d      	b.n	800a1b6 <__ieee754_rem_pio2+0x6e>
 800a33a:	a33f      	add	r3, pc, #252	; (adr r3, 800a438 <__ieee754_rem_pio2+0x2f0>)
 800a33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a340:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a344:	f7f6 f8c8 	bl	80004d8 <__aeabi_dmul>
 800a348:	4606      	mov	r6, r0
 800a34a:	460f      	mov	r7, r1
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4640      	mov	r0, r8
 800a352:	4649      	mov	r1, r9
 800a354:	f7f5 ff08 	bl	8000168 <__aeabi_dsub>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	4682      	mov	sl, r0
 800a35e:	468b      	mov	fp, r1
 800a360:	4640      	mov	r0, r8
 800a362:	4649      	mov	r1, r9
 800a364:	f7f5 ff00 	bl	8000168 <__aeabi_dsub>
 800a368:	4632      	mov	r2, r6
 800a36a:	463b      	mov	r3, r7
 800a36c:	f7f5 fefc 	bl	8000168 <__aeabi_dsub>
 800a370:	a333      	add	r3, pc, #204	; (adr r3, 800a440 <__ieee754_rem_pio2+0x2f8>)
 800a372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a376:	4606      	mov	r6, r0
 800a378:	460f      	mov	r7, r1
 800a37a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a37e:	f7f6 f8ab 	bl	80004d8 <__aeabi_dmul>
 800a382:	4632      	mov	r2, r6
 800a384:	463b      	mov	r3, r7
 800a386:	f7f5 feef 	bl	8000168 <__aeabi_dsub>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	4606      	mov	r6, r0
 800a390:	460f      	mov	r7, r1
 800a392:	4650      	mov	r0, sl
 800a394:	4659      	mov	r1, fp
 800a396:	f7f5 fee7 	bl	8000168 <__aeabi_dsub>
 800a39a:	9a05      	ldr	r2, [sp, #20]
 800a39c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	2b31      	cmp	r3, #49	; 0x31
 800a3a4:	dc06      	bgt.n	800a3b4 <__ieee754_rem_pio2+0x26c>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	46d0      	mov	r8, sl
 800a3ac:	46d9      	mov	r9, fp
 800a3ae:	e9c4 2300 	strd	r2, r3, [r4]
 800a3b2:	e7a6      	b.n	800a302 <__ieee754_rem_pio2+0x1ba>
 800a3b4:	a326      	add	r3, pc, #152	; (adr r3, 800a450 <__ieee754_rem_pio2+0x308>)
 800a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3be:	f7f6 f88b 	bl	80004d8 <__aeabi_dmul>
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	460f      	mov	r7, r1
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	4650      	mov	r0, sl
 800a3cc:	4659      	mov	r1, fp
 800a3ce:	f7f5 fecb 	bl	8000168 <__aeabi_dsub>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	4680      	mov	r8, r0
 800a3d8:	4689      	mov	r9, r1
 800a3da:	4650      	mov	r0, sl
 800a3dc:	4659      	mov	r1, fp
 800a3de:	f7f5 fec3 	bl	8000168 <__aeabi_dsub>
 800a3e2:	4632      	mov	r2, r6
 800a3e4:	463b      	mov	r3, r7
 800a3e6:	f7f5 febf 	bl	8000168 <__aeabi_dsub>
 800a3ea:	a31b      	add	r3, pc, #108	; (adr r3, 800a458 <__ieee754_rem_pio2+0x310>)
 800a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f0:	4606      	mov	r6, r0
 800a3f2:	460f      	mov	r7, r1
 800a3f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3f8:	f7f6 f86e 	bl	80004d8 <__aeabi_dmul>
 800a3fc:	4632      	mov	r2, r6
 800a3fe:	463b      	mov	r3, r7
 800a400:	f7f5 feb2 	bl	8000168 <__aeabi_dsub>
 800a404:	4606      	mov	r6, r0
 800a406:	460f      	mov	r7, r1
 800a408:	e75e      	b.n	800a2c8 <__ieee754_rem_pio2+0x180>
 800a40a:	4a1b      	ldr	r2, [pc, #108]	; (800a478 <__ieee754_rem_pio2+0x330>)
 800a40c:	4592      	cmp	sl, r2
 800a40e:	dd35      	ble.n	800a47c <__ieee754_rem_pio2+0x334>
 800a410:	4602      	mov	r2, r0
 800a412:	460b      	mov	r3, r1
 800a414:	f7f5 fea8 	bl	8000168 <__aeabi_dsub>
 800a418:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a41c:	e9c4 0100 	strd	r0, r1, [r4]
 800a420:	e6a2      	b.n	800a168 <__ieee754_rem_pio2+0x20>
 800a422:	bf00      	nop
 800a424:	f3af 8000 	nop.w
 800a428:	54400000 	.word	0x54400000
 800a42c:	3ff921fb 	.word	0x3ff921fb
 800a430:	1a626331 	.word	0x1a626331
 800a434:	3dd0b461 	.word	0x3dd0b461
 800a438:	1a600000 	.word	0x1a600000
 800a43c:	3dd0b461 	.word	0x3dd0b461
 800a440:	2e037073 	.word	0x2e037073
 800a444:	3ba3198a 	.word	0x3ba3198a
 800a448:	6dc9c883 	.word	0x6dc9c883
 800a44c:	3fe45f30 	.word	0x3fe45f30
 800a450:	2e000000 	.word	0x2e000000
 800a454:	3ba3198a 	.word	0x3ba3198a
 800a458:	252049c1 	.word	0x252049c1
 800a45c:	397b839a 	.word	0x397b839a
 800a460:	3fe921fb 	.word	0x3fe921fb
 800a464:	4002d97b 	.word	0x4002d97b
 800a468:	3ff921fb 	.word	0x3ff921fb
 800a46c:	413921fb 	.word	0x413921fb
 800a470:	3fe00000 	.word	0x3fe00000
 800a474:	0800b6d0 	.word	0x0800b6d0
 800a478:	7fefffff 	.word	0x7fefffff
 800a47c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800a480:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800a484:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800a488:	460f      	mov	r7, r1
 800a48a:	4606      	mov	r6, r0
 800a48c:	f7f6 fad4 	bl	8000a38 <__aeabi_d2iz>
 800a490:	f7f5 ffb8 	bl	8000404 <__aeabi_i2d>
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	4630      	mov	r0, r6
 800a49a:	4639      	mov	r1, r7
 800a49c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a4a0:	f7f5 fe62 	bl	8000168 <__aeabi_dsub>
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	4b22      	ldr	r3, [pc, #136]	; (800a530 <__ieee754_rem_pio2+0x3e8>)
 800a4a8:	f7f6 f816 	bl	80004d8 <__aeabi_dmul>
 800a4ac:	460f      	mov	r7, r1
 800a4ae:	4606      	mov	r6, r0
 800a4b0:	f7f6 fac2 	bl	8000a38 <__aeabi_d2iz>
 800a4b4:	f7f5 ffa6 	bl	8000404 <__aeabi_i2d>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4630      	mov	r0, r6
 800a4be:	4639      	mov	r1, r7
 800a4c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a4c4:	f7f5 fe50 	bl	8000168 <__aeabi_dsub>
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	4b19      	ldr	r3, [pc, #100]	; (800a530 <__ieee754_rem_pio2+0x3e8>)
 800a4cc:	f7f6 f804 	bl	80004d8 <__aeabi_dmul>
 800a4d0:	f04f 0803 	mov.w	r8, #3
 800a4d4:	2600      	movs	r6, #0
 800a4d6:	2700      	movs	r7, #0
 800a4d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a4dc:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800a4e0:	4632      	mov	r2, r6
 800a4e2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800a4e6:	463b      	mov	r3, r7
 800a4e8:	46c2      	mov	sl, r8
 800a4ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800a4ee:	f7f6 fa5b 	bl	80009a8 <__aeabi_dcmpeq>
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	d1f4      	bne.n	800a4e0 <__ieee754_rem_pio2+0x398>
 800a4f6:	4b0f      	ldr	r3, [pc, #60]	; (800a534 <__ieee754_rem_pio2+0x3ec>)
 800a4f8:	462a      	mov	r2, r5
 800a4fa:	9301      	str	r3, [sp, #4]
 800a4fc:	2302      	movs	r3, #2
 800a4fe:	4621      	mov	r1, r4
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	a806      	add	r0, sp, #24
 800a504:	4653      	mov	r3, sl
 800a506:	f000 f985 	bl	800a814 <__kernel_rem_pio2>
 800a50a:	9b04      	ldr	r3, [sp, #16]
 800a50c:	4605      	mov	r5, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f6bf ae51 	bge.w	800a1b6 <__ieee754_rem_pio2+0x6e>
 800a514:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a518:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a51c:	e9c4 2300 	strd	r2, r3, [r4]
 800a520:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a524:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a528:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a52c:	e703      	b.n	800a336 <__ieee754_rem_pio2+0x1ee>
 800a52e:	bf00      	nop
 800a530:	41700000 	.word	0x41700000
 800a534:	0800b750 	.word	0x0800b750

0800a538 <__ieee754_sqrt>:
 800a538:	f8df c158 	ldr.w	ip, [pc, #344]	; 800a694 <__ieee754_sqrt+0x15c>
 800a53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a540:	ea3c 0c01 	bics.w	ip, ip, r1
 800a544:	4606      	mov	r6, r0
 800a546:	460d      	mov	r5, r1
 800a548:	460c      	mov	r4, r1
 800a54a:	460a      	mov	r2, r1
 800a54c:	4607      	mov	r7, r0
 800a54e:	4603      	mov	r3, r0
 800a550:	d10f      	bne.n	800a572 <__ieee754_sqrt+0x3a>
 800a552:	4602      	mov	r2, r0
 800a554:	460b      	mov	r3, r1
 800a556:	f7f5 ffbf 	bl	80004d8 <__aeabi_dmul>
 800a55a:	4602      	mov	r2, r0
 800a55c:	460b      	mov	r3, r1
 800a55e:	4630      	mov	r0, r6
 800a560:	4629      	mov	r1, r5
 800a562:	f7f5 fe03 	bl	800016c <__adddf3>
 800a566:	4606      	mov	r6, r0
 800a568:	460d      	mov	r5, r1
 800a56a:	4630      	mov	r0, r6
 800a56c:	4629      	mov	r1, r5
 800a56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a572:	2900      	cmp	r1, #0
 800a574:	dc0e      	bgt.n	800a594 <__ieee754_sqrt+0x5c>
 800a576:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a57a:	ea5c 0707 	orrs.w	r7, ip, r7
 800a57e:	d0f4      	beq.n	800a56a <__ieee754_sqrt+0x32>
 800a580:	b141      	cbz	r1, 800a594 <__ieee754_sqrt+0x5c>
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	f7f5 fdef 	bl	8000168 <__aeabi_dsub>
 800a58a:	4602      	mov	r2, r0
 800a58c:	460b      	mov	r3, r1
 800a58e:	f7f6 f8cd 	bl	800072c <__aeabi_ddiv>
 800a592:	e7e8      	b.n	800a566 <__ieee754_sqrt+0x2e>
 800a594:	1521      	asrs	r1, r4, #20
 800a596:	d075      	beq.n	800a684 <__ieee754_sqrt+0x14c>
 800a598:	07cc      	lsls	r4, r1, #31
 800a59a:	f04f 0400 	mov.w	r4, #0
 800a59e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a5a2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800a5a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a5aa:	bf5e      	ittt	pl
 800a5ac:	0fd9      	lsrpl	r1, r3, #31
 800a5ae:	005b      	lslpl	r3, r3, #1
 800a5b0:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800a5b4:	0fd9      	lsrs	r1, r3, #31
 800a5b6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a5ba:	2516      	movs	r5, #22
 800a5bc:	4620      	mov	r0, r4
 800a5be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5c2:	107f      	asrs	r7, r7, #1
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	1846      	adds	r6, r0, r1
 800a5c8:	4296      	cmp	r6, r2
 800a5ca:	bfde      	ittt	le
 800a5cc:	1b92      	suble	r2, r2, r6
 800a5ce:	1870      	addle	r0, r6, r1
 800a5d0:	1864      	addle	r4, r4, r1
 800a5d2:	0052      	lsls	r2, r2, #1
 800a5d4:	3d01      	subs	r5, #1
 800a5d6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a5da:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a5de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a5e2:	d1f0      	bne.n	800a5c6 <__ieee754_sqrt+0x8e>
 800a5e4:	4629      	mov	r1, r5
 800a5e6:	f04f 0e20 	mov.w	lr, #32
 800a5ea:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a5ee:	4282      	cmp	r2, r0
 800a5f0:	eb06 0c05 	add.w	ip, r6, r5
 800a5f4:	dc02      	bgt.n	800a5fc <__ieee754_sqrt+0xc4>
 800a5f6:	d113      	bne.n	800a620 <__ieee754_sqrt+0xe8>
 800a5f8:	459c      	cmp	ip, r3
 800a5fa:	d811      	bhi.n	800a620 <__ieee754_sqrt+0xe8>
 800a5fc:	f1bc 0f00 	cmp.w	ip, #0
 800a600:	eb0c 0506 	add.w	r5, ip, r6
 800a604:	da43      	bge.n	800a68e <__ieee754_sqrt+0x156>
 800a606:	2d00      	cmp	r5, #0
 800a608:	db41      	blt.n	800a68e <__ieee754_sqrt+0x156>
 800a60a:	f100 0801 	add.w	r8, r0, #1
 800a60e:	1a12      	subs	r2, r2, r0
 800a610:	4640      	mov	r0, r8
 800a612:	459c      	cmp	ip, r3
 800a614:	bf88      	it	hi
 800a616:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a61a:	eba3 030c 	sub.w	r3, r3, ip
 800a61e:	4431      	add	r1, r6
 800a620:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a624:	f1be 0e01 	subs.w	lr, lr, #1
 800a628:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800a62c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a630:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a634:	d1db      	bne.n	800a5ee <__ieee754_sqrt+0xb6>
 800a636:	4313      	orrs	r3, r2
 800a638:	d006      	beq.n	800a648 <__ieee754_sqrt+0x110>
 800a63a:	1c48      	adds	r0, r1, #1
 800a63c:	bf0b      	itete	eq
 800a63e:	4671      	moveq	r1, lr
 800a640:	3101      	addne	r1, #1
 800a642:	3401      	addeq	r4, #1
 800a644:	f021 0101 	bicne.w	r1, r1, #1
 800a648:	1063      	asrs	r3, r4, #1
 800a64a:	0849      	lsrs	r1, r1, #1
 800a64c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a650:	07e2      	lsls	r2, r4, #31
 800a652:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a656:	bf48      	it	mi
 800a658:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a65c:	460e      	mov	r6, r1
 800a65e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a662:	e782      	b.n	800a56a <__ieee754_sqrt+0x32>
 800a664:	0ada      	lsrs	r2, r3, #11
 800a666:	3815      	subs	r0, #21
 800a668:	055b      	lsls	r3, r3, #21
 800a66a:	2a00      	cmp	r2, #0
 800a66c:	d0fa      	beq.n	800a664 <__ieee754_sqrt+0x12c>
 800a66e:	02d5      	lsls	r5, r2, #11
 800a670:	d50a      	bpl.n	800a688 <__ieee754_sqrt+0x150>
 800a672:	f1c1 0420 	rsb	r4, r1, #32
 800a676:	fa23 f404 	lsr.w	r4, r3, r4
 800a67a:	1e4d      	subs	r5, r1, #1
 800a67c:	408b      	lsls	r3, r1
 800a67e:	4322      	orrs	r2, r4
 800a680:	1b41      	subs	r1, r0, r5
 800a682:	e789      	b.n	800a598 <__ieee754_sqrt+0x60>
 800a684:	4608      	mov	r0, r1
 800a686:	e7f0      	b.n	800a66a <__ieee754_sqrt+0x132>
 800a688:	0052      	lsls	r2, r2, #1
 800a68a:	3101      	adds	r1, #1
 800a68c:	e7ef      	b.n	800a66e <__ieee754_sqrt+0x136>
 800a68e:	4680      	mov	r8, r0
 800a690:	e7bd      	b.n	800a60e <__ieee754_sqrt+0xd6>
 800a692:	bf00      	nop
 800a694:	7ff00000 	.word	0x7ff00000

0800a698 <__kernel_cos>:
 800a698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a6a0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800a6a4:	4680      	mov	r8, r0
 800a6a6:	460f      	mov	r7, r1
 800a6a8:	e9cd 2300 	strd	r2, r3, [sp]
 800a6ac:	da04      	bge.n	800a6b8 <__kernel_cos+0x20>
 800a6ae:	f7f6 f9c3 	bl	8000a38 <__aeabi_d2iz>
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	f000 8086 	beq.w	800a7c4 <__kernel_cos+0x12c>
 800a6b8:	4642      	mov	r2, r8
 800a6ba:	463b      	mov	r3, r7
 800a6bc:	4640      	mov	r0, r8
 800a6be:	4639      	mov	r1, r7
 800a6c0:	f7f5 ff0a 	bl	80004d8 <__aeabi_dmul>
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	4b4e      	ldr	r3, [pc, #312]	; (800a800 <__kernel_cos+0x168>)
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	460d      	mov	r5, r1
 800a6cc:	f7f5 ff04 	bl	80004d8 <__aeabi_dmul>
 800a6d0:	a33f      	add	r3, pc, #252	; (adr r3, 800a7d0 <__kernel_cos+0x138>)
 800a6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d6:	4682      	mov	sl, r0
 800a6d8:	468b      	mov	fp, r1
 800a6da:	4620      	mov	r0, r4
 800a6dc:	4629      	mov	r1, r5
 800a6de:	f7f5 fefb 	bl	80004d8 <__aeabi_dmul>
 800a6e2:	a33d      	add	r3, pc, #244	; (adr r3, 800a7d8 <__kernel_cos+0x140>)
 800a6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e8:	f7f5 fd40 	bl	800016c <__adddf3>
 800a6ec:	4622      	mov	r2, r4
 800a6ee:	462b      	mov	r3, r5
 800a6f0:	f7f5 fef2 	bl	80004d8 <__aeabi_dmul>
 800a6f4:	a33a      	add	r3, pc, #232	; (adr r3, 800a7e0 <__kernel_cos+0x148>)
 800a6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fa:	f7f5 fd35 	bl	8000168 <__aeabi_dsub>
 800a6fe:	4622      	mov	r2, r4
 800a700:	462b      	mov	r3, r5
 800a702:	f7f5 fee9 	bl	80004d8 <__aeabi_dmul>
 800a706:	a338      	add	r3, pc, #224	; (adr r3, 800a7e8 <__kernel_cos+0x150>)
 800a708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70c:	f7f5 fd2e 	bl	800016c <__adddf3>
 800a710:	4622      	mov	r2, r4
 800a712:	462b      	mov	r3, r5
 800a714:	f7f5 fee0 	bl	80004d8 <__aeabi_dmul>
 800a718:	a335      	add	r3, pc, #212	; (adr r3, 800a7f0 <__kernel_cos+0x158>)
 800a71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71e:	f7f5 fd23 	bl	8000168 <__aeabi_dsub>
 800a722:	4622      	mov	r2, r4
 800a724:	462b      	mov	r3, r5
 800a726:	f7f5 fed7 	bl	80004d8 <__aeabi_dmul>
 800a72a:	a333      	add	r3, pc, #204	; (adr r3, 800a7f8 <__kernel_cos+0x160>)
 800a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a730:	f7f5 fd1c 	bl	800016c <__adddf3>
 800a734:	4622      	mov	r2, r4
 800a736:	462b      	mov	r3, r5
 800a738:	f7f5 fece 	bl	80004d8 <__aeabi_dmul>
 800a73c:	4622      	mov	r2, r4
 800a73e:	462b      	mov	r3, r5
 800a740:	f7f5 feca 	bl	80004d8 <__aeabi_dmul>
 800a744:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a748:	4604      	mov	r4, r0
 800a74a:	460d      	mov	r5, r1
 800a74c:	4640      	mov	r0, r8
 800a74e:	4639      	mov	r1, r7
 800a750:	f7f5 fec2 	bl	80004d8 <__aeabi_dmul>
 800a754:	460b      	mov	r3, r1
 800a756:	4602      	mov	r2, r0
 800a758:	4629      	mov	r1, r5
 800a75a:	4620      	mov	r0, r4
 800a75c:	f7f5 fd04 	bl	8000168 <__aeabi_dsub>
 800a760:	4b28      	ldr	r3, [pc, #160]	; (800a804 <__kernel_cos+0x16c>)
 800a762:	4680      	mov	r8, r0
 800a764:	429e      	cmp	r6, r3
 800a766:	4689      	mov	r9, r1
 800a768:	dc0e      	bgt.n	800a788 <__kernel_cos+0xf0>
 800a76a:	4602      	mov	r2, r0
 800a76c:	460b      	mov	r3, r1
 800a76e:	4650      	mov	r0, sl
 800a770:	4659      	mov	r1, fp
 800a772:	f7f5 fcf9 	bl	8000168 <__aeabi_dsub>
 800a776:	4602      	mov	r2, r0
 800a778:	2000      	movs	r0, #0
 800a77a:	460b      	mov	r3, r1
 800a77c:	4922      	ldr	r1, [pc, #136]	; (800a808 <__kernel_cos+0x170>)
 800a77e:	f7f5 fcf3 	bl	8000168 <__aeabi_dsub>
 800a782:	b003      	add	sp, #12
 800a784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a788:	2400      	movs	r4, #0
 800a78a:	4b20      	ldr	r3, [pc, #128]	; (800a80c <__kernel_cos+0x174>)
 800a78c:	4622      	mov	r2, r4
 800a78e:	429e      	cmp	r6, r3
 800a790:	bfcc      	ite	gt
 800a792:	4d1f      	ldrgt	r5, [pc, #124]	; (800a810 <__kernel_cos+0x178>)
 800a794:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800a798:	462b      	mov	r3, r5
 800a79a:	2000      	movs	r0, #0
 800a79c:	491a      	ldr	r1, [pc, #104]	; (800a808 <__kernel_cos+0x170>)
 800a79e:	f7f5 fce3 	bl	8000168 <__aeabi_dsub>
 800a7a2:	4622      	mov	r2, r4
 800a7a4:	4606      	mov	r6, r0
 800a7a6:	460f      	mov	r7, r1
 800a7a8:	462b      	mov	r3, r5
 800a7aa:	4650      	mov	r0, sl
 800a7ac:	4659      	mov	r1, fp
 800a7ae:	f7f5 fcdb 	bl	8000168 <__aeabi_dsub>
 800a7b2:	4642      	mov	r2, r8
 800a7b4:	464b      	mov	r3, r9
 800a7b6:	f7f5 fcd7 	bl	8000168 <__aeabi_dsub>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	4630      	mov	r0, r6
 800a7c0:	4639      	mov	r1, r7
 800a7c2:	e7dc      	b.n	800a77e <__kernel_cos+0xe6>
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	4910      	ldr	r1, [pc, #64]	; (800a808 <__kernel_cos+0x170>)
 800a7c8:	e7db      	b.n	800a782 <__kernel_cos+0xea>
 800a7ca:	bf00      	nop
 800a7cc:	f3af 8000 	nop.w
 800a7d0:	be8838d4 	.word	0xbe8838d4
 800a7d4:	bda8fae9 	.word	0xbda8fae9
 800a7d8:	bdb4b1c4 	.word	0xbdb4b1c4
 800a7dc:	3e21ee9e 	.word	0x3e21ee9e
 800a7e0:	809c52ad 	.word	0x809c52ad
 800a7e4:	3e927e4f 	.word	0x3e927e4f
 800a7e8:	19cb1590 	.word	0x19cb1590
 800a7ec:	3efa01a0 	.word	0x3efa01a0
 800a7f0:	16c15177 	.word	0x16c15177
 800a7f4:	3f56c16c 	.word	0x3f56c16c
 800a7f8:	5555554c 	.word	0x5555554c
 800a7fc:	3fa55555 	.word	0x3fa55555
 800a800:	3fe00000 	.word	0x3fe00000
 800a804:	3fd33332 	.word	0x3fd33332
 800a808:	3ff00000 	.word	0x3ff00000
 800a80c:	3fe90000 	.word	0x3fe90000
 800a810:	3fd20000 	.word	0x3fd20000

0800a814 <__kernel_rem_pio2>:
 800a814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a818:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a81c:	9308      	str	r3, [sp, #32]
 800a81e:	9106      	str	r1, [sp, #24]
 800a820:	4bb6      	ldr	r3, [pc, #728]	; (800aafc <__kernel_rem_pio2+0x2e8>)
 800a822:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800a824:	f112 0f14 	cmn.w	r2, #20
 800a828:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a82c:	bfa8      	it	ge
 800a82e:	1ed4      	subge	r4, r2, #3
 800a830:	9302      	str	r3, [sp, #8]
 800a832:	9b08      	ldr	r3, [sp, #32]
 800a834:	bfb8      	it	lt
 800a836:	2400      	movlt	r4, #0
 800a838:	f103 33ff 	add.w	r3, r3, #4294967295
 800a83c:	9307      	str	r3, [sp, #28]
 800a83e:	bfa4      	itt	ge
 800a840:	2318      	movge	r3, #24
 800a842:	fb94 f4f3 	sdivge	r4, r4, r3
 800a846:	f06f 0317 	mvn.w	r3, #23
 800a84a:	fb04 3303 	mla	r3, r4, r3, r3
 800a84e:	eb03 0b02 	add.w	fp, r3, r2
 800a852:	9a07      	ldr	r2, [sp, #28]
 800a854:	9b02      	ldr	r3, [sp, #8]
 800a856:	1aa7      	subs	r7, r4, r2
 800a858:	eb03 0802 	add.w	r8, r3, r2
 800a85c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a85e:	2500      	movs	r5, #0
 800a860:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a864:	2200      	movs	r2, #0
 800a866:	2300      	movs	r3, #0
 800a868:	9009      	str	r0, [sp, #36]	; 0x24
 800a86a:	ae20      	add	r6, sp, #128	; 0x80
 800a86c:	4545      	cmp	r5, r8
 800a86e:	dd14      	ble.n	800a89a <__kernel_rem_pio2+0x86>
 800a870:	f04f 0800 	mov.w	r8, #0
 800a874:	9a08      	ldr	r2, [sp, #32]
 800a876:	ab20      	add	r3, sp, #128	; 0x80
 800a878:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800a87c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800a880:	9b02      	ldr	r3, [sp, #8]
 800a882:	4598      	cmp	r8, r3
 800a884:	dc35      	bgt.n	800a8f2 <__kernel_rem_pio2+0xde>
 800a886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a888:	2200      	movs	r2, #0
 800a88a:	f1a3 0908 	sub.w	r9, r3, #8
 800a88e:	2300      	movs	r3, #0
 800a890:	462f      	mov	r7, r5
 800a892:	2600      	movs	r6, #0
 800a894:	e9cd 2300 	strd	r2, r3, [sp]
 800a898:	e01f      	b.n	800a8da <__kernel_rem_pio2+0xc6>
 800a89a:	42ef      	cmn	r7, r5
 800a89c:	d40b      	bmi.n	800a8b6 <__kernel_rem_pio2+0xa2>
 800a89e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a8a2:	e9cd 2300 	strd	r2, r3, [sp]
 800a8a6:	f7f5 fdad 	bl	8000404 <__aeabi_i2d>
 800a8aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8ae:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a8b2:	3501      	adds	r5, #1
 800a8b4:	e7da      	b.n	800a86c <__kernel_rem_pio2+0x58>
 800a8b6:	4610      	mov	r0, r2
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	e7f8      	b.n	800a8ae <__kernel_rem_pio2+0x9a>
 800a8bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8c0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800a8c4:	f7f5 fe08 	bl	80004d8 <__aeabi_dmul>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8d0:	f7f5 fc4c 	bl	800016c <__adddf3>
 800a8d4:	e9cd 0100 	strd	r0, r1, [sp]
 800a8d8:	3601      	adds	r6, #1
 800a8da:	9b07      	ldr	r3, [sp, #28]
 800a8dc:	3f08      	subs	r7, #8
 800a8de:	429e      	cmp	r6, r3
 800a8e0:	ddec      	ble.n	800a8bc <__kernel_rem_pio2+0xa8>
 800a8e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8e6:	f108 0801 	add.w	r8, r8, #1
 800a8ea:	e8ea 2302 	strd	r2, r3, [sl], #8
 800a8ee:	3508      	adds	r5, #8
 800a8f0:	e7c6      	b.n	800a880 <__kernel_rem_pio2+0x6c>
 800a8f2:	9b02      	ldr	r3, [sp, #8]
 800a8f4:	aa0c      	add	r2, sp, #48	; 0x30
 800a8f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8fc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a8fe:	9e02      	ldr	r6, [sp, #8]
 800a900:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a904:	930a      	str	r3, [sp, #40]	; 0x28
 800a906:	ab98      	add	r3, sp, #608	; 0x260
 800a908:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a90c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800a910:	ab70      	add	r3, sp, #448	; 0x1c0
 800a912:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800a916:	46d0      	mov	r8, sl
 800a918:	46b1      	mov	r9, r6
 800a91a:	af0c      	add	r7, sp, #48	; 0x30
 800a91c:	9700      	str	r7, [sp, #0]
 800a91e:	f1b9 0f00 	cmp.w	r9, #0
 800a922:	f1a8 0808 	sub.w	r8, r8, #8
 800a926:	dc71      	bgt.n	800aa0c <__kernel_rem_pio2+0x1f8>
 800a928:	465a      	mov	r2, fp
 800a92a:	4620      	mov	r0, r4
 800a92c:	4629      	mov	r1, r5
 800a92e:	f000 fc27 	bl	800b180 <scalbn>
 800a932:	2200      	movs	r2, #0
 800a934:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a938:	4604      	mov	r4, r0
 800a93a:	460d      	mov	r5, r1
 800a93c:	f7f5 fdcc 	bl	80004d8 <__aeabi_dmul>
 800a940:	f000 fb96 	bl	800b070 <floor>
 800a944:	2200      	movs	r2, #0
 800a946:	4b6e      	ldr	r3, [pc, #440]	; (800ab00 <__kernel_rem_pio2+0x2ec>)
 800a948:	f7f5 fdc6 	bl	80004d8 <__aeabi_dmul>
 800a94c:	4602      	mov	r2, r0
 800a94e:	460b      	mov	r3, r1
 800a950:	4620      	mov	r0, r4
 800a952:	4629      	mov	r1, r5
 800a954:	f7f5 fc08 	bl	8000168 <__aeabi_dsub>
 800a958:	460d      	mov	r5, r1
 800a95a:	4604      	mov	r4, r0
 800a95c:	f7f6 f86c 	bl	8000a38 <__aeabi_d2iz>
 800a960:	9004      	str	r0, [sp, #16]
 800a962:	f7f5 fd4f 	bl	8000404 <__aeabi_i2d>
 800a966:	4602      	mov	r2, r0
 800a968:	460b      	mov	r3, r1
 800a96a:	4620      	mov	r0, r4
 800a96c:	4629      	mov	r1, r5
 800a96e:	f7f5 fbfb 	bl	8000168 <__aeabi_dsub>
 800a972:	f1bb 0f00 	cmp.w	fp, #0
 800a976:	4680      	mov	r8, r0
 800a978:	4689      	mov	r9, r1
 800a97a:	dd70      	ble.n	800aa5e <__kernel_rem_pio2+0x24a>
 800a97c:	1e72      	subs	r2, r6, #1
 800a97e:	ab0c      	add	r3, sp, #48	; 0x30
 800a980:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a984:	9c04      	ldr	r4, [sp, #16]
 800a986:	f1cb 0118 	rsb	r1, fp, #24
 800a98a:	fa40 f301 	asr.w	r3, r0, r1
 800a98e:	441c      	add	r4, r3
 800a990:	408b      	lsls	r3, r1
 800a992:	1ac0      	subs	r0, r0, r3
 800a994:	ab0c      	add	r3, sp, #48	; 0x30
 800a996:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a99a:	f1cb 0317 	rsb	r3, fp, #23
 800a99e:	9404      	str	r4, [sp, #16]
 800a9a0:	fa40 f303 	asr.w	r3, r0, r3
 800a9a4:	9300      	str	r3, [sp, #0]
 800a9a6:	9b00      	ldr	r3, [sp, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	dd66      	ble.n	800aa7a <__kernel_rem_pio2+0x266>
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a9b2:	4614      	mov	r4, r2
 800a9b4:	9b04      	ldr	r3, [sp, #16]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	9304      	str	r3, [sp, #16]
 800a9ba:	4296      	cmp	r6, r2
 800a9bc:	f300 80ac 	bgt.w	800ab18 <__kernel_rem_pio2+0x304>
 800a9c0:	f1bb 0f00 	cmp.w	fp, #0
 800a9c4:	dd07      	ble.n	800a9d6 <__kernel_rem_pio2+0x1c2>
 800a9c6:	f1bb 0f01 	cmp.w	fp, #1
 800a9ca:	f000 80b4 	beq.w	800ab36 <__kernel_rem_pio2+0x322>
 800a9ce:	f1bb 0f02 	cmp.w	fp, #2
 800a9d2:	f000 80ba 	beq.w	800ab4a <__kernel_rem_pio2+0x336>
 800a9d6:	9b00      	ldr	r3, [sp, #0]
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d14e      	bne.n	800aa7a <__kernel_rem_pio2+0x266>
 800a9dc:	4642      	mov	r2, r8
 800a9de:	464b      	mov	r3, r9
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	4948      	ldr	r1, [pc, #288]	; (800ab04 <__kernel_rem_pio2+0x2f0>)
 800a9e4:	f7f5 fbc0 	bl	8000168 <__aeabi_dsub>
 800a9e8:	4680      	mov	r8, r0
 800a9ea:	4689      	mov	r9, r1
 800a9ec:	2c00      	cmp	r4, #0
 800a9ee:	d044      	beq.n	800aa7a <__kernel_rem_pio2+0x266>
 800a9f0:	465a      	mov	r2, fp
 800a9f2:	2000      	movs	r0, #0
 800a9f4:	4943      	ldr	r1, [pc, #268]	; (800ab04 <__kernel_rem_pio2+0x2f0>)
 800a9f6:	f000 fbc3 	bl	800b180 <scalbn>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4640      	mov	r0, r8
 800aa00:	4649      	mov	r1, r9
 800aa02:	f7f5 fbb1 	bl	8000168 <__aeabi_dsub>
 800aa06:	4680      	mov	r8, r0
 800aa08:	4689      	mov	r9, r1
 800aa0a:	e036      	b.n	800aa7a <__kernel_rem_pio2+0x266>
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	4b3e      	ldr	r3, [pc, #248]	; (800ab08 <__kernel_rem_pio2+0x2f4>)
 800aa10:	4620      	mov	r0, r4
 800aa12:	4629      	mov	r1, r5
 800aa14:	f7f5 fd60 	bl	80004d8 <__aeabi_dmul>
 800aa18:	f7f6 f80e 	bl	8000a38 <__aeabi_d2iz>
 800aa1c:	f7f5 fcf2 	bl	8000404 <__aeabi_i2d>
 800aa20:	4602      	mov	r2, r0
 800aa22:	460b      	mov	r3, r1
 800aa24:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	4b38      	ldr	r3, [pc, #224]	; (800ab0c <__kernel_rem_pio2+0x2f8>)
 800aa2c:	f7f5 fd54 	bl	80004d8 <__aeabi_dmul>
 800aa30:	4602      	mov	r2, r0
 800aa32:	460b      	mov	r3, r1
 800aa34:	4620      	mov	r0, r4
 800aa36:	4629      	mov	r1, r5
 800aa38:	f7f5 fb96 	bl	8000168 <__aeabi_dsub>
 800aa3c:	f7f5 fffc 	bl	8000a38 <__aeabi_d2iz>
 800aa40:	9b00      	ldr	r3, [sp, #0]
 800aa42:	f109 39ff 	add.w	r9, r9, #4294967295
 800aa46:	f843 0b04 	str.w	r0, [r3], #4
 800aa4a:	9300      	str	r3, [sp, #0]
 800aa4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa50:	e9d8 2300 	ldrd	r2, r3, [r8]
 800aa54:	f7f5 fb8a 	bl	800016c <__adddf3>
 800aa58:	4604      	mov	r4, r0
 800aa5a:	460d      	mov	r5, r1
 800aa5c:	e75f      	b.n	800a91e <__kernel_rem_pio2+0x10a>
 800aa5e:	d105      	bne.n	800aa6c <__kernel_rem_pio2+0x258>
 800aa60:	1e73      	subs	r3, r6, #1
 800aa62:	aa0c      	add	r2, sp, #48	; 0x30
 800aa64:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800aa68:	15c3      	asrs	r3, r0, #23
 800aa6a:	e79b      	b.n	800a9a4 <__kernel_rem_pio2+0x190>
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	4b28      	ldr	r3, [pc, #160]	; (800ab10 <__kernel_rem_pio2+0x2fc>)
 800aa70:	f7f5 ffb8 	bl	80009e4 <__aeabi_dcmpge>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d13e      	bne.n	800aaf6 <__kernel_rem_pio2+0x2e2>
 800aa78:	9000      	str	r0, [sp, #0]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	4640      	mov	r0, r8
 800aa80:	4649      	mov	r1, r9
 800aa82:	f7f5 ff91 	bl	80009a8 <__aeabi_dcmpeq>
 800aa86:	2800      	cmp	r0, #0
 800aa88:	f000 80b1 	beq.w	800abee <__kernel_rem_pio2+0x3da>
 800aa8c:	1e74      	subs	r4, r6, #1
 800aa8e:	4623      	mov	r3, r4
 800aa90:	2200      	movs	r2, #0
 800aa92:	9902      	ldr	r1, [sp, #8]
 800aa94:	428b      	cmp	r3, r1
 800aa96:	da5f      	bge.n	800ab58 <__kernel_rem_pio2+0x344>
 800aa98:	2a00      	cmp	r2, #0
 800aa9a:	d074      	beq.n	800ab86 <__kernel_rem_pio2+0x372>
 800aa9c:	ab0c      	add	r3, sp, #48	; 0x30
 800aa9e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800aaa2:	f1ab 0b18 	sub.w	fp, fp, #24
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	f000 809f 	beq.w	800abea <__kernel_rem_pio2+0x3d6>
 800aaac:	465a      	mov	r2, fp
 800aaae:	2000      	movs	r0, #0
 800aab0:	4914      	ldr	r1, [pc, #80]	; (800ab04 <__kernel_rem_pio2+0x2f0>)
 800aab2:	f000 fb65 	bl	800b180 <scalbn>
 800aab6:	46a2      	mov	sl, r4
 800aab8:	4606      	mov	r6, r0
 800aaba:	460f      	mov	r7, r1
 800aabc:	f04f 0800 	mov.w	r8, #0
 800aac0:	ab70      	add	r3, sp, #448	; 0x1c0
 800aac2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800ab08 <__kernel_rem_pio2+0x2f4>
 800aac6:	00e5      	lsls	r5, r4, #3
 800aac8:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800aacc:	f1ba 0f00 	cmp.w	sl, #0
 800aad0:	f280 80c3 	bge.w	800ac5a <__kernel_rem_pio2+0x446>
 800aad4:	4626      	mov	r6, r4
 800aad6:	2e00      	cmp	r6, #0
 800aad8:	f2c0 80f5 	blt.w	800acc6 <__kernel_rem_pio2+0x4b2>
 800aadc:	4b0d      	ldr	r3, [pc, #52]	; (800ab14 <__kernel_rem_pio2+0x300>)
 800aade:	f04f 0a00 	mov.w	sl, #0
 800aae2:	9307      	str	r3, [sp, #28]
 800aae4:	ab70      	add	r3, sp, #448	; 0x1c0
 800aae6:	f04f 0b00 	mov.w	fp, #0
 800aaea:	f04f 0800 	mov.w	r8, #0
 800aaee:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800aaf2:	1ba7      	subs	r7, r4, r6
 800aaf4:	e0db      	b.n	800acae <__kernel_rem_pio2+0x49a>
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	e757      	b.n	800a9ac <__kernel_rem_pio2+0x198>
 800aafc:	0800b898 	.word	0x0800b898
 800ab00:	40200000 	.word	0x40200000
 800ab04:	3ff00000 	.word	0x3ff00000
 800ab08:	3e700000 	.word	0x3e700000
 800ab0c:	41700000 	.word	0x41700000
 800ab10:	3fe00000 	.word	0x3fe00000
 800ab14:	0800b858 	.word	0x0800b858
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	b944      	cbnz	r4, 800ab2e <__kernel_rem_pio2+0x31a>
 800ab1c:	b11b      	cbz	r3, 800ab26 <__kernel_rem_pio2+0x312>
 800ab1e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ab22:	603b      	str	r3, [r7, #0]
 800ab24:	2301      	movs	r3, #1
 800ab26:	461c      	mov	r4, r3
 800ab28:	3201      	adds	r2, #1
 800ab2a:	3704      	adds	r7, #4
 800ab2c:	e745      	b.n	800a9ba <__kernel_rem_pio2+0x1a6>
 800ab2e:	1acb      	subs	r3, r1, r3
 800ab30:	603b      	str	r3, [r7, #0]
 800ab32:	4623      	mov	r3, r4
 800ab34:	e7f7      	b.n	800ab26 <__kernel_rem_pio2+0x312>
 800ab36:	1e72      	subs	r2, r6, #1
 800ab38:	ab0c      	add	r3, sp, #48	; 0x30
 800ab3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab3e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ab42:	a90c      	add	r1, sp, #48	; 0x30
 800ab44:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ab48:	e745      	b.n	800a9d6 <__kernel_rem_pio2+0x1c2>
 800ab4a:	1e72      	subs	r2, r6, #1
 800ab4c:	ab0c      	add	r3, sp, #48	; 0x30
 800ab4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab52:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ab56:	e7f4      	b.n	800ab42 <__kernel_rem_pio2+0x32e>
 800ab58:	a90c      	add	r1, sp, #48	; 0x30
 800ab5a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	430a      	orrs	r2, r1
 800ab62:	e796      	b.n	800aa92 <__kernel_rem_pio2+0x27e>
 800ab64:	3401      	adds	r4, #1
 800ab66:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ab6a:	2a00      	cmp	r2, #0
 800ab6c:	d0fa      	beq.n	800ab64 <__kernel_rem_pio2+0x350>
 800ab6e:	9b08      	ldr	r3, [sp, #32]
 800ab70:	f106 0801 	add.w	r8, r6, #1
 800ab74:	18f5      	adds	r5, r6, r3
 800ab76:	ab20      	add	r3, sp, #128	; 0x80
 800ab78:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ab7c:	4434      	add	r4, r6
 800ab7e:	4544      	cmp	r4, r8
 800ab80:	da04      	bge.n	800ab8c <__kernel_rem_pio2+0x378>
 800ab82:	4626      	mov	r6, r4
 800ab84:	e6bf      	b.n	800a906 <__kernel_rem_pio2+0xf2>
 800ab86:	2401      	movs	r4, #1
 800ab88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab8a:	e7ec      	b.n	800ab66 <__kernel_rem_pio2+0x352>
 800ab8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab8e:	f04f 0900 	mov.w	r9, #0
 800ab92:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ab96:	f7f5 fc35 	bl	8000404 <__aeabi_i2d>
 800ab9a:	2600      	movs	r6, #0
 800ab9c:	2700      	movs	r7, #0
 800ab9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aba0:	e9c5 0100 	strd	r0, r1, [r5]
 800aba4:	3b08      	subs	r3, #8
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	9504      	str	r5, [sp, #16]
 800abaa:	9b07      	ldr	r3, [sp, #28]
 800abac:	4599      	cmp	r9, r3
 800abae:	dd05      	ble.n	800abbc <__kernel_rem_pio2+0x3a8>
 800abb0:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800abb4:	f108 0801 	add.w	r8, r8, #1
 800abb8:	3508      	adds	r5, #8
 800abba:	e7e0      	b.n	800ab7e <__kernel_rem_pio2+0x36a>
 800abbc:	f8dd c010 	ldr.w	ip, [sp, #16]
 800abc0:	9900      	ldr	r1, [sp, #0]
 800abc2:	f109 0901 	add.w	r9, r9, #1
 800abc6:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800abca:	9100      	str	r1, [sp, #0]
 800abcc:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800abd0:	f8cd c010 	str.w	ip, [sp, #16]
 800abd4:	f7f5 fc80 	bl	80004d8 <__aeabi_dmul>
 800abd8:	4602      	mov	r2, r0
 800abda:	460b      	mov	r3, r1
 800abdc:	4630      	mov	r0, r6
 800abde:	4639      	mov	r1, r7
 800abe0:	f7f5 fac4 	bl	800016c <__adddf3>
 800abe4:	4606      	mov	r6, r0
 800abe6:	460f      	mov	r7, r1
 800abe8:	e7df      	b.n	800abaa <__kernel_rem_pio2+0x396>
 800abea:	3c01      	subs	r4, #1
 800abec:	e756      	b.n	800aa9c <__kernel_rem_pio2+0x288>
 800abee:	f1cb 0200 	rsb	r2, fp, #0
 800abf2:	4640      	mov	r0, r8
 800abf4:	4649      	mov	r1, r9
 800abf6:	f000 fac3 	bl	800b180 <scalbn>
 800abfa:	2200      	movs	r2, #0
 800abfc:	4ba4      	ldr	r3, [pc, #656]	; (800ae90 <__kernel_rem_pio2+0x67c>)
 800abfe:	4604      	mov	r4, r0
 800ac00:	460d      	mov	r5, r1
 800ac02:	f7f5 feef 	bl	80009e4 <__aeabi_dcmpge>
 800ac06:	b1f8      	cbz	r0, 800ac48 <__kernel_rem_pio2+0x434>
 800ac08:	2200      	movs	r2, #0
 800ac0a:	4ba2      	ldr	r3, [pc, #648]	; (800ae94 <__kernel_rem_pio2+0x680>)
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	4629      	mov	r1, r5
 800ac10:	f7f5 fc62 	bl	80004d8 <__aeabi_dmul>
 800ac14:	f7f5 ff10 	bl	8000a38 <__aeabi_d2iz>
 800ac18:	4607      	mov	r7, r0
 800ac1a:	f7f5 fbf3 	bl	8000404 <__aeabi_i2d>
 800ac1e:	2200      	movs	r2, #0
 800ac20:	4b9b      	ldr	r3, [pc, #620]	; (800ae90 <__kernel_rem_pio2+0x67c>)
 800ac22:	f7f5 fc59 	bl	80004d8 <__aeabi_dmul>
 800ac26:	460b      	mov	r3, r1
 800ac28:	4602      	mov	r2, r0
 800ac2a:	4629      	mov	r1, r5
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f7f5 fa9b 	bl	8000168 <__aeabi_dsub>
 800ac32:	f7f5 ff01 	bl	8000a38 <__aeabi_d2iz>
 800ac36:	1c74      	adds	r4, r6, #1
 800ac38:	ab0c      	add	r3, sp, #48	; 0x30
 800ac3a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800ac3e:	f10b 0b18 	add.w	fp, fp, #24
 800ac42:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800ac46:	e731      	b.n	800aaac <__kernel_rem_pio2+0x298>
 800ac48:	4620      	mov	r0, r4
 800ac4a:	4629      	mov	r1, r5
 800ac4c:	f7f5 fef4 	bl	8000a38 <__aeabi_d2iz>
 800ac50:	ab0c      	add	r3, sp, #48	; 0x30
 800ac52:	4634      	mov	r4, r6
 800ac54:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800ac58:	e728      	b.n	800aaac <__kernel_rem_pio2+0x298>
 800ac5a:	ab0c      	add	r3, sp, #48	; 0x30
 800ac5c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ac60:	f7f5 fbd0 	bl	8000404 <__aeabi_i2d>
 800ac64:	4632      	mov	r2, r6
 800ac66:	463b      	mov	r3, r7
 800ac68:	f7f5 fc36 	bl	80004d8 <__aeabi_dmul>
 800ac6c:	4642      	mov	r2, r8
 800ac6e:	e86b 0102 	strd	r0, r1, [fp], #-8
 800ac72:	464b      	mov	r3, r9
 800ac74:	4630      	mov	r0, r6
 800ac76:	4639      	mov	r1, r7
 800ac78:	f7f5 fc2e 	bl	80004d8 <__aeabi_dmul>
 800ac7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac80:	4606      	mov	r6, r0
 800ac82:	460f      	mov	r7, r1
 800ac84:	e722      	b.n	800aacc <__kernel_rem_pio2+0x2b8>
 800ac86:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800ac8a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ac8e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800ac92:	f8cd c01c 	str.w	ip, [sp, #28]
 800ac96:	f7f5 fc1f 	bl	80004d8 <__aeabi_dmul>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	4650      	mov	r0, sl
 800aca0:	4659      	mov	r1, fp
 800aca2:	f7f5 fa63 	bl	800016c <__adddf3>
 800aca6:	4682      	mov	sl, r0
 800aca8:	468b      	mov	fp, r1
 800acaa:	f108 0801 	add.w	r8, r8, #1
 800acae:	9b02      	ldr	r3, [sp, #8]
 800acb0:	4598      	cmp	r8, r3
 800acb2:	dc01      	bgt.n	800acb8 <__kernel_rem_pio2+0x4a4>
 800acb4:	45b8      	cmp	r8, r7
 800acb6:	dde6      	ble.n	800ac86 <__kernel_rem_pio2+0x472>
 800acb8:	ab48      	add	r3, sp, #288	; 0x120
 800acba:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800acbe:	e9c7 ab00 	strd	sl, fp, [r7]
 800acc2:	3e01      	subs	r6, #1
 800acc4:	e707      	b.n	800aad6 <__kernel_rem_pio2+0x2c2>
 800acc6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800acc8:	2b02      	cmp	r3, #2
 800acca:	dc09      	bgt.n	800ace0 <__kernel_rem_pio2+0x4cc>
 800accc:	2b00      	cmp	r3, #0
 800acce:	dc32      	bgt.n	800ad36 <__kernel_rem_pio2+0x522>
 800acd0:	d05a      	beq.n	800ad88 <__kernel_rem_pio2+0x574>
 800acd2:	9b04      	ldr	r3, [sp, #16]
 800acd4:	f003 0007 	and.w	r0, r3, #7
 800acd8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800acdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800ace2:	2b03      	cmp	r3, #3
 800ace4:	d1f5      	bne.n	800acd2 <__kernel_rem_pio2+0x4be>
 800ace6:	ab48      	add	r3, sp, #288	; 0x120
 800ace8:	441d      	add	r5, r3
 800acea:	46aa      	mov	sl, r5
 800acec:	46a3      	mov	fp, r4
 800acee:	f1bb 0f00 	cmp.w	fp, #0
 800acf2:	dc76      	bgt.n	800ade2 <__kernel_rem_pio2+0x5ce>
 800acf4:	46aa      	mov	sl, r5
 800acf6:	46a3      	mov	fp, r4
 800acf8:	f1bb 0f01 	cmp.w	fp, #1
 800acfc:	f300 8090 	bgt.w	800ae20 <__kernel_rem_pio2+0x60c>
 800ad00:	2700      	movs	r7, #0
 800ad02:	463e      	mov	r6, r7
 800ad04:	2c01      	cmp	r4, #1
 800ad06:	f300 80aa 	bgt.w	800ae5e <__kernel_rem_pio2+0x64a>
 800ad0a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800ad0e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800ad12:	9b00      	ldr	r3, [sp, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f040 80ac 	bne.w	800ae72 <__kernel_rem_pio2+0x65e>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	462a      	mov	r2, r5
 800ad1e:	9806      	ldr	r0, [sp, #24]
 800ad20:	e9c0 2300 	strd	r2, r3, [r0]
 800ad24:	4622      	mov	r2, r4
 800ad26:	460b      	mov	r3, r1
 800ad28:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ad2c:	463a      	mov	r2, r7
 800ad2e:	4633      	mov	r3, r6
 800ad30:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ad34:	e7cd      	b.n	800acd2 <__kernel_rem_pio2+0x4be>
 800ad36:	2000      	movs	r0, #0
 800ad38:	46a0      	mov	r8, r4
 800ad3a:	4601      	mov	r1, r0
 800ad3c:	ab48      	add	r3, sp, #288	; 0x120
 800ad3e:	441d      	add	r5, r3
 800ad40:	f1b8 0f00 	cmp.w	r8, #0
 800ad44:	da3a      	bge.n	800adbc <__kernel_rem_pio2+0x5a8>
 800ad46:	9b00      	ldr	r3, [sp, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d03e      	beq.n	800adca <__kernel_rem_pio2+0x5b6>
 800ad4c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800ad50:	4602      	mov	r2, r0
 800ad52:	462b      	mov	r3, r5
 800ad54:	9d06      	ldr	r5, [sp, #24]
 800ad56:	2601      	movs	r6, #1
 800ad58:	e9c5 2300 	strd	r2, r3, [r5]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ad62:	f7f5 fa01 	bl	8000168 <__aeabi_dsub>
 800ad66:	4684      	mov	ip, r0
 800ad68:	460f      	mov	r7, r1
 800ad6a:	ad48      	add	r5, sp, #288	; 0x120
 800ad6c:	42b4      	cmp	r4, r6
 800ad6e:	f105 0508 	add.w	r5, r5, #8
 800ad72:	da2c      	bge.n	800adce <__kernel_rem_pio2+0x5ba>
 800ad74:	9b00      	ldr	r3, [sp, #0]
 800ad76:	b10b      	cbz	r3, 800ad7c <__kernel_rem_pio2+0x568>
 800ad78:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ad7c:	4662      	mov	r2, ip
 800ad7e:	463b      	mov	r3, r7
 800ad80:	9906      	ldr	r1, [sp, #24]
 800ad82:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800ad86:	e7a4      	b.n	800acd2 <__kernel_rem_pio2+0x4be>
 800ad88:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800ad8a:	ab48      	add	r3, sp, #288	; 0x120
 800ad8c:	4637      	mov	r7, r6
 800ad8e:	441d      	add	r5, r3
 800ad90:	2c00      	cmp	r4, #0
 800ad92:	da09      	bge.n	800ada8 <__kernel_rem_pio2+0x594>
 800ad94:	9b00      	ldr	r3, [sp, #0]
 800ad96:	b10b      	cbz	r3, 800ad9c <__kernel_rem_pio2+0x588>
 800ad98:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ad9c:	4632      	mov	r2, r6
 800ad9e:	463b      	mov	r3, r7
 800ada0:	9906      	ldr	r1, [sp, #24]
 800ada2:	e9c1 2300 	strd	r2, r3, [r1]
 800ada6:	e794      	b.n	800acd2 <__kernel_rem_pio2+0x4be>
 800ada8:	4630      	mov	r0, r6
 800adaa:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800adae:	4639      	mov	r1, r7
 800adb0:	f7f5 f9dc 	bl	800016c <__adddf3>
 800adb4:	3c01      	subs	r4, #1
 800adb6:	4606      	mov	r6, r0
 800adb8:	460f      	mov	r7, r1
 800adba:	e7e9      	b.n	800ad90 <__kernel_rem_pio2+0x57c>
 800adbc:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800adc0:	f7f5 f9d4 	bl	800016c <__adddf3>
 800adc4:	f108 38ff 	add.w	r8, r8, #4294967295
 800adc8:	e7ba      	b.n	800ad40 <__kernel_rem_pio2+0x52c>
 800adca:	460d      	mov	r5, r1
 800adcc:	e7c0      	b.n	800ad50 <__kernel_rem_pio2+0x53c>
 800adce:	4660      	mov	r0, ip
 800add0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800add4:	4639      	mov	r1, r7
 800add6:	f7f5 f9c9 	bl	800016c <__adddf3>
 800adda:	3601      	adds	r6, #1
 800addc:	4684      	mov	ip, r0
 800adde:	460f      	mov	r7, r1
 800ade0:	e7c4      	b.n	800ad6c <__kernel_rem_pio2+0x558>
 800ade2:	e9da 6700 	ldrd	r6, r7, [sl]
 800ade6:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800adea:	4632      	mov	r2, r6
 800adec:	463b      	mov	r3, r7
 800adee:	4640      	mov	r0, r8
 800adf0:	4649      	mov	r1, r9
 800adf2:	f7f5 f9bb 	bl	800016c <__adddf3>
 800adf6:	4602      	mov	r2, r0
 800adf8:	460b      	mov	r3, r1
 800adfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adfe:	4640      	mov	r0, r8
 800ae00:	4649      	mov	r1, r9
 800ae02:	f7f5 f9b1 	bl	8000168 <__aeabi_dsub>
 800ae06:	4632      	mov	r2, r6
 800ae08:	463b      	mov	r3, r7
 800ae0a:	f7f5 f9af 	bl	800016c <__adddf3>
 800ae0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae12:	e86a 0102 	strd	r0, r1, [sl], #-8
 800ae16:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae1a:	e9ca 2300 	strd	r2, r3, [sl]
 800ae1e:	e766      	b.n	800acee <__kernel_rem_pio2+0x4da>
 800ae20:	e9da 8900 	ldrd	r8, r9, [sl]
 800ae24:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800ae28:	4642      	mov	r2, r8
 800ae2a:	464b      	mov	r3, r9
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	4639      	mov	r1, r7
 800ae30:	f7f5 f99c 	bl	800016c <__adddf3>
 800ae34:	4602      	mov	r2, r0
 800ae36:	460b      	mov	r3, r1
 800ae38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	4639      	mov	r1, r7
 800ae40:	f7f5 f992 	bl	8000168 <__aeabi_dsub>
 800ae44:	4642      	mov	r2, r8
 800ae46:	464b      	mov	r3, r9
 800ae48:	f7f5 f990 	bl	800016c <__adddf3>
 800ae4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae50:	e86a 0102 	strd	r0, r1, [sl], #-8
 800ae54:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae58:	e9ca 2300 	strd	r2, r3, [sl]
 800ae5c:	e74c      	b.n	800acf8 <__kernel_rem_pio2+0x4e4>
 800ae5e:	4638      	mov	r0, r7
 800ae60:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ae64:	4631      	mov	r1, r6
 800ae66:	f7f5 f981 	bl	800016c <__adddf3>
 800ae6a:	3c01      	subs	r4, #1
 800ae6c:	4607      	mov	r7, r0
 800ae6e:	460e      	mov	r6, r1
 800ae70:	e748      	b.n	800ad04 <__kernel_rem_pio2+0x4f0>
 800ae72:	9b06      	ldr	r3, [sp, #24]
 800ae74:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ae78:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ae7c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800ae80:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800ae84:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800ae88:	601d      	str	r5, [r3, #0]
 800ae8a:	615e      	str	r6, [r3, #20]
 800ae8c:	e721      	b.n	800acd2 <__kernel_rem_pio2+0x4be>
 800ae8e:	bf00      	nop
 800ae90:	41700000 	.word	0x41700000
 800ae94:	3e700000 	.word	0x3e700000

0800ae98 <__kernel_sin>:
 800ae98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae9c:	b086      	sub	sp, #24
 800ae9e:	e9cd 2300 	strd	r2, r3, [sp]
 800aea2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aea6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800aeaa:	4682      	mov	sl, r0
 800aeac:	460c      	mov	r4, r1
 800aeae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800aeb0:	da03      	bge.n	800aeba <__kernel_sin+0x22>
 800aeb2:	f7f5 fdc1 	bl	8000a38 <__aeabi_d2iz>
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	d050      	beq.n	800af5c <__kernel_sin+0xc4>
 800aeba:	4652      	mov	r2, sl
 800aebc:	4623      	mov	r3, r4
 800aebe:	4650      	mov	r0, sl
 800aec0:	4621      	mov	r1, r4
 800aec2:	f7f5 fb09 	bl	80004d8 <__aeabi_dmul>
 800aec6:	4606      	mov	r6, r0
 800aec8:	460f      	mov	r7, r1
 800aeca:	4602      	mov	r2, r0
 800aecc:	460b      	mov	r3, r1
 800aece:	4650      	mov	r0, sl
 800aed0:	4621      	mov	r1, r4
 800aed2:	f7f5 fb01 	bl	80004d8 <__aeabi_dmul>
 800aed6:	a33e      	add	r3, pc, #248	; (adr r3, 800afd0 <__kernel_sin+0x138>)
 800aed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aedc:	4680      	mov	r8, r0
 800aede:	4689      	mov	r9, r1
 800aee0:	4630      	mov	r0, r6
 800aee2:	4639      	mov	r1, r7
 800aee4:	f7f5 faf8 	bl	80004d8 <__aeabi_dmul>
 800aee8:	a33b      	add	r3, pc, #236	; (adr r3, 800afd8 <__kernel_sin+0x140>)
 800aeea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeee:	f7f5 f93b 	bl	8000168 <__aeabi_dsub>
 800aef2:	4632      	mov	r2, r6
 800aef4:	463b      	mov	r3, r7
 800aef6:	f7f5 faef 	bl	80004d8 <__aeabi_dmul>
 800aefa:	a339      	add	r3, pc, #228	; (adr r3, 800afe0 <__kernel_sin+0x148>)
 800aefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af00:	f7f5 f934 	bl	800016c <__adddf3>
 800af04:	4632      	mov	r2, r6
 800af06:	463b      	mov	r3, r7
 800af08:	f7f5 fae6 	bl	80004d8 <__aeabi_dmul>
 800af0c:	a336      	add	r3, pc, #216	; (adr r3, 800afe8 <__kernel_sin+0x150>)
 800af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af12:	f7f5 f929 	bl	8000168 <__aeabi_dsub>
 800af16:	4632      	mov	r2, r6
 800af18:	463b      	mov	r3, r7
 800af1a:	f7f5 fadd 	bl	80004d8 <__aeabi_dmul>
 800af1e:	a334      	add	r3, pc, #208	; (adr r3, 800aff0 <__kernel_sin+0x158>)
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	f7f5 f922 	bl	800016c <__adddf3>
 800af28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af2c:	b9dd      	cbnz	r5, 800af66 <__kernel_sin+0xce>
 800af2e:	4602      	mov	r2, r0
 800af30:	460b      	mov	r3, r1
 800af32:	4630      	mov	r0, r6
 800af34:	4639      	mov	r1, r7
 800af36:	f7f5 facf 	bl	80004d8 <__aeabi_dmul>
 800af3a:	a32f      	add	r3, pc, #188	; (adr r3, 800aff8 <__kernel_sin+0x160>)
 800af3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af40:	f7f5 f912 	bl	8000168 <__aeabi_dsub>
 800af44:	4642      	mov	r2, r8
 800af46:	464b      	mov	r3, r9
 800af48:	f7f5 fac6 	bl	80004d8 <__aeabi_dmul>
 800af4c:	4602      	mov	r2, r0
 800af4e:	460b      	mov	r3, r1
 800af50:	4650      	mov	r0, sl
 800af52:	4621      	mov	r1, r4
 800af54:	f7f5 f90a 	bl	800016c <__adddf3>
 800af58:	4682      	mov	sl, r0
 800af5a:	460c      	mov	r4, r1
 800af5c:	4650      	mov	r0, sl
 800af5e:	4621      	mov	r1, r4
 800af60:	b006      	add	sp, #24
 800af62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af66:	2200      	movs	r2, #0
 800af68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af6c:	4b24      	ldr	r3, [pc, #144]	; (800b000 <__kernel_sin+0x168>)
 800af6e:	f7f5 fab3 	bl	80004d8 <__aeabi_dmul>
 800af72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af7a:	4640      	mov	r0, r8
 800af7c:	4649      	mov	r1, r9
 800af7e:	f7f5 faab 	bl	80004d8 <__aeabi_dmul>
 800af82:	4602      	mov	r2, r0
 800af84:	460b      	mov	r3, r1
 800af86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af8a:	f7f5 f8ed 	bl	8000168 <__aeabi_dsub>
 800af8e:	4632      	mov	r2, r6
 800af90:	463b      	mov	r3, r7
 800af92:	f7f5 faa1 	bl	80004d8 <__aeabi_dmul>
 800af96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af9a:	f7f5 f8e5 	bl	8000168 <__aeabi_dsub>
 800af9e:	a316      	add	r3, pc, #88	; (adr r3, 800aff8 <__kernel_sin+0x160>)
 800afa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa4:	4606      	mov	r6, r0
 800afa6:	460f      	mov	r7, r1
 800afa8:	4640      	mov	r0, r8
 800afaa:	4649      	mov	r1, r9
 800afac:	f7f5 fa94 	bl	80004d8 <__aeabi_dmul>
 800afb0:	4602      	mov	r2, r0
 800afb2:	460b      	mov	r3, r1
 800afb4:	4630      	mov	r0, r6
 800afb6:	4639      	mov	r1, r7
 800afb8:	f7f5 f8d8 	bl	800016c <__adddf3>
 800afbc:	4602      	mov	r2, r0
 800afbe:	460b      	mov	r3, r1
 800afc0:	4650      	mov	r0, sl
 800afc2:	4621      	mov	r1, r4
 800afc4:	f7f5 f8d0 	bl	8000168 <__aeabi_dsub>
 800afc8:	e7c6      	b.n	800af58 <__kernel_sin+0xc0>
 800afca:	bf00      	nop
 800afcc:	f3af 8000 	nop.w
 800afd0:	5acfd57c 	.word	0x5acfd57c
 800afd4:	3de5d93a 	.word	0x3de5d93a
 800afd8:	8a2b9ceb 	.word	0x8a2b9ceb
 800afdc:	3e5ae5e6 	.word	0x3e5ae5e6
 800afe0:	57b1fe7d 	.word	0x57b1fe7d
 800afe4:	3ec71de3 	.word	0x3ec71de3
 800afe8:	19c161d5 	.word	0x19c161d5
 800afec:	3f2a01a0 	.word	0x3f2a01a0
 800aff0:	1110f8a6 	.word	0x1110f8a6
 800aff4:	3f811111 	.word	0x3f811111
 800aff8:	55555549 	.word	0x55555549
 800affc:	3fc55555 	.word	0x3fc55555
 800b000:	3fe00000 	.word	0x3fe00000

0800b004 <with_errno>:
 800b004:	b570      	push	{r4, r5, r6, lr}
 800b006:	4604      	mov	r4, r0
 800b008:	460d      	mov	r5, r1
 800b00a:	4616      	mov	r6, r2
 800b00c:	f7fb fb4e 	bl	80066ac <__errno>
 800b010:	4629      	mov	r1, r5
 800b012:	6006      	str	r6, [r0, #0]
 800b014:	4620      	mov	r0, r4
 800b016:	bd70      	pop	{r4, r5, r6, pc}

0800b018 <xflow>:
 800b018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b01a:	4615      	mov	r5, r2
 800b01c:	461c      	mov	r4, r3
 800b01e:	b180      	cbz	r0, 800b042 <xflow+0x2a>
 800b020:	4610      	mov	r0, r2
 800b022:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b026:	e9cd 0100 	strd	r0, r1, [sp]
 800b02a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b02e:	4628      	mov	r0, r5
 800b030:	4621      	mov	r1, r4
 800b032:	f7f5 fa51 	bl	80004d8 <__aeabi_dmul>
 800b036:	2222      	movs	r2, #34	; 0x22
 800b038:	b003      	add	sp, #12
 800b03a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b03e:	f7ff bfe1 	b.w	800b004 <with_errno>
 800b042:	4610      	mov	r0, r2
 800b044:	4619      	mov	r1, r3
 800b046:	e7ee      	b.n	800b026 <xflow+0xe>

0800b048 <__math_uflow>:
 800b048:	2200      	movs	r2, #0
 800b04a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b04e:	f7ff bfe3 	b.w	800b018 <xflow>

0800b052 <__math_oflow>:
 800b052:	2200      	movs	r2, #0
 800b054:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b058:	f7ff bfde 	b.w	800b018 <xflow>

0800b05c <fabs>:
 800b05c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b060:	4770      	bx	lr

0800b062 <finite>:
 800b062:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800b066:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b06a:	0fc0      	lsrs	r0, r0, #31
 800b06c:	4770      	bx	lr
	...

0800b070 <floor>:
 800b070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b074:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800b078:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800b07c:	2e13      	cmp	r6, #19
 800b07e:	4602      	mov	r2, r0
 800b080:	460b      	mov	r3, r1
 800b082:	4607      	mov	r7, r0
 800b084:	460c      	mov	r4, r1
 800b086:	4605      	mov	r5, r0
 800b088:	dc33      	bgt.n	800b0f2 <floor+0x82>
 800b08a:	2e00      	cmp	r6, #0
 800b08c:	da14      	bge.n	800b0b8 <floor+0x48>
 800b08e:	a334      	add	r3, pc, #208	; (adr r3, 800b160 <floor+0xf0>)
 800b090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b094:	f7f5 f86a 	bl	800016c <__adddf3>
 800b098:	2200      	movs	r2, #0
 800b09a:	2300      	movs	r3, #0
 800b09c:	f7f5 fcac 	bl	80009f8 <__aeabi_dcmpgt>
 800b0a0:	b138      	cbz	r0, 800b0b2 <floor+0x42>
 800b0a2:	2c00      	cmp	r4, #0
 800b0a4:	da58      	bge.n	800b158 <floor+0xe8>
 800b0a6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b0aa:	431d      	orrs	r5, r3
 800b0ac:	d001      	beq.n	800b0b2 <floor+0x42>
 800b0ae:	2500      	movs	r5, #0
 800b0b0:	4c2d      	ldr	r4, [pc, #180]	; (800b168 <floor+0xf8>)
 800b0b2:	4623      	mov	r3, r4
 800b0b4:	462f      	mov	r7, r5
 800b0b6:	e025      	b.n	800b104 <floor+0x94>
 800b0b8:	4a2c      	ldr	r2, [pc, #176]	; (800b16c <floor+0xfc>)
 800b0ba:	fa42 f806 	asr.w	r8, r2, r6
 800b0be:	ea01 0208 	and.w	r2, r1, r8
 800b0c2:	4302      	orrs	r2, r0
 800b0c4:	d01e      	beq.n	800b104 <floor+0x94>
 800b0c6:	a326      	add	r3, pc, #152	; (adr r3, 800b160 <floor+0xf0>)
 800b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0cc:	f7f5 f84e 	bl	800016c <__adddf3>
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	f7f5 fc90 	bl	80009f8 <__aeabi_dcmpgt>
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d0ea      	beq.n	800b0b2 <floor+0x42>
 800b0dc:	2c00      	cmp	r4, #0
 800b0de:	bfbe      	ittt	lt
 800b0e0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b0e4:	fa43 f606 	asrlt.w	r6, r3, r6
 800b0e8:	19a4      	addlt	r4, r4, r6
 800b0ea:	2500      	movs	r5, #0
 800b0ec:	ea24 0408 	bic.w	r4, r4, r8
 800b0f0:	e7df      	b.n	800b0b2 <floor+0x42>
 800b0f2:	2e33      	cmp	r6, #51	; 0x33
 800b0f4:	dd0a      	ble.n	800b10c <floor+0x9c>
 800b0f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b0fa:	d103      	bne.n	800b104 <floor+0x94>
 800b0fc:	f7f5 f836 	bl	800016c <__adddf3>
 800b100:	4607      	mov	r7, r0
 800b102:	460b      	mov	r3, r1
 800b104:	4638      	mov	r0, r7
 800b106:	4619      	mov	r1, r3
 800b108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b10c:	f04f 32ff 	mov.w	r2, #4294967295
 800b110:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800b114:	fa22 f808 	lsr.w	r8, r2, r8
 800b118:	ea18 0f00 	tst.w	r8, r0
 800b11c:	d0f2      	beq.n	800b104 <floor+0x94>
 800b11e:	a310      	add	r3, pc, #64	; (adr r3, 800b160 <floor+0xf0>)
 800b120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b124:	f7f5 f822 	bl	800016c <__adddf3>
 800b128:	2200      	movs	r2, #0
 800b12a:	2300      	movs	r3, #0
 800b12c:	f7f5 fc64 	bl	80009f8 <__aeabi_dcmpgt>
 800b130:	2800      	cmp	r0, #0
 800b132:	d0be      	beq.n	800b0b2 <floor+0x42>
 800b134:	2c00      	cmp	r4, #0
 800b136:	da02      	bge.n	800b13e <floor+0xce>
 800b138:	2e14      	cmp	r6, #20
 800b13a:	d103      	bne.n	800b144 <floor+0xd4>
 800b13c:	3401      	adds	r4, #1
 800b13e:	ea25 0508 	bic.w	r5, r5, r8
 800b142:	e7b6      	b.n	800b0b2 <floor+0x42>
 800b144:	2301      	movs	r3, #1
 800b146:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b14a:	fa03 f606 	lsl.w	r6, r3, r6
 800b14e:	4435      	add	r5, r6
 800b150:	42bd      	cmp	r5, r7
 800b152:	bf38      	it	cc
 800b154:	18e4      	addcc	r4, r4, r3
 800b156:	e7f2      	b.n	800b13e <floor+0xce>
 800b158:	2500      	movs	r5, #0
 800b15a:	462c      	mov	r4, r5
 800b15c:	e7a9      	b.n	800b0b2 <floor+0x42>
 800b15e:	bf00      	nop
 800b160:	8800759c 	.word	0x8800759c
 800b164:	7e37e43c 	.word	0x7e37e43c
 800b168:	bff00000 	.word	0xbff00000
 800b16c:	000fffff 	.word	0x000fffff

0800b170 <nan>:
 800b170:	2000      	movs	r0, #0
 800b172:	4901      	ldr	r1, [pc, #4]	; (800b178 <nan+0x8>)
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	7ff80000 	.word	0x7ff80000
 800b17c:	00000000 	.word	0x00000000

0800b180 <scalbn>:
 800b180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b182:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800b186:	4604      	mov	r4, r0
 800b188:	460d      	mov	r5, r1
 800b18a:	4617      	mov	r7, r2
 800b18c:	460b      	mov	r3, r1
 800b18e:	b996      	cbnz	r6, 800b1b6 <scalbn+0x36>
 800b190:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b194:	4303      	orrs	r3, r0
 800b196:	d039      	beq.n	800b20c <scalbn+0x8c>
 800b198:	4b33      	ldr	r3, [pc, #204]	; (800b268 <scalbn+0xe8>)
 800b19a:	2200      	movs	r2, #0
 800b19c:	f7f5 f99c 	bl	80004d8 <__aeabi_dmul>
 800b1a0:	4b32      	ldr	r3, [pc, #200]	; (800b26c <scalbn+0xec>)
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	429f      	cmp	r7, r3
 800b1a6:	460d      	mov	r5, r1
 800b1a8:	da0f      	bge.n	800b1ca <scalbn+0x4a>
 800b1aa:	a32b      	add	r3, pc, #172	; (adr r3, 800b258 <scalbn+0xd8>)
 800b1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b0:	f7f5 f992 	bl	80004d8 <__aeabi_dmul>
 800b1b4:	e006      	b.n	800b1c4 <scalbn+0x44>
 800b1b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b1ba:	4296      	cmp	r6, r2
 800b1bc:	d10a      	bne.n	800b1d4 <scalbn+0x54>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	f7f4 ffd4 	bl	800016c <__adddf3>
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	460d      	mov	r5, r1
 800b1c8:	e020      	b.n	800b20c <scalbn+0x8c>
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b1d0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800b1d4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800b1d8:	19b9      	adds	r1, r7, r6
 800b1da:	4291      	cmp	r1, r2
 800b1dc:	dd0e      	ble.n	800b1fc <scalbn+0x7c>
 800b1de:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b1e2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800b1e6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800b1ea:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800b1ee:	4820      	ldr	r0, [pc, #128]	; (800b270 <scalbn+0xf0>)
 800b1f0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800b1f4:	a31a      	add	r3, pc, #104	; (adr r3, 800b260 <scalbn+0xe0>)
 800b1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fa:	e7d9      	b.n	800b1b0 <scalbn+0x30>
 800b1fc:	2900      	cmp	r1, #0
 800b1fe:	dd08      	ble.n	800b212 <scalbn+0x92>
 800b200:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b204:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b208:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b20c:	4620      	mov	r0, r4
 800b20e:	4629      	mov	r1, r5
 800b210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b212:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800b216:	da12      	bge.n	800b23e <scalbn+0xbe>
 800b218:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b21c:	429f      	cmp	r7, r3
 800b21e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800b222:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800b226:	dcdc      	bgt.n	800b1e2 <scalbn+0x62>
 800b228:	a30b      	add	r3, pc, #44	; (adr r3, 800b258 <scalbn+0xd8>)
 800b22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800b232:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800b236:	480f      	ldr	r0, [pc, #60]	; (800b274 <scalbn+0xf4>)
 800b238:	f041 011f 	orr.w	r1, r1, #31
 800b23c:	e7b8      	b.n	800b1b0 <scalbn+0x30>
 800b23e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b242:	3136      	adds	r1, #54	; 0x36
 800b244:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b248:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b24c:	4620      	mov	r0, r4
 800b24e:	4629      	mov	r1, r5
 800b250:	2200      	movs	r2, #0
 800b252:	4b09      	ldr	r3, [pc, #36]	; (800b278 <scalbn+0xf8>)
 800b254:	e7ac      	b.n	800b1b0 <scalbn+0x30>
 800b256:	bf00      	nop
 800b258:	c2f8f359 	.word	0xc2f8f359
 800b25c:	01a56e1f 	.word	0x01a56e1f
 800b260:	8800759c 	.word	0x8800759c
 800b264:	7e37e43c 	.word	0x7e37e43c
 800b268:	43500000 	.word	0x43500000
 800b26c:	ffff3cb0 	.word	0xffff3cb0
 800b270:	8800759c 	.word	0x8800759c
 800b274:	c2f8f359 	.word	0xc2f8f359
 800b278:	3c900000 	.word	0x3c900000

0800b27c <_init>:
 800b27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27e:	bf00      	nop
 800b280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b282:	bc08      	pop	{r3}
 800b284:	469e      	mov	lr, r3
 800b286:	4770      	bx	lr

0800b288 <_fini>:
 800b288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b28a:	bf00      	nop
 800b28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b28e:	bc08      	pop	{r3}
 800b290:	469e      	mov	lr, r3
 800b292:	4770      	bx	lr
